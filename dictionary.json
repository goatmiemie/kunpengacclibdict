{
  "version": "1.0.3",
  "homePage": "",
  "Intrinsic_help_url": "https://developer.arm.com/architectures/instruction-sets/simd-isas/neon/intrinsics",
  "BuiltIn_url": "https://gcc.gnu.org/onlinedocs/",
  "Category": [
    {
      "cnName": "压缩库",
      "enName": "Compression library",
      "cnDesc": "使用鲲鹏硬件加速模块或鲲鹏指令对业界主流的开源压缩库（zlib、gzip、zstd、snappy等）进行性能优化，优化后压缩库通过鲲鹏社区发布",
      "enDesc": "The Kunpeng hardware acceleration module or Kunpeng instructions are used to optimize the performance of mainstream open-source compression libraries (such as zlib, gzip, zstd, and Snappy). The optimized compression libraries are released in the Kunpeng Community.",
      "id": "1"
    },
    {
      "cnName": "系统库",
      "enName": "System library",
      "cnDesc": "基于鲲鹏微架构特点，使用鲲鹏指令对系统通用的基础库进行性能优化，以及传统平台的指令函数映射到鲲鹏平台的公共模块",
      "enDesc": "Kunpeng instructions are used to optimize the performance of the common basic library of the system based on the Kunpeng micro-architecture features, and the instruction functions of the traditional platform are mapped to the common modules of the Kunpeng platform.",
      "id": "2"
    },
    {
      "cnName": "加解密库",
      "enName": "Encryption and decryption library",
      "cnDesc": "使用鲲鹏硬件加速模块及鲲鹏指令对openssl库进行性能优化，支持硬加速与指令加速的自动协同、应用逻辑无需修改即可使用加解密加速库",
      "enDesc": "The Kunpeng hardware acceleration module and Kunpeng instructions are used to optimize the performance of the OpenSSL library. Automatic collaboration between hardware acceleration and instruction acceleration is supported. The encryption and decryption acceleration library can be used without modifying the application logic.",
      "id": "3"
    },
    {
      "cnName": "媒体库",
      "enName": "Media library",
      "cnDesc": "基于鲲鹏加速指令提供高性能媒体原语库及视频编解码库",
      "enDesc": "High-performance media primitive library and video encoding/decoding library are provided based on Kunpeng acceleration instructions.",
      "id": "4"
    },
    {
      "cnName": "数学库",
      "enName": "Math library",
      "cnDesc": "鲲鹏数学库提供了基于鲲鹏平台优化的高性能数学函数，所有接口由C/C++、汇编语言实现。",
      "enDesc": "The Kunpeng Math Library (KML) provides high-performance mathematical functions optimized based on the Kunpeng platform. All interfaces are implemented by C/C++ and the assembly language.",
      "id": "5"
    }
  ],
  "library": [
    {
      "name": "glibc_patch",
      "category id": "2",
      "cnDesc": "对内存、字符串、锁等接口基于华为鲲鹏920处理器微架构特点进行了加速优化",
      "enDesc": "The memory, string, and lock are optimized and accelerated based on the microarchitecture of Huawei Kunpeng 920 processors.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/system",
      "code_url": "http://ftp.jaist.ac.jp/pub/GNU/libc"
    },
    {
      "name": "hyperscan",
      "category id": "2",
      "cnDesc": "基于鲲鹏微架构优势，使用鲲鹏指令加速正则表达式的编译、扫描性能",
      "enDesc": "Kunpeng instructions are used to accelerate the compilation and scanning performance of regular expressions based on the advantages of the Kunpeng micro-architecture.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/system",
      "code_url": "https://github.com/kunpengcompute/hyperscan"
    },
    {
      "name": "AVX2Neon",
      "category id": "2",
      "cnDesc": "AVX2Neon是一款接口集合库。当使用Intrinsic类接口的应用程序从传统平台迁移到鲲鹏计算平台时，由于各个平台的Intrinsic函数定义不同，需要逐一对Intrinsic函数重新进行适配开发。针对该问题，我们提供了AVX2Neon模块，将传统平台的Intrinsic接口集合使用鲲鹏指令重新实现，并封装为独立的接口模块(C语言头文件方式)，以减少大量迁移项目重复开发的工作量。用户可以通过将头文件导入应用程序即可继续使用传统平台的Intrinsic函数。",
      "enDesc": "AVX2Neon is an interface collection library. When an application using the Intrinsic interface is ported from a conventional platform to the Kunpeng platform, Intrinsic functions need to be re-adapted and developed one by one due to the different Intrinsic function syntax on the platforms. To address this problem, the AVX2Neon module is provided. The Intrinsic interface collection on the conventional platform is re-implemented by using Kunpeng instructions and encapsulated as an independent interface module (in C language header file mode)to reduce the workload of repeated development of porting projects. Users can continue to use the Intrinsic functions of the conventional platform by importing the header file into the application.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/system",
      "code_url": "%该软件包部分源码开放：https://github.com/kunpengcompute/AvxToNeon，未开放部分如有需求请访问 https://www.hikunpeng.com/developer/boostkit/library/system，选择AVX2Neon，点击“立即申请”下载申请表并填写信息后发送至邮箱kunpengcompute@huawei.com%"
    },
    {
      "name": "gzip",
      "category id": "1",
      "cnDesc": "基于gzip-1.10，通过数据预取、循环展开、CRC指令替换等方法，来提升其在鲲鹏平台上的压缩和解压缩速率，尤其对文本类型文件的压缩及解压具有更明显的性能优势",
      "enDesc": "Data prefetch, loop unrolling, and CRC instruction replacement are used based on gzip-1.10 to improve the compression and decompression speed on the Kunpeng platform, especially the compression and decompression of text files.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/compression",
      "code_url": "https://github.com/kunpengcompute/gzip"
    },
    {
      "name": "zstd",
      "category id": "1",
      "cnDesc": "基于zstd-1.4.4，通过使用NEON指令、内联汇编、代码结构调整、内存预取、指令流水线排布优化等方法，实现zstd在鲲鹏平台上压缩和解压性能的提升",
      "enDesc": "The zstd compression and decompression performance on the Kunpeng platform is improved by using NEON instructions, inline assembly, and memory prefetch, adjusting code structure, and optimizing instruction pipeline layout based on zstd-1.4.4.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/compression",
      "code_url": "https://github.com/kunpengcompute/zstd"
    },
    {
      "name": "snappy",
      "category id": "1",
      "cnDesc": "基于snappy-1.1.7，使用内联汇编、高宽位指令、优化CPU流水线、内存预取等方法，实现snappy在鲲鹏平台上的压缩和解压速率提升",
      "enDesc": "The Snappy compression and decompression rates on the Kunpeng platform are improved by using inline assembly, high-bit instructions, optimized CPU pipeline, and memory prefetch based on Snappy 1.1.7.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/compression",
      "code_url": "https://github.com/kunpengcompute/snappy"
    },
    {
      "name": "KAEzip",
      "category id": "1",
      "cnDesc": "KAEzip是鲲鹏加速引擎的压缩模块，使用鲲鹏硬加速模块实现deflate算法，结合无损用户态驱动框架，提供高性能gzip/zlib格式压缩接口",
      "enDesc": "KAEzip is the compression module of the Kunpeng acceleration engine. It uses the Kunpeng hardware acceleration module to implement the deflate algorithm and works with the lossless user-mode driver framework to provide an interface for high-performance compression in gzip or zlib format.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/compression",
      "code_url": "https://github.com/kunpengcompute/KAEzip"
    },
    {
      "name": "KAECrypto",
      "category id": "3",
      "cnDesc": "使用鲲鹏硬加速模块实现RSA/SM3/SM4/DH/MD5/AES算法，结合无损用户态驱动框架，提供高性能对称加解密、非对称加解密算法能力，兼容openssl1.1.1a及其之后版本，支持同步&异步机制",
      "enDesc": "The Kunpeng hardware acceleration module implements the RSA, SM3, SM4, DH, MD5, and AES algorithms, provides high-performance symmetric and asymmetric encryption and decryption based on the lossless user-mode driver framework. It is compatible with OpenSSL 1.1.1a and later versions and supports synchronous and asynchronous mechanisms.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/encryption-decryption",
      "code_url": "https://github.com/kunpengcompute/KAE"
    },
    {
      "name": "x265-patch",
      "category id": "4",
      "cnDesc": "针对ffmpeg视频转码场景，对x265的转码底层算子使用鲲鹏向量指令进行加速优化，提高转码性能",
      "enDesc": "The underlying x265 transcoding operators are accelerated and optimized by using the Kunpeng vector instruction to improve the transcoding performance in FFmpeg video transcoding scenarios.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/media",
      "code_url": "http://x265.org/blog/"
    },
    {
      "name": "HW265",
      "category id": "4",
      "cnDesc": "HW265视频编码器是符合H.265/HEVC视频编码标准、基于鲲鹏处理器NEON指令加速的华为自研H.265视频编码器。HW265支持四个预设编码档位可选，对应不同编码速度的应用场景，码率控制支持平均比特率模式（ABR）和恒定QP模式（CQP），功能涵盖直播、点播等各个场景，整体性能优于目前的主流开源软件。",
      "enDesc": "HW265 is a Huawei-developed H.265 video encoder that complies with the H.265/HEVC video encoding standard and uses the NEON instructions of Kunpeng processors for acceleration. HW265 supports four preset encoding levels that correspond to application scenarios with different encoding speeds. The bit rate control supports the average bit rate(ABR) and constant QP(CQP) modes. The functions cover various scenarios such as live TV and VOD. The overall performance of HW265 is better than that of mainstream open source software.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/media",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问 https://www.hikunpeng.com/developer/boostkit/library/media，选择HW265，点击“立即申请”下载申请表并填写相关信息后发送至邮箱kunpengcompute@huawei.com%"
    },
    {
      "name": "HMPP",
      "category id": "4",
      "cnDesc": "鲲鹏超媒体性能库HMPP(Hyper Media Performance Primitives)包括向量缓冲区的分配与释放、向量初始化、向量数学运算与统计学运算、向量采样与向量变换、滤波函数、变换函数(快速傅里叶变换)，支持IEEE 754浮点数运算标准，支持鲲鹏平台下使用。",
      "enDesc": "Kunpeng Hyper Media Performance Primitives(HMPP) prodives functions for allocating and releasing vector buffers, vector initialization, vector mathematical operations, vector statistics operations, vector sampling and conversion, filtering functions, as well as transform(such as fast fourier transform)functions. It complies with the IEEE 754(a technical standard for floating-point arithmetic)and can be used on the Kunpeng platform.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/media",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：DEB包 https://support.huawei.com/enterprise/zh/software/252271741-ESW2000307263; RPM包 https://support.huawei.com/enterprise/zh/software/252271741-ESW2000307262，注册/登录华为账号并申请下载%"
    },
    {
      "name": "KML_FFT",
      "category id": "5",
      "cnDesc": "KML_FFT基于鲲鹏架构，通过向量化、算法改进，对快速离散傅里叶变换进行了深度优化，使得快速傅里叶变换接口函数的性能由大幅度提升。",
      "enDesc": "Based on the Kunpeng architecture, KML_FFT deeply optimizes the fast fourier transform(FFT) by using vectorization and algorithm improvement, which greatly improves the performance of the FFT interface functions.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/math",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：https://support.huawei.com/enterprise/zh/software/252325103-ESW2000336112，注册/登录华为账号并申请下载%"
    },
    {
      "name": "KML_BLAS",
      "category id": "5",
      "cnDesc": "KML_BLAS基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，对BLAS的计算效率进行了深度挖掘，使得BLAS接口函数的性能逼近理论峰值。",
      "enDesc": "Based on the Kunpeng architecture, KML_BLAS performs in-depth mining on the computing efficiency of BLAS by means of vectorization, data prefetch, compilation optimization, and data rearrangement. As a result, the performance of BLAS interface functions approaches the theoretical peak.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/math",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：https://support.huawei.com/enterprise/zh/software/252325103-ESW2000336112，注册/登录华为账号并申请下载%"
    },
    {
      "name": "KML_SPBLAS",
      "category id": "5",
      "cnDesc": "KML_SPBLAS基于鲲鹏架构，充分利用鲲鹏的指令集和架构特点，开发了高性能稀疏矩阵运算库，提升HPC和大数据解决方案业务性能。",
      "enDesc": "Based on the instruction set and architecture features of Kunpeng, KML_SPBLAS develops a high-performance sparse matrix operation library to improve the service performance of HPC and big data solutions.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/math",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：https://support.huawei.com/enterprise/zh/software/252325103-ESW2000336112，注册/登录华为账号并申请下载%"
    },
    {
      "name": "KML_MATH",
      "category id": "5",
      "cnDesc": "KML_MATH通过周期函数规约、算法改进等手段，提供了基于鲲鹏处理器性能提升较大的函数实现。",
      "enDesc": "KML_MATH provides functions with high performance that is based on Kunpeng processors by means of periodic function reduction and algorithm improvement.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/math",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：https://support.huawei.com/enterprise/zh/software/252325103-ESW2000336112，注册/登录华为账号并申请下载%"
    },
    {
      "name": "KML_VML",
      "category id": "5",
      "cnDesc": "KML_VML通过NEON指令优化、内联汇编等方法，对输入数据进行向量化处理，充分利用了鲲鹏架构下的寄存器特点，实现了在鲲鹏处理器上的性能提升。",
      "enDesc": "KML_VML performs vectorization on input data by using methods such as NEON instruction optimization and inline assembly. It uses the register features in the Kunpeng architecture to imporve the performance of Kunpeng processors.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/math",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：https://support.huawei.com/enterprise/zh/software/252325103-ESW2000336112，注册/登录华为账号并申请下载%"
    },
    {
      "name": "KML_LAPACK",
      "category id": "5",
      "cnDesc": "KML_LAPACK通过分块、求解算法组合、多线程、BLAS接口优化等手段，基于鲲鹏架构对LAPACK的计算效率进行了优化，实现了在鲲鹏处理器上的性能提升。",
      "enDesc": "KML_LAPACK optimizes the LAPACK based on the Kunpeng architecture by means of block division, algorithm combination, multithreading, and Basic Linear Algebra Subprograms(BLAS) interface optimization,  imporving the performance of Kunpeng processors.",
      "kunpeng_url": "https://www.hikunpeng.com/developer/boostkit/library/math",
      "code_url": "%该软件包暂不支持公开下载，如有需求请访问：https://support.huawei.com/enterprise/zh/software/252325103-ESW2000336112，注册/登录华为账号并申请下载%"
    }
  ],
  "function": [
    {
      "name": "memcpy",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "内存复制函数",
      "desc_en": "Memory copy function",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "memset",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "内存初始化",
      "desc_en": "Memory initialization",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "memcmp",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "内存比较",
      "desc_en": "Memory comparison",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "memrchr",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "内存初始化",
      "desc_en": "Memory initialization",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "strcpy",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "字符串拷贝",
      "desc_en": "String copy",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "strlen",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "计算字符串长度",
      "desc_en": "Calculates the string length",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "strnlen",
      "library": "glibc_patch",
      "headerfile": "",
      "desc_cn": "计算指定内存区的字符串长度",
      "desc_en": "Calculates the length of a string in a specified memory area",
      "benefit_cn": "使用了Neon指令进行加速优化，已合入gnu社区",
      "benefit_en": "The NEON instructions are used for acceleration and have been incorporated into the GNU community."
    },
    {
      "name": "deflate",
      "library": "gzip",
      "headerfile": "",
      "desc_cn": "gzip工具的压缩接口",
      "desc_en": "Compression interface of the gzip tool",
      "benefit_cn": "使用了指令预取、循环展开实现性能优化",
      "benefit_en": "Instruction prefetch and loop unrolling are used to optimize the performance."
    },
    {
      "name": "inflate",
      "library": "gzip",
      "headerfile": "",
      "desc_cn": "gzip工具的解压接口",
      "desc_en": "Decompression interface of the gzip tool",
      "benefit_cn": "使用了CRC加速指令实现性能优化",
      "benefit_en": "The CRC acceleration instruction is used to optimize the performance."
    },
    {
      "name": "hs_scan",
      "library": "hyperscan",
      "headerfile": "https://gitee.com/kunpengcompute/hyperscan/raw/aarch64/src/hs_runtime.h",
      "desc_cn": "块模式的正则表达式扫描",
      "desc_en": "Regular expression scanning in block mode",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "hs_scan_vector",
      "library": "hyperscan",
      "headerfile": "https://gitee.com/kunpengcompute/hyperscan/raw/aarch64/src/hs_runtime.h",
      "desc_cn": "向量正则表达式扫描",
      "desc_en": "Vector regular expression scanning",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "hs_scan_stream",
      "library": "hyperscan",
      "headerfile": "https://gitee.com/kunpengcompute/hyperscan/raw/aarch64/src/hs_runtime.h",
      "desc_cn": "将待扫描数据写入打开的流中",
      "desc_en": "Write data to be scanned to the opened stream",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "hs_compile",
      "library": "hyperscan",
      "headerfile": "https://gitee.com/kunpengcompute/hyperscan/raw/aarch64/src/hs_compile.h",
      "desc_cn": "导入单个正则表达式",
      "desc_en": "Import a regular expression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "hs_compile_multi",
      "library": "hyperscan",
      "headerfile": "https://gitee.com/kunpengcompute/hyperscan/raw/aarch64/src/hs_compile.h",
      "desc_cn": "导入多个正则表达式",
      "desc_en": "Import multiple regular expressions",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "hs_compile_ext_multi",
      "library": "hyperscan",
      "headerfile": "https://gitee.com/kunpengcompute/hyperscan/raw/aarch64/src/hs_compile.h",
      "desc_cn": "导入多个含扩展参数的正则表达式",
      "desc_en": "Import multiple regular expressions containing extended parameters",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compress",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "zstd块压缩",
      "desc_en": "zstd block compression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompress",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "zstd块解压",
      "desc_en": "zstd block decompression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compressCCtx",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "参数可复用的zstd块压缩接口",
      "desc_en": "zstd block compression interface with reusable parameters",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompressDCtx",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "参数可复用的zstd流解压接口",
      "desc_en": "zstd stream decompression interface with reusable parameters",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compress2",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "参数复用的zstd流解压扩展接口",
      "desc_en": "zstd stream decompression extension interface with reusable parameters",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compressStream",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "zstd流压缩",
      "desc_en": "zstd stream compression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compressStream2",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "zstd流压缩扩展接口",
      "desc_en": "zstd stream compression extension interface",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompressStream",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "zstd流解压",
      "desc_en": "zstd stream decompression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compress_usingDict",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "基于字典的zstd块压缩",
      "desc_en": "Dictionary-based zstd block compression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompress_usingDict",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "基于字典的zstd块解压",
      "desc_en": "Dictionary-based zstd block decompression",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compress_usingCDict",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "基于摘要字典的zstd块压缩",
      "desc_en": "zstd block compression based on the digest dictionary",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompress_usingDDict",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "基于摘要字典的zstd块解压",
      "desc_en": "zstd block decompression based on the digest dictionary",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compressBegin",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "低内存消耗的流压缩初始化接口",
      "desc_en": "Stream compression initialization interface with low memory consumption",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compressContinue",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "低内存消耗的流压缩接口",
      "desc_en": "Stream compression interface with low memory consumption",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_compressEnd",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "低内存消耗的流压缩终止接口",
      "desc_en": "Stream compression termination interface with low memory consumption",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompressBegin",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "低内存消耗的流解压初始化接口",
      "desc_en": "Stream decompression initialization interface with low memory consumption",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "ZSTD_decompressContinue",
      "library": "zstd",
      "headerfile": "https://gitee.com/kunpengcompute/zstd/raw/aarch64-1.4.4/lib/zstd.h",
      "desc_cn": "低内存消耗的流解压接口",
      "desc_en": "Stream decompression interface with low memory consumption",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "snappy_compress",
      "library": "snappy",
      "headerfile": "https://gitee.com/kunpengcompute/snappy/raw/aarch64-1.1.7/snappy-c.h",
      "desc_cn": "块模式压缩接口",
      "desc_en": "Block-mode compression interface",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "snappy_uncompress",
      "library": "snappy",
      "headerfile": "https://gitee.com/kunpengcompute/snappy/raw/aarch64-1.1.7/snappy-c.h",
      "desc_cn": "块模式解压接口",
      "desc_en": "Block-mode decompression interface",
      "benefit_cn": "基于Neon指令实现性能优化",
      "benefit_en": "Performance optimized based on NEON instructions"
    },
    {
      "name": "deflate",
      "library": "KAEzip",
      "headerfile": "https://gitee.com/kunpengcompute/KAEzip/raw/master/include/kaezip.h",
      "desc_cn": "zlib流压缩接口",
      "desc_en": "zlib stream compression interface",
      "benefit_cn": "基于鲲鹏加速器进行性能优化",
      "benefit_en": "Performance optimized based on the Kunpeng accelerator"
    },
    {
      "name": "inflate",
      "library": "KAEzip",
      "headerfile": "https://gitee.com/kunpengcompute/KAEzip/raw/master/include/kaezip.h",
      "desc_cn": "zlib流解压接口",
      "desc_en": "zlib stream decompression interface",
      "benefit_cn": "基于鲲鹏加速器进行性能优化",
      "benefit_en": "Performance optimized based on the Kunpeng accelerator"
    },
    {
      "name": "compress",
      "library": "KAEzip",
      "headerfile": "https://gitee.com/kunpengcompute/KAEzip/raw/master/include/kaezip.h",
      "desc_cn": "zlib块压缩接口",
      "desc_en": "zlib block compression interface",
      "benefit_cn": "基于鲲鹏加速器进行性能优化",
      "benefit_en": "Performance optimized based on the Kunpeng accelerator"
    },
    {
      "name": "compress2",
      "library": "KAEzip",
      "headerfile": "https://gitee.com/kunpengcompute/KAEzip/raw/master/include/kaezip.h",
      "desc_cn": "zlib块压缩扩展接口",
      "desc_en": "zlib block compression extension interface",
      "benefit_cn": "基于鲲鹏加速器进行性能优化",
      "benefit_en": "Performance optimized based on the Kunpeng accelerator"
    },
    {
      "name": "uncompress",
      "library": "KAEzip",
      "headerfile": "https://gitee.com/kunpengcompute/KAEzip/raw/master/include/kaezip.h",
      "desc_cn": "zlib块解压接口",
      "desc_en": "zlib block decompression interface",
      "benefit_cn": "基于鲲鹏加速器进行性能优化",
      "benefit_en": "Performance optimized based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_EncryptInit_ex",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl加密初始化接口",
      "desc_en": "OpenSSL encryption initialization interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_EncryptUpdate",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl加密计算接口",
      "desc_en": "OpenSSL encryption calculation interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_EncryptFinal",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl加密完成接口",
      "desc_en": "OpenSSL encryption completion interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_DecryptInit_ex",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl解密初始化接口",
      "desc_en": "OpenSSL decryption initialization interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_DecryptUpdate",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl解密计算接口",
      "desc_en": "OpenSSL decryption calculation interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_DecryptFinal_ex",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl解密完成接口",
      "desc_en": "OpenSSL decryption completion interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_DigestInit_ex",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl摘要计算初始化接口",
      "desc_en": "OpenSSL digest calculation initialization interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_DigestUpdate",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl摘要计算接口",
      "desc_en": "OpenSSL digest calculation interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_DigestFinal_ex",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl摘要完成接口",
      "desc_en": "OpenSSL digest completion interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "DH_generate_key",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl DH私钥生成接口",
      "desc_en": "OpenSSL DH private key generation interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "DH_compute_key",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl DH计算共享秘钥接口",
      "desc_en": "OpenSSL DH shared key calculation interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "RSA_generate_key_ex",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl RSA秘钥对生成接口",
      "desc_en": "OpenSSL RSA key pairs generation interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_PKEY_encrypt",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl 公钥加密接口",
      "desc_en": "OpenSSL public key encryption interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_PKEY_decrypt",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl 私钥解密接口",
      "desc_en": "OpenSSL private key decryption interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_PKEY_sign",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl 私钥签名接口",
      "desc_en": "OpenSSL private key signature interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "EVP_PKEY_verify",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl 公钥验签接口",
      "desc_en": "OpenSSL public key signature verification interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "RSA_private_decrypt",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl RSA私钥解密接口",
      "desc_en": "OpenSSL RSA private key decryption interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "RSA_private_encrypt",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl RSA私钥加密接口",
      "desc_en": "OpenSSL RSA private key encryption interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "RSA_public_decrypt",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl RSA公钥解密接口",
      "desc_en": "OpenSSL RSA public key decryption interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "RSA_public_encrypt",
      "library": "KAECrypto",
      "headerfile": "https://gitee.com/mirrors/openssl/raw/dda4e259e51aeaf05a2417ef577accf778c9f6f6/include/openssl/evp.h",
      "desc_cn": "openssl RSA公钥加密接口",
      "desc_en": "OpenSSL RSA public key encryption interface",
      "benefit_cn": "基于鲲鹏加速器实现RSA/AES/SM3/SM4/MD5/DH性能加速",
      "benefit_en": "RSA/AES/SM3/SM4/MD5/DH performance accelerated based on the Kunpeng accelerator"
    },
    {
      "name": "vsadd",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型加法函数",
      "desc_en": "Single-precision floating-point real type adds vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdadd",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型加法函数",
      "desc_en": "Double-precision floating-point real type adds vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vssub",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型减法函数",
      "desc_en": "Single-precision floating-point real type subtracts vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdsub",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型减法函数",
      "desc_en": "Double-precision floating-point real type subtracts vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vssqr",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型平方函数",
      "desc_en": "Single-precision floating-point real type squares a vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdsqr",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型平方函数",
      "desc_en": "Double-precision floating-point real type squares a vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsmul",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型乘法函数",
      "desc_en": "Single-precision floating-point real type multiplies vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdmul",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型乘法函数",
      "desc_en": "Double-precision floating-point real type multiplies vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsdiv",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型除法函数",
      "desc_en": "Computes the quotient of single-precision floating-point real type vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vddiv",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型除法函数",
      "desc_en": "Computes the quotient of double-precision floating-point real type vectors",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vssqrt",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型开方函数",
      "desc_en": "Computes the square root of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdsqrt",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型开方函数",
      "desc_en": "Computes the square root of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vspow",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型幂函数",
      "desc_en": "Raises a single-precision floating-point real type vector to the specified power",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdpow",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型幂函数",
      "desc_en": "Raises a double-precision floating-point real type vector to the specified power",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsexp",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型以自然对数为底的指数函数",
      "desc_en": "Computes the base-e exponential of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdexp",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型以自然对数为底的指数函数",
      "desc_en": "Computes the base-e exponential of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsln",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型以自然对数为底的对数函数",
      "desc_en": "Computes the base-e logarithm of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdln",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型以自然对数为底的对数函数",
      "desc_en": "Computes the base-e logarithm of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vslog10",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型以10为底的对数函数",
      "desc_en": "Computes the base-10 logarithm of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdlog10",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型以10为底的对数函数",
      "desc_en": "Computes the base-10 logarithm of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vscos",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型余弦函数",
      "desc_en": "Computes the cosine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdcos",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型余弦函数",
      "desc_en": "Computes the cosine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vssin",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正弦函数",
      "desc_en": "Computes the sine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdsin",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正弦函数",
      "desc_en": "Computes the sine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vstan",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正切函数",
      "desc_en": "Computes the tangent of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdtan",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正切函数",
      "desc_en": "Computes the tangent of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsatan",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdatan",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsatan2",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型两个变量四个象限下的反正切函数",
      "desc_en": "Computes the four-quadrant arc tangent of two variables",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdatan2",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型两个变量四个象限下的反正切函数",
      "desc_en": "Computes the four-quadrant arc tangent of two variables",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vssincos",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正弦函数与余弦函数",
      "desc_en": "Computes the sine and cosine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdsincos",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正弦函数与余弦函数",
      "desc_en": "Computes the sine and cosine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vssinh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdsinh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vscosh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdcosh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vstanh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdtanh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsasinh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲反正弦函数",
      "desc_en": "Computes the hyperbolic arc sine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdasinh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲反正弦函数",
      "desc_en": "Computes the hyperbolic arc sine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsacosh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲反余弦函数",
      "desc_en": "Computes hyperbolic arc cosine of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdacosh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲反余弦函数",
      "desc_en": "Computes the hyperbolic arc cosine of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vsatanh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲反正切函数",
      "desc_en": "Computes the hyperbolic arc tangent of a single-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "vdatanh",
      "library": "KML_VML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲反正切函数",
      "desc_en": "Computes the hyperbolic arc tangent of a double-precision floating-point real type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "sin",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正弦函数",
      "desc_en": "Computes the sine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sinf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正弦函数",
      "desc_en": "Computes the sine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csin",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型正弦函数",
      "desc_en": "Computes the sine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csinf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型正弦函数",
      "desc_en": "Computes the sine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cos",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型余弦函数",
      "desc_en": "Computes the cosine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cosf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型余弦函数",
      "desc_en": "Computes the cosine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ccos",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型余弦函数",
      "desc_en": "Computes the cosine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ccosf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型余弦函数",
      "desc_en": "Computes the cosine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sincos",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正弦、余弦函数",
      "desc_en": "Computes the sine and cosine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sincosf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正弦、余弦函数",
      "desc_en": "Computes the sine and cosine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csincos",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型正弦、余弦函数",
      "desc_en": "Computes the sine and cosine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csincosf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型正弦、余弦函数",
      "desc_en": "Computes the sine and cosine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "tan",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正切函数",
      "desc_en": "Computes the tangent of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "tanf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正切函数",
      "desc_en": "Computes the tangent of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ctan",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型正切函数",
      "desc_en": "Computes the tangent of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ctanf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型正切函数",
      "desc_en": "Computes the tangent of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "asin",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反正弦函数",
      "desc_en": "Computes the arc sine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "asinf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反正弦函数",
      "desc_en": "Computes the arc sine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "casin",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型反正弦函数",
      "desc_en": "Computes the arc sine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "casinf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型反正弦函数",
      "desc_en": "Computes the arc sine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "acos",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反余弦函数",
      "desc_en": "Computes the arc cosine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "acosf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反余弦函数",
      "desc_en": "Computes the arc cosine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cacos",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型反余弦函数",
      "desc_en": "Computes the arc cosine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cacosf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型反余弦函数",
      "desc_en": "Computes the arc cosine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "atan",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "atanf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "catan",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型反正切函数",
      "desc_en": "Computes the arc tangent of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "catanf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型反正切函数",
      "desc_en": "Computes the arc tangent of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "atan2",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "atan2f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "catan2",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型反正切函数",
      "desc_en": "Computes the arc tangent of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "catan2f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型反正切函数",
      "desc_en": "Computes the arc tangent of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sinh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sinhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csinh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csinhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cosh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "coshf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ccosh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ccoshf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "tanh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "tanhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ctanh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ctanhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "asinh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲反正弦函数",
      "desc_en": "Computes the hyperbolic arc sine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "asinhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲反正弦函数",
      "desc_en": "Computes the hyperbolic arc sine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "casinh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型双曲反正弦函数",
      "desc_en": "Computes the hyperbolic arc sine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "casinhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型双曲反正弦函数",
      "desc_en": "Computes the hyperbolic arc sine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "acosh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲反余弦函数",
      "desc_en": "Computes the hyperbolic arc cosine of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "acoshf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲反余弦函数",
      "desc_en": "Computes the hyperbolic arc cosine of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cacosh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型双曲反余弦函数",
      "desc_en": "Computes the hyperbolic arc cosine of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cacoshf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型双曲反余弦函数",
      "desc_en": "Computes the hyperbolic arc cosine of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "atanh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲反正切函数",
      "desc_en": "Computes the hyperbolic arc tangent of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "atanhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲反正切函数",
      "desc_en": "Computes the hyperbolic arc tangent of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "catanh",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型双曲反正切函数",
      "desc_en": "Computes the hyperbolic arc tangent of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "catanhf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型双曲反正切函数",
      "desc_en": "Computes the hyperbolic arc tangent of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "exp",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "expf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cexp",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cexpf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "exp2",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型指数函数(base 2)",
      "desc_en": "Computes the base-2 exponential of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "exp2f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型指数函数(base 2)",
      "desc_en": "Computes the base-2 exponential of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cexp2",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型指数函数(base 2)",
      "desc_en": "Computes the base-2 exponential of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cexp2f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型指数函数(base 2)",
      "desc_en": "Computes the base-2 exponential of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "log",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "logf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "clog",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "clogf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "log2",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型对数函数(base 2)",
      "desc_en": "Computes the base-2 logarithm of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "log2f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型对数函数(base 2)",
      "desc_en": "Computes the base-2 logarithm of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "clog2",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型对数函数(base 2)",
      "desc_en": "Computes the base-2 logarithm of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "clog2f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型对数函数(base 2)",
      "desc_en": "Computes the base-2 logarithm of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "log10",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型对数函数(base 10)",
      "desc_en": "Computes the base-10 logarithm of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "log10f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型对数函数(base 10)",
      "desc_en": "Computes the base-10 logarithm of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "clog10",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型对数函数(base 10)",
      "desc_en": "Computes the base-10 logarithm of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "clog10f",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型对数函数(base 10)",
      "desc_en": "Computes the base-10 logarithm of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "pow",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型幂函数",
      "desc_en": "Raises double-precision floating-point real type x to the specified power",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "powf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型幂函数",
      "desc_en": "Raises single-precision floating-point real type x to the specified power",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cpow",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型幂函数",
      "desc_en": "Raises double-precision floating-point complex type x to the specified power",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cpowf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型幂函数",
      "desc_en": "Raises single-precision floating-point complex type x to the specified power",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sqrt",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型平方根函数",
      "desc_en": "Computes the square root of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "sqrtf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型平方根函数",
      "desc_en": "Computes the square root of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csqrt",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型平方根函数",
      "desc_en": "Computes the square root of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "csqrtf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型平方根函数",
      "desc_en": "Computes the square root of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cbrt",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度浮点类型立方根函数",
      "desc_en": "Computes the cubic root of double-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "cbrtf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度浮点类型立方根函数",
      "desc_en": "Computes the cubic root of single-precision floating-point real type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ccbrt",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "双精度复数类型立方根函数",
      "desc_en": "Computes the cubic root of double-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "ccbrtf",
      "library": "KML_MATH",
      "headerfile": "",
      "desc_cn": "单精度复数类型立方根函数",
      "desc_en": "Computes the cubic root of single-precision floating-point complex type x",
      "benefit_cn": "通过周期函数规约、算法改进等手段，提供了基于鲲鹏芯片性能提升较大的函数实现",
      "benefit_en": "Provides functions with high performance that is based on Kunpeng processors by means of Periodic function range reduction and algorithm improvement"
    },
    {
      "name": "svml128_sin_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正弦函数",
      "desc_en": "Computes the sine of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_sin_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正弦函数",
      "desc_en": "Computes the sine of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_cos_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型余弦函数",
      "desc_en": "Computes the cosine of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_cos_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型余弦函数",
      "desc_en": "Computes the cosine of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_sincos_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正弦、余弦函数",
      "desc_en": "Computes the sine and cosine of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_sincos_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正弦、余弦函数",
      "desc_en": "Computes the sine and cosine of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_tan_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型正切函数",
      "desc_en": "Computes the tangent of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_tan_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型正切函数",
      "desc_en": "Computes the tangent of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_atan_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_atan_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_atan2_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_atan2_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型反正切函数",
      "desc_en": "Computes the arc tangent of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_sinh_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_sinh_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲正弦函数",
      "desc_en": "Computes the hyperbolic sine of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_cosh_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_cosh_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲余弦函数",
      "desc_en": "Computes the hyperbolic cosine of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_tanh_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_tanh_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型双曲正切函数",
      "desc_en": "Computes the hyperbolic tangent of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_exp_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_exp_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_exp2_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型指数函数(base 2)",
      "desc_en": "Computes the base-2 exponential of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_exp2_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型指数函数(base 2)",
      "desc_en": "Computes the base-2 exponential of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_expm1_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_expm1_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型指数函数(base e)",
      "desc_en": "Computes the base-e exponential of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_log_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_log_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_log10_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型对数函数(base 10)",
      "desc_en": "Computes the base-10 logarithm of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_log10_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型对数函数(base 10)",
      "desc_en": "Computes the base-10 logarithm of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_log1p_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of single-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_log1p_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型对数函数(base e)",
      "desc_en": "Computes the base-e logarithm of double-precision floating-point type vector",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_pow_f32",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "单精度浮点类型幂函数",
      "desc_en": "Raises single-precision floating-point type vector to the specified power",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "svml128_pow_f64",
      "library": "KML_SVML",
      "headerfile": "",
      "desc_cn": "双精度浮点类型幂函数",
      "desc_en": "Raises double-precision floating-point type vector to the specified power",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "cblas_saxpy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量缩放与加和",
      "desc_en": "Vector scaling and summation",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_daxpy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量缩放与加和",
      "desc_en": "Vector scaling and summation",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_caxpy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量缩放与加和",
      "desc_en": "Vector scaling and summation",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zaxpy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量缩放与加和",
      "desc_en": "Vector scaling and summation",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sasum",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量元素绝对值求和",
      "desc_en": "Sum of absolute values of vector elements",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dasum",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量元素绝对值求和",
      "desc_en": "Sum of absolute values of vector elements",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_casum",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量元素绝对值求和",
      "desc_en": "Sum of absolute values of vector elements",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zasum",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量元素绝对值求和",
      "desc_en": "Sum of absolute values of vector elements",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_scopy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量拷贝",
      "desc_en": "Vector copy",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dcopy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量拷贝",
      "desc_en": "Vector copy",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ccopy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量拷贝",
      "desc_en": "Vector copy",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zcopy",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量拷贝",
      "desc_en": "Vector copy",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sdot",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量点积",
      "desc_en": "Vector dot product",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ddot",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量点积",
      "desc_en": "Vector dot product",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cdotc",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型共轭向量与另一向量的点积",
      "desc_en": "Dot product of a conjugate vector and another vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zdotc",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型共轭向量与另一向量的点积",
      "desc_en": "Dot product of a conjugate vector and another vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cdotu",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数向量点积",
      "desc_en": "Complex vector dot product",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zdotu",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数向量点积",
      "desc_en": "Complex vector dot product",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ssdot",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型扩展精度点积",
      "desc_en": "Extended precision dot product",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsdot",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型扩展精度点积",
      "desc_en": "Extended precision dot product",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_isamax",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量中最大绝对值的索引",
      "desc_en": "Index of the maximum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_idamax",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量中最大绝对值的索引",
      "desc_en": "Index of the maximum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_icamax",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量中最大绝对值的索引",
      "desc_en": "Index of the maximum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_izamax",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量中最大绝对值的索引",
      "desc_en": "Index of the maximum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_isamin",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量中最小绝对值的索引",
      "desc_en": "Index of the minimum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_idamin",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量中最小绝对值的索引",
      "desc_en": "Index of the minimum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_icamin",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量中最小绝对值的索引",
      "desc_en": "Index of the minimum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_izamin",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量中最小绝对值的索引",
      "desc_en": "Index of the minimum absolute value in the vector",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_snrm2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "计算欧几里得范数",
      "desc_en": "Euclidean norm",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dnrm2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "计算欧几里得范数",
      "desc_en": "Euclidean norm",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cnrm2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "计算欧几里得范数",
      "desc_en": "Euclidean norm",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_znrm2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "计算欧几里得范数",
      "desc_en": "Euclidean norm",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_srot",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型基于平面上点旋转",
      "desc_en": "Dot rotation based on the plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_drot",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型基于平面上点旋转",
      "desc_en": "Dot rotation based on the plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_srotg",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型构造旋转平面",
      "desc_en": "Constructs the rotating plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_drotg",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型构造旋转平面",
      "desc_en": "Constructs the rotating plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_srotm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型修改旋转平面",
      "desc_en": "Modifies the rotation plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_drotm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型修改旋转平面",
      "desc_en": "Modifies the rotation plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_srotmg",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型构造修改的旋转平面",
      "desc_en": "Constructs the modified conversion plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_drotmg",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型构造修改的旋转平面",
      "desc_en": "Constructs the modified conversion plane",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sscal",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量缩放",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dscal",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量缩放",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cscal",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量缩放",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zscal",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量缩放",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_csscal",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量缩放",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zdscal",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量缩放",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sswap",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型两个向量元素交换",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dswap",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型两个向量元素交换",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cswap",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型两个向量元素交换",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zswap",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型两个向量元素交换",
      "desc_en": "Vector scaling",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sgbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量与带状矩阵乘积",
      "desc_en": "Product of a vector and a band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dgbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量与带状矩阵乘积",
      "desc_en": "Product of a vector and a band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cgbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与带状矩阵乘积",
      "desc_en": "Product of a vector and a band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zgbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与带状矩阵乘积",
      "desc_en": "Product of a vector and a band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sgemv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型向量与矩阵乘积",
      "desc_en": "Product of a vector and a matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dgemv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型向量与矩阵乘积",
      "desc_en": "Product of a vector and a matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cgemv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与矩阵乘积",
      "desc_en": "Product of a vector and a matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zgemv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与矩阵乘积",
      "desc_en": "Product of a vector and a matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_sger",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度浮点类型一般矩阵秩1更新",
      "desc_en": "General matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dger",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度浮点类型一般矩阵秩1更新",
      "desc_en": "General matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cgerc",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "一般单精度复数矩阵秩1更新",
      "desc_en": "General complex matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zgerc",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "一般双精度复数矩阵秩1更新",
      "desc_en": "General complex matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_cgeru",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型一般共轭矩阵秩1更新",
      "desc_en": "General conjugate matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zgeru",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型一般共轭矩阵秩1更新",
      "desc_en": "General conjugate matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_chbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与埃尔米特带状矩阵乘积",
      "desc_en": "Product of a vector and a Hermitian band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zhbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与埃尔米特带状矩阵乘积",
      "desc_en": "Product of a vector and a Hermitian band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_chemv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与埃尔米特矩阵乘积",
      "desc_en": "Product of a vector and a Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zhemv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与埃尔米特矩阵乘积",
      "desc_en": "Product of a vector and a Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_cher",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数埃尔米特矩阵秩1更新",
      "desc_en": "Complex Hermitian matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zher",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数埃尔米特矩阵秩1更新",
      "desc_en": "Complex Hermitian matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_cher2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数埃尔米特矩阵秩2更新",
      "desc_en": "Complex Hermitian matrix rank 2 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zher2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数埃尔米特矩阵秩2更新",
      "desc_en": "Complex Hermitian matrix rank 2 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_chpmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数向量与压缩的埃尔米特矩阵乘积",
      "desc_en": "Product of vector and compressed Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zhpmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数向量与压缩的埃尔米特矩阵乘积",
      "desc_en": "Product of vector and compressed Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_chpr",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "三角展开的埃尔米特矩阵秩1更新",
      "desc_en": "Rank 1 update of triangularly expanded Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zhpr",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "三角展开的埃尔米特矩阵秩1更新",
      "desc_en": "Rank 1 update of triangularly expanded Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_chpr2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "三角展开的埃尔米特矩阵秩2更新",
      "desc_en": "Rank 2 update of triangularly expanded Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zhpr2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "三角展开的埃尔米特矩阵秩2更新",
      "desc_en": "Rank 2 update of triangularly expanded Hermitian matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度向量与对称带状矩阵乘积",
      "desc_en": "Product of a vector and a symmetric band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度向量与对称带状矩阵乘积",
      "desc_en": "Product of a vector and a symmetric band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_sspmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度向量与压缩的对称矩阵乘积",
      "desc_en": "Product of vector and compressed symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dspmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度向量与压缩的对称矩阵乘积",
      "desc_en": "Product of vector and compressed symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_sspr",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "对称展开矩阵秩1更新",
      "desc_en": "Rank 1 update of symmetric expansion matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dspr",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "对称展开矩阵秩1更新",
      "desc_en": "Rank 1 update of symmetric expansion matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_sspr2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "对称展开矩阵秩2更新",
      "desc_en": "Rank 2 update of symmetric expansion matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dspr2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "对称展开矩阵秩2更新",
      "desc_en": "Rank 2 update of symmetric expansion matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssymv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度向量与对称矩阵乘积",
      "desc_en": "Product of a vector and a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsymv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度向量与对称矩阵乘积",
      "desc_en": "Product of a vector and a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssyr",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度对称矩阵秩1更新",
      "desc_en": "Symmetric matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsyr",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度对称矩阵秩1更新",
      "desc_en": "Symmetric matrix rank 1 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssyr2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度对称矩阵秩2更新",
      "desc_en": "Symmetric matrix rank 2 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsyr2",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度对称矩阵秩2更新",
      "desc_en": "Symmetric matrix rank 2 update",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_stbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型向量与三角带状矩阵乘积",
      "desc_en": "Product of a vector and a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型向量与三角带状矩阵乘积",
      "desc_en": "Product of a vector and a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ctbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与三角带状矩阵乘积",
      "desc_en": "Product of a vector and a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztbmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与三角带状矩阵乘积",
      "desc_en": "Product of a vector and a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_stbsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型线性方程组求解，稀疏矩阵为三角带状矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtbsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型线性方程组求解，稀疏矩阵为三角带状矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ctbsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型线性方程组求解，稀疏矩阵为三角带状矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztbsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型线性方程组求解，稀疏矩阵为三角带状矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular band matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_stpmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型向量与压缩的三角矩阵乘积",
      "desc_en": "Product of vector and compressed triangular mstrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtpmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型向量与压缩的三角矩阵乘积",
      "desc_en": "Product of vector and compressed triangular mstrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ctpmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与压缩的三角矩阵乘积",
      "desc_en": "Product of vector and compressed triangular mstrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztpmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与压缩的三角矩阵乘积",
      "desc_en": "Product of vector and compressed triangular mstrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_stpsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型线性方程组求解，稀疏矩阵是压缩的三角矩阵",
      "desc_en": "For solving linear equations, the sparse matrix is a compressed triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtpsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型线性方程组求解，稀疏矩阵是压缩的三角矩阵",
      "desc_en": "For solving linear equations, the sparse matrix is a compressed triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ctpsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型线性方程组求解，稀疏矩阵是压缩的三角矩阵",
      "desc_en": "For solving linear equations, the sparse matrix is a compressed triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztpsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型线性方程组求解，稀疏矩阵是压缩的三角矩阵",
      "desc_en": "For solving linear equations, the sparse matrix is a compressed triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_strmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型向量与三角矩阵乘积",
      "desc_en": "Product of a vector and a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtrmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型向量与三角矩阵乘积",
      "desc_en": "Product of a vector and a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ctrmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量与三角矩阵乘积",
      "desc_en": "Product of a vector and a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztrmv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量与三角矩阵乘积",
      "desc_en": "Product of a vector and a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_strsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型线性方程组求解，稀疏矩阵是三角矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtrsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型线性方程组求解，稀疏矩阵是三角矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ctrsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型线性方程组求解，稀疏矩阵是三角矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztrsv",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型线性方程组求解，稀疏矩阵是三角矩阵",
      "desc_en": "Solves linear equations. The sparse matrix is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_sgemm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型一般矩阵乘矩阵",
      "desc_en": "General matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dgemm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型一般矩阵乘矩阵",
      "desc_en": "General matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_cgemm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型一般矩阵乘矩阵",
      "desc_en": "General matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zgemm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型一般矩阵乘矩阵",
      "desc_en": "General matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_chemm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型埃尔米特矩阵乘积",
      "desc_en": "Complex Hermitian moment-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zhemm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型埃尔米特矩阵乘积",
      "desc_en": "Complex Hermitian moment-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_cher2k",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵乘矩阵秩2更新，矩阵C为复数埃尔米特矩阵",
      "desc_en": "Complex matrix-matrix multiplication rank 2 update. The matrix C is a complex Hermitian moment",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zher2k",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵乘矩阵秩2更新，矩阵C为复数埃尔米特矩阵",
      "desc_en": "Complex matrix-matrix multiplication rank 2 update. The matrix C is a complex Hermitian moment",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_cherk",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵乘矩阵秩k更新，矩阵C为单精度复数埃尔米特矩阵",
      "desc_en": "Complex matrix-matrix multiplication rank k update. The matrix C is a float-complex Hermitian moment",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zherk",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵乘矩阵秩k更新，矩阵C为双精度复数埃尔米特矩阵",
      "desc_en": "Complex matrix-matrix multiplication rank k update. The matrix C is a double-complex Hermitian moment",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssymm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型对称矩阵乘矩阵",
      "desc_en": "Symmetric matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsymm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型对称矩阵乘矩阵",
      "desc_en": "Symmetric matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_csymm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型对称矩阵乘矩阵",
      "desc_en": "Symmetric matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zsymm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型对称矩阵乘矩阵",
      "desc_en": "Symmetric matrix-matrix multiplication",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssyrk",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型矩阵乘矩阵秩K更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank k update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsyrk",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型矩阵乘矩阵秩K更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank k update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_csyrk",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵乘矩阵秩K更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank k update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zsyrk",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵乘矩阵秩K更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank k update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_ssyr2k",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型矩阵乘矩阵秩2更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank 2 update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dsyr2k",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型矩阵乘矩阵秩2更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank 2 update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
     {
      "name": "cblas_csyr2k",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵乘矩阵秩2更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank 2 update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zsyr2k",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵乘矩阵秩2更新，矩阵C为对称矩阵",
      "desc_en": "Matrix-matrix multiplication rank 2 update. The matrix C is a symmetric matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_strmm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型矩阵乘矩阵,其中一个矩阵为三角矩阵",
      "desc_en": "Matrix-matrix multiplication. One of the matrices is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtrmm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型矩阵乘矩阵,其中一个矩阵为三角矩阵",
      "desc_en": "Matrix-matrix multiplication. One of the matrices is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
     {
      "name": "cblas_ctrmm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵乘矩阵,其中一个矩阵为三角矩阵",
      "desc_en": "Matrix-matrix multiplication. One of the matrices is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztrmm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵乘矩阵,其中一个矩阵为三角矩阵",
      "desc_en": "Matrix-matrix multiplication.One of the matrices is a triangular matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_strsm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型三角矩阵方程求解",
      "desc_en": "Triangular matrix equation solution",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_dtrsm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型三角矩阵方程求解",
      "desc_en": "Triangular matrix equation solution",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
     {
      "name": "cblas_ctrsm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型三角矩阵方程求解",
      "desc_en": "Triangular matrix equation solution",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_ztrsm",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型三角矩阵方程求解",
      "desc_en": "Triangular matrix equation solution",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_saxpby",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度类型向量分别缩放与加和",
      "desc_en": "Vector scaling and summation separately",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_daxpby",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度类型向量分别缩放与加和",
      "desc_en": "Vector scaling and summation separately",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_caxpby",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型向量分别缩放与加和",
      "desc_en": "Vector scaling and summation separately",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zaxpby",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型向量分别缩放与加和",
      "desc_en": "Vector scaling and summation separately",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "cblas_cgemm3m",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "一般单精度复数矩阵乘矩阵",
      "desc_en": "Product of a general single-precision complex matrix and a matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
	{
      "name": "cblas_zgemm3m",
      "library": "KML_BLAS",
      "headerfile": "",
      "desc_cn": "一般双精度复数矩阵乘矩阵",
      "desc_en": "Product of a general double-precision complex matrix and a matrix",
      "benefit_cn": "基于鲲鹏架构，通过向量化、数据预取、编译优化、数据重排等手段，实现性能优化",
      "benefit_en": "Based on the Kunpeng architecture, performance is optimized through vectorization, data prefetching, compilation optimization, and data rearrangement."
    },
    {
      "name": "kml_sparse_saxpyi",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，稀疏向量与标量相乘，并将结果加到另一向量上",
      "desc_en": "single-precision real type, computes the product of a sparse vector and a scalar and stores the product to another vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供了高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_daxpyi",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，稀疏向量与标量相乘，并将结果加到另一向量上",
      "desc_en": "double-precision real type, computes the product of a sparse vector and a scalar and stores the product to another vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供了高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_caxpyi",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，稀疏向量与标量相乘，并将结果加到另一向量上",
      "desc_en": "single-precision complex type, computes the product of a sparse vector and a scalar and stores the product to another vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zaxpyi",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，稀疏向量与标量相乘，并将结果加到另一向量上",
      "desc_en": "double-precision complex type, computes the product of a sparse vector and a scalar and stores the product to another vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_sdoti",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型稀疏向量点积",
      "desc_en": "Computes the dot product of single-precision real type sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供了高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_ddoti",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型稀疏向量点积",
      "desc_en": "Computes the dot product of double-precision real type sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供了高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_cdotci_sub",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型稀疏向量共轭点积",
      "desc_en": "Computes the dot conjugate product of single-precision complex type sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zdotci_sub",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型稀疏向量共轭点积",
      "desc_en": "Computes the conjugate dot product of double-precision complex type sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_cdotui_sub",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数域稀疏向量非共轭点积",
      "desc_en": "Computes the dot non-conjugate product of single-precision complex sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zdotui_sub",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数域稀疏向量非共轭点积",
      "desc_en": "Computes the non-conjugate dot product of double-precision complex sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_sgthr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，将全存储稀疏向量中的指定元素加载到压缩格式的稀疏向量中",
      "desc_en": "single-precision real type, Gathers the specified elements of a full-storage vector into a compressed sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_dgthr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，将全存储向量中的指定元素加载到压缩格式的稀疏向量中",
      "desc_en": "double-precision real type, Gathers the specified elements of a full-storage vector into a compressed sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_cgthr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，将全存储向量中的指定元素加载到压缩格式的稀疏向量中",
      "desc_en": "single-precision complex type, Gathers the specified elements of a full-storage vector into a compressed sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zgthr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，将全存储稀疏向量中的指定元素加载到压缩格式的向量中",
      "desc_en": "double-precision complex type, Gathers the specified elements of a full-storage sparse vector into a compressed vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_sgthrz",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，将全存储向量中的指定元素加载到压缩格式的向量中，并将全存储向量元素清零",
      "desc_en": "single-precision real type, Gathers the specified elements of a full-storage vector into a compressed sparse vector, and zeroes out these elements in the full-storage vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_dgthrz",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，将全存储向量中的指定元素加载到压缩格式的稀疏向量中，并将全存储向量元素清零",
      "desc_en": "double-precision real type, Gathers the specified elements of a full-storage vector into a compressed sparse vector, and zeroes out these elements in the full-storage vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_cgthrz",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，将全存储向量中的指定元素加载到压缩格式的稀疏向量中，并将全存储向量元素清零",
      "desc_en": "single-precision complex type, Gathers the specified elements of a full-storage vector into a compressed sparse vector, and zeroes out these elements in the full-storage vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zgthrz",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，将全存储向量中的指定元素加载到压缩格式的稀疏向量中，并将全存储向量元素清零",
      "desc_en": "double-precision complex type, Gathers the specified elements of a full-storage vector into a compressed sparse vector, and zeroes out these elements in the full-storage vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_sroti",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "对两个单精度实数类型稀疏向量进行旋转",
      "desc_en": "Rotates two single-precision real type sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_droti",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "对两个双精度实数类型稀疏向量进行旋转",
      "desc_en": "Rotates two double-precision real type sparse vectors",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_ssctr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "将压缩格式的单精度类型向量写入全存储稀疏向量的指定位置",
      "desc_en": "Writes a compressed single-precision type vector to the specified location of a full-storage sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_dsctr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "将压缩格式的双精度类型向量写入全存储稀疏向量的指定位置",
      "desc_en": "Writes a compressed double-precision type vector to the specified location of a full-storage sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_csctr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "将压缩格式的单精度复数类型向量写入全存储稀疏向量的指定位置",
      "desc_en": "Writes a compressed single-precision complex type vector to the specified location of a full-storage sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zsctr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "将压缩格式的双精度复数类型向量写入全存储稀疏向量的指定位置",
      "desc_en": "Writes a compressed double-precision complex type vector to the specified location of a full-storage sparse vector",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏通常矩阵",
      "desc_en": "single-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_dcsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏通常矩阵",
      "desc_en": "double-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_ccsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏通常矩阵",
      "desc_en": "single-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zcsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏通常矩阵",
      "desc_en": "double-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "single-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_dcsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "double-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_ccsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "single-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zcsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "double-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "single-precision real type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_dcsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "double-precision real type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_ccsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "single-precision complex type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_zcsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基1索引的稀疏对称矩阵",
      "desc_en": "double-precision complex type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with one-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_scsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏通常矩阵",
      "desc_en": "single-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏通常矩阵",
      "desc_en": "double-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏通常矩阵",
      "desc_en": "single-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrgemv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏通常矩阵",
      "desc_en": "double-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse general matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_scsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "single-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "double-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "single-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrsymv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与向量乘积，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "double-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_scsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "single-precision real type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "double-precision real type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "single-precision complex type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrtrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，求解三角矩阵方程组计算，矩阵是CSR格式(三数组)基0索引的稀疏对称矩阵",
      "desc_en": "double-precision complex type, Triangular matrix equation solution. The matrix is a sparse symmetric matrix stored in the CSR format(3-array variation) with zero-based indexing",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与向量乘积，矩阵是CSR格式的稀疏矩阵",
      "desc_en": "single-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse matrix stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与向量乘积，矩阵是CSR格式的稀疏矩阵",
      "desc_en": "double-precision real type, Computes the product of a matrix and a vector. The matrix is a sparse matrix stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与向量乘积，矩阵是CSR格式的稀疏矩阵",
      "desc_en": "single-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse matrix stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与向量乘积，矩阵是CSR格式的稀疏矩阵",
      "desc_en": "double-precision complex type, Computes the product of a matrix and a vector. The matrix is a sparse matrix stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSR",
      "desc_en": "single-precision real type, Solves a system of linear equations for a sparse matrix that is stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSR",
      "desc_en": "double-precision real type, Solves a system of linear equations for a sparse matrix that is stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型求解稀疏线性方程组，稀疏矩阵存储格式为CSR",
      "desc_en": "single-precision complex type, Solves a system of linear equations for a sparse matrix that is stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSR",
      "desc_en": "double-precision complex type, Solves a system of linear equations for a sparse matrix that is stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，计算CSR格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "single-precision real type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，计算CSR格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "double-precision real type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，计算CSR格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "single-precision complex type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，计算CSR格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "double-precision complex type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scscmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与向量乘积，矩阵是CSC格式的稀疏矩阵",
      "desc_en": "single-precision real type, Computes the product of a matrix and a vector. The natrix is a sparse matrix stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcscmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与向量乘积，矩阵是CSC格式的稀疏矩阵",
      "desc_en": "double-precision real type, Computes the product of a matrix and a vector. The natrix is a sparse matrix stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccscmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与向量乘积，矩阵是CSC格式的稀疏矩阵",
      "desc_en": "single-precision complex type, Computes the product of a matrix and a vector. The natrix is a sparse matrix stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcscmv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与向量乘积，矩阵是CSC格式的稀疏矩阵",
      "desc_en": "double-precision complex type, Computes the product of a matrix and a vector. The natrix is a sparse matrix stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scscsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSC",
      "desc_en": "single-precision real type, Solves a system of linear equations for a sparse matrix that is stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcscsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSC",
      "desc_en": "double-precision real type, Solves a system of linear equations for a sparse matrix that is stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccscsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSC",
      "desc_en": "single-precision complex type, Solves a system of linear equations for a sparse matrix that is stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcscsv",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，求解稀疏线性方程组，稀疏矩阵存储格式为CSC",
      "desc_en": "double-precision complex type, Solves a system of linear equations for a sparse matrix that is stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scscmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，计算CSC格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "single-precision real type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcscmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，计算CSC格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "double-precision real type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccscmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，计算CSC格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "single-precision complex type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcscmm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，计算CSC格式的稀疏矩阵和稠密矩阵的积",
      "desc_en": "double-precision complex type, Computes the product of a sparse matrix and a dense matrix that are stored in the CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSR格式",
      "desc_en": "single-precision real type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSR格式",
      "desc_en": "double-precision real type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSR格式",
      "desc_en": "single-precision complex type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSR格式",
      "desc_en": "double-precision complex type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSR format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scscsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSC格式",
      "desc_en": "single-precision real type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcscsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSC格式",
      "desc_en": "double-precision real type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccscsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSC格式",
      "desc_en": "single-precision complex type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcscsm",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，求解多个右端顶的稀疏线性方程组，矩阵式CSC格式",
      "desc_en": "double-precision complex type, Solving a sparse system of linear equations with multiple right-hand terms, the matrix is in CSC format",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsradd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与矩阵相加，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "single-precision real type, Computes the sum of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsradd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与矩阵相加，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "double-precision real type, Computes the sum of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsradd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与矩阵相加，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "single-precision complex type, Computes the sum of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsradd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与矩阵相加，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "double-precision complex type, Computes the sum of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrmultcsr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "single-precision real type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrmultcsr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "double-precision real type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrmultcsr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "single-precision complex type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrmultcsr",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稀疏矩阵",
      "desc_en": "double-precision complex type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a sparse matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_sparse_scsrmultd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度实数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稠密矩阵",
      "desc_en": "single-precision real type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a dense matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_dcsrmultd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度实数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稠密矩阵",
      "desc_en": "double-precision real type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a dense matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_ccsrmultd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "单精度复数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稠密矩阵",
      "desc_en": "single-precision complex type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a dense matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_csparse_zcsrmultd",
      "library": "KML_SPBLAS",
      "headerfile": "",
      "desc_cn": "双精度复数类型，矩阵与矩阵相乘，矩阵是CSR格式(三数组，矩阵index从1开始)的稀疏矩阵，结果存储在稠密矩阵",
      "desc_en": "double-precision complex type, Computes the product of two sparse matrices that are stored in the CSR format(3-array variation)with one-based indexing.The result is stored in a dense matrix",
      "benefit_cn": "基于鲲鹏架构为压缩格式的稀疏矩阵提供高性能向量、矩阵运算",
      "benefit_en": "Based on the Kunpeng architecture provides high-performance vector and matrix operations for sparse matrices in compressed formats"
    },
    {
      "name": "kml_fft_plan_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列n维C2C变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列n维C2C变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列1维C2C变换的plan",
      "desc_en": "double-precision type, create a plan for the one-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列1维C2C变换的plan",
      "desc_en": "single-precision type, create a plan for the one-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列2维C2C变换的plan",
      "desc_en": "double-precision type, create a plan for the two-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列2维C2C变换的plan",
      "desc_en": "single-precision type, create a plan for the two-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列3维C2C变换的plan",
      "desc_en": "double-precision type, create a plan for the three-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列3维C2C变换的plan",
      "desc_en": "single-precision type, create a plan for the three-dimensional complex-to-complex(C2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_split_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_split_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_split_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_split_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of a multiple data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_many_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立howmany组数据序列n维C2C变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_many_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立howmany组数据序列n维C2C变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-complex(C2C)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列n维R2C变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列n维R2C变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2c_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列1维R2C变换的plan",
      "desc_en": "double-precision type, create a plan for the one-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2c_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列1维R2C变换的plan",
      "desc_en": "single-precision type, create a plan for the one-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2c_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列2维R2C变换的plan",
      "desc_en": "double-precision type, create a plan for the two-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2c_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列2维R2C变换的plan",
      "desc_en": "single-precision type, create a plan for the two-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2c_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列3维R2C变换的plan",
      "desc_en": "double-precision type, create a plan for the three-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2c_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列3维R2C变换的plan",
      "desc_en": "single-precision type, create a plan for the three-dimensional real-to-complex(R2C)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_split_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_split_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_split_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_split_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维R2C变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of a multiple data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_many_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立howmany组数据序列n维R2C变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_many_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立howmany组数据序列n维R2C变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-complex(R2C)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列n维c2r变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-real(c2r)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列n维C2R变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_c2r_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列1维C2R变换的plan",
      "desc_en": "double-precision type, create a plan for the one-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_c2r_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列1维C2R变换的plan",
      "desc_en": "single-precision type, create a plan for the one-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_c2r_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列2维C2R变换的plan",
      "desc_en": "double-precision type, create a plan for the two-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_c2r_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列2维C2R变换的plan",
      "desc_en": "single-precision type, create a plan for the two-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_c2r_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列3维C2R变换的plan",
      "desc_en": "double-precision type, create a plan for the three-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_c2r_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列3维C2R变换的plan",
      "desc_en": "single-precision type, create a plan for the three-dimensional complex-to-real(C2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_split_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_split_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_split_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_split_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维C2R变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of a multiple data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_many_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立howmany组数据序列n维C2R变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_many_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立howmany组数据序列n维C2R变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional complex-to-real(C2R)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列n维R2R变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列n维R2R变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2r_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列1维R2R变换的plan",
      "desc_en": "double-precision type, create a plan for the one-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2r_1d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列1维R2R变换的plan",
      "desc_en": "single-precision type, create a plan for the one-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2r_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列2维R2R变换的plan",
      "desc_en": "double-precision type, create a plan for the two-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2r_2d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列2维R2R变换的plan",
      "desc_en": "single-precision type, create a plan for the two-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_dft_r2r_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立单个连续数据序列3维R2R变换的plan",
      "desc_en": "double-precision type, create a plan for the three-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_dft_r2r_3d",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立单个连续数据序列3维R2R变换的plan",
      "desc_en": "single-precision type, create a plan for the three-dimensional real-to-real(R2R)transform of a single contiguous data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维R2R变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维R2R变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_guru64_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立多组数据序列n维R2R变换的plan。",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_guru64_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立多组数据序列n维R2R变换的plan。",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of a multiple data sequence.",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_many_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,建立howmany组数据序列n维R2R变换的plan",
      "desc_en": "double-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_many_dft_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,建立howmany组数据序列n维R2R变换的plan",
      "desc_en": "single-precision type, create a plan for the n-dimensional real-to-real(R2R)transform of howmany data sequence",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_r2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_split_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_split_dft",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_split_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_split_dft_r2c",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_execute_split_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,执行之前建立的FFT变换plan",
      "desc_en": "double-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_execute_split_dft_c2r",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,执行之前建立的FFT变换plan",
      "desc_en": "single-precision type, executes the created FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_malloc",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型,分配所需内存空间",
      "desc_en": "double-precision type, allocate the required memory space",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_malloc",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型,分配所需内存空间",
      "desc_en": "single-precision type, allocate the required memory space",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_free",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "释放由kml_fft_malloc函数申请的内存",
      "desc_en": "Release the memory space applied using the kml_fft_malloc function",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_free",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "释放由kml_fftf_malloc函数申请的内存",
      "desc_en": "Release the memory space applied using the kml_fftf_malloc function",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_destroy_plan",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型，释放FFT变换plan的所有内存",
      "desc_en": "double-precision type, Release all the memory space used by an FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_destroy_plan",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型，释放FFT变换plan的所有内存",
      "desc_en": "single-precision type, Release all the memory space used by an FFT plan",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_init_threads",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型，初始化线程",
      "desc_en": "double-precision type, initialize thread",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_init_threads",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型，初始化线程",
      "desc_en": "single-precision type, initialize thread",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_plan_with_threads",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型，指定FFT库接口函数执行的线程数",
      "desc_en": "double-precision type, specify the number of threads executed by the FFT library interface function",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_plan_with_threads",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型，指定FFT库接口函数执行的线程数",
      "desc_en": "single-precision type, specify the number of threads executed by the FFT library interface function",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fft_cleanup_threads",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "双精度类型，释放多线程框架相关的资源",
      "desc_en": "double-precision type, release resources related the multi-thread framework",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "kml_fftf_cleanup_threads",
      "library": "KML_FFT",
      "headerfile": "",
      "desc_cn": "单精度类型，释放多线程框架相关的资源",
      "desc_en": "single-precision type, release resources related the multi-thread framework",
      "benefit_cn": "通过Neon指令优化、内联汇编等方法，充分利用鲲鹏架构下的寄存器特点，实现了在鲲鹏服务器上的性能提升",
      "benefit_en": "Using methods such as NEON instruction optimization and inline assembly. It makes full use of register features in the Kunpeng architecture to improve performance of Kunpeng servers"
    },
    {
      "name": "sgetrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "单精度实数类型矩阵的LU分解",
      "desc_en": "LU factorization of single precision real type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵LU分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix LU factorization performance"
    },
    {
      "name": "dgetrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度实数类型矩阵的LU分解",
      "desc_en": "LU factorization of double precision real type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵LU分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix LU factorization performance"
    },
    {
      "name": "cgetrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵的LU分解",
      "desc_en": "LU factorization of single precision complex type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵LU分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix LU factorization performance"
    },
    {
      "name": "zgetrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵的LU分解",
      "desc_en": "LU factorization of double precision complex type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵LU分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix LU factorization performance"
    },
    {
      "name": "sgeqrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "单精度实数类型矩阵的QR分解",
      "desc_en": "QR factorization of single precision real type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵QR分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix QR factorization performance"
    },
    {
      "name": "dgeqrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度实数类型矩阵的QR分解",
      "desc_en": "QR factorization of double precision real type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵QR分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix QR factorization performance"
    },
    {
      "name": "cgeqrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "单精度复数类型矩阵的QR分解",
      "desc_en": "QR factorization of single precision complex type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵QR分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix QR factorization performance"
    },
    {
      "name": "zgeqrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度复数类型矩阵的QR分解",
      "desc_en": "QR factorization of double precision complex type matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵QR分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix QR factorization performance"
    },
    {
      "name": "spotrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "单精度实对称正定矩阵的Cholesky分解",
      "desc_en": "Cholesky decomposition of single precision real symmetric positive definite matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵Cholesky分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix Cholesky decomposition performance"
    },
    {
      "name": "dpotrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度实对称正定矩阵的Cholesky分解",
      "desc_en": "Cholesky decomposition of double precision real symmetric positive definite matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵Cholesky分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix Cholesky decomposition performance"
    },
    {
      "name": "cpotrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "单精度Hermite正定矩阵的Cholesky分解",
      "desc_en": "Cholesky decomposition of single precision Hermite positive definite matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵Cholesky分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix Cholesky decomposition performance"
    },
    {
      "name": "zpotrf",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度Hermite正定矩阵的Cholesky分解",
      "desc_en": "Cholesky decomposition of double precision Hermite positive definite matrices",
      "benefit_cn": "基于鲲鹏框架，实现矩阵Cholesky分解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates matrix Cholesky decomposition performance"
    },
    {
      "name": "sppsv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为单精度实对称正定矩阵，并以压缩格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a single precision real symmetric positive definite matrix and packed storage",
      "benefit_cn": "基于鲲鹏框架，实现对称正定矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with symmetric positive definite matrices"
    },
    {
      "name": "dppsv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为双精度实对称正定矩阵，并以压缩格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a double precision real symmetric positive definite matrix and packed storage",
      "benefit_cn": "基于鲲鹏框架，实现对称正定矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with symmetric positive definite matrices"
    },
    {
      "name": "cppsv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为单精度Hermite正定矩阵，并以压缩格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a single precision Hermite positive definite matrix and packed storage",
      "benefit_cn": "基于鲲鹏框架，实现对称正定矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with symmetric positive definite matrices"
    },
    {
      "name": "zppsv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为双精度Hermite正定矩阵，并以压缩格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a double precision real symmetric positive definite matrix and packed storage",
      "benefit_cn": "基于鲲鹏框架，实现对称正定矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with symmetric positive definite matrices"
    },
    {
      "name": "sgesv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为一般单精度实矩阵，并以完全格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a single precision real general matrix and full storage",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with general matrices"
    },
    {
      "name": "dgesv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为一般双精度实矩阵，并以完全格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a double precision real general matrix and full storage",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with general matrices"
    },
    {
      "name": "cgesv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为一般单精度复矩阵，并以完全格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a single precision complex general matrix and full storage",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with general matrices"
    },
    {
      "name": "zgesv",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "求解线性方程组Ax=b,其中A为一般双精度复矩阵，并以完全格式存储",
      "desc_en": "Solve a system of linear equations Ax=b where A is a double precision complex general matrix and full storage",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵线性方程组的求解性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the solution performance of linear equations with general matrices"
    },
    {
      "name": "sgetri",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据sgetrf得到的分解结果，计算逆矩阵",
      "desc_en": "Calculate the inverse matrix according to the decomposition result obtained by sgetrf",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵求逆矩阵性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates general matrix inversion matrix performance"
    },
    {
      "name": "dgetri",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据dgetrf得到的分解结果，计算逆矩阵",
      "desc_en": "Calculate the inverse matrix according to the decomposition result obtained by dgetrf",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵求逆矩阵性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates general matrix inversion matrix performance"
    },
    {
      "name": "cgetri",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据cgetrf得到的分解结果，计算逆矩阵",
      "desc_en": "Calculate the inverse matrix according to the decomposition result obtained by cgetrf",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵求逆矩阵性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates general matrix inversion matrix performance"
    },
    {
      "name": "zgetri",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据zgetrf得到的分解结果，计算逆矩阵",
      "desc_en": "Calculate the inverse matrix according to the decomposition result obtained by zgetrf",
      "benefit_cn": "基于鲲鹏框架，实现一般矩阵求逆矩阵性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates general matrix inversion matrix performance"
    },
    {
      "name": "dsyevd",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "双精度实对称矩阵的全部特征值和特征向量（可选）",
      "desc_en": "All eigenvalues and eigenvectors(optional) of double precision real symmetric matrices",
      "benefit_cn": "基于鲲鹏框架，实现对称矩阵全部特征值及特征向量性能加速",
      "benefit_en": "Basic Kunpeng architecture accelerates the performance of all eigenvalues and eigenvectors of the symmetric matrix"
    },
    {
      "name": "sorglq",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据sgelqf的计算结果，生成具有正交行的单精度实矩阵Q，即该矩阵是K个N阶基本变换矩阵的乘积的前M行",
      "desc_en": "Single precision real matrix Q with orthogonal rows is generated according to the result obtained by sgelqf,and the matrix is defined as the first M rows of the product of K elementary reflectors of order N",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "dorglq",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据dgelqf的计算结果，生成具有正交行的双精度实矩阵Q，即该矩阵是K个N阶基本变换矩阵的乘积的前M行",
      "desc_en": "Double precision real matrix Q with orthogonal rows is generated according to the result obtained by dgelqf,and the matrix is defined as the first M rows of the product of K elementary reflectors of order N",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "cunglq",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据cgelqf的计算结果，生成具有正交行的单精度复矩阵Q，即该矩阵是K个N阶基本变换矩阵的乘积的前M行",
      "desc_en": "Single precision complex matrix Q with orthogonal rows is generated according to the result obtained by cgelqf,and the matrix is defined as the first M rows of the product of K elementary reflectors of order N",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "zunglq",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据zgelqf的计算结果，生成具有正交行的双精度复矩阵Q，即该矩阵是K个N阶基本变换矩阵的乘积的前M行",
      "desc_en": "Double precision complex matrix Q with orthogonal rows is generated according to the result obtained by zgelqf,and the matrix is defined as the first M rows of the product of K elementary reflectors of order N",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "sorgqr",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据sgeqrf的计算结果，生成具有正交行的单精度实矩阵Q，即该矩阵是K个M阶基本变换矩阵的乘积的前N行",
      "desc_en": "Single precision real matrix Q with orthogonal rows is generated according to the result obtained by sgeqrf,and the matrix is defined as the first N rows of the product of K elementary reflectors of order M",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "dorgqr",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据dgeqrf的计算结果，生成具有正交行的单精度实矩阵Q，即该矩阵是K个M阶基本变换矩阵的乘积的前N行",
      "desc_en": "Double precision real matrix Q with orthogonal rows is generated according to the result obtained by sgeqrf,and the matrix is defined as the first N rows of the product of K elementary reflectors of order M",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "cungqr",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据cgeqrf的计算结果，生成具有正交行的单精度实矩阵Q，即该矩阵是K个M阶基本变换矩阵的乘积的前N行",
      "desc_en": "Single precision complex matrix Q with orthogonal rows is generated according to the result obtained by sgeqrf,and the matrix is defined as the first N rows of the product of K elementary reflectors of order M",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    },
    {
      "name": "zungqr",
      "library": "KML_LAPACK",
      "headerfile": "",
      "desc_cn": "根据zgeqrf的计算结果，生成具有正交行的单精度实矩阵Q，即该矩阵是K个M阶基本变换矩阵的乘积的前N行",
      "desc_en": "Double precision complex matrix Q with orthogonal rows is generated according to the result obtained by sgeqrf,and the matrix is defined as the first N rows of the product of K elementary reflectors of order M",
      "benefit_cn": "基于鲲鹏框架，实现生成正交矩阵Q性能加速",
      "benefit_en": "Basic Kunpeng architecture for performance acceleration with quadrature matrix Q"
    }
  ],
  "Intrinsic": [
    {
      "name": "vadd_s8",
      "full name": "int8x8_t vadd_s8(int8x8_t __a, int8x8_t __b)",
      "Intel name": "_mm_add_pi8",
      "Intel ASM": "paddb",
      "Arm ASM": "add",
      "function_en": "[vector] add [8]",
      "function_cn": "[向量]加[8]"
    },
    {
      "name": "vaddq_s8",
      "full name": "int8x16_t vaddq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_add_epi8",
      "Intel Asm": "paddw",
      "Arm Asm": "add",
      "function_en": "[vector] add [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vadd_s16",
      "full name": "int16x4_t vadd_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_add_pi16",
      "Intel Asm": "paddw",
      "Arm Asm": "add",
      "function_en": "[vector] add [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddq_s16",
      "full name": "int16x8_t vaddq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_add_epi16",
      "Intel Asm": "paddw",
      "Arm Asm": "add",
      "function_en": "[vector] add [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vadd_s32",
      "full name": "int32x2_t vadd_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "_mm_add_pi32",
      "Intel Asm": "paddd",
      "Arm Asm": "add",
      "function_en": "[vector] add [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddq_s32",
      "full name": "int32x4_t vaddq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_add_epi32",
      "Intel Asm": "paddd",
      "Arm Asm": "add",
      "function_en": "[vector] add [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vadd_s64",
      "full name": "int64x1_t vadd_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [64]",
      "function_cn": "[向量] 加 [64]"
    },
    {
      "name": "vaddq_s64",
      "full name": "int64x2_t vaddq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_add_epi64",
      "Intel Asm": "paddq",
      "Arm Asm": "add",
      "function_en": "[vector] add [64]",
      "function_cn": "[向量] 加 [64]"
    },
    {
      "name": "vadd_u8",
      "full name": "uint8x8_t vadd_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddq_u8",
      "full name": "uint8x16_t vaddq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vadd_u16",
      "full name": "uint16x4_t vadd_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddq_u16",
      "full name": "uint16x8_t vaddq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vadd_u32",
      "full name": "uint32x2_t vadd_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddq_u32",
      "full name": "uint32x4_t vaddq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vadd_u64",
      "full name": "uint64x1_t vadd_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [64]",
      "function_cn": "[向量] 加 [64]"
    },
    {
      "name": "vaddq_u64",
      "full name": "uint64x2_t vaddq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[vector] add [64]",
      "function_cn": "[向量] 加 [64]"
    },
    {
      "name": "vadd_f32",
      "full name": "float32x2_t vadd_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fadd",
      "function_en": "[vector] add [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddq_f32",
      "full name": "float32x4_t vaddq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_add_ps",
      "Intel Asm": "addps",
      "Arm Asm": "fadd",
      "function_en": "[vector] add [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vadd_f64",
      "full name": "float64x1_t vadd_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fadd",
      "function_en": "[vector] add [64]",
      "function_cn": "[向量] 加 [64]"
    },
    {
      "name": "vaddq_f64",
      "full name": "float64x2_t vaddq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_add_pd",
      "Intel Asm": "addpd",
      "Arm Asm": "fadd",
      "function_en": "[vector] add [64]",
      "function_cn": "[向量] 加 [64]"
    },
    {
      "name": "vaddd_s64",
      "full name": "int64_t vaddd_s64(int64_t a, int64_t b)",
      "Intel name": "_mm_add_si64",
      "Intel Asm": "paddq",
      "Arm Asm": "add",
      "function_en": "[scalar] add [64]",
      "function_cn": "[标量] 加 [64]"
    },
    {
      "name": "vaddd_u64",
      "full name": "uint64_t vaddd_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "add",
      "function_en": "[scalar] add [64]",
      "function_cn": "[标量] 加 [64]"
    },
    {
      "name": "vqadd_s8",
      "full name": "int8x8_t vqadd_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "_mm_adds_pi8",
      "Intel Asm": "paddsb",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vqaddq_s8",
      "full name": "int8x16_t vqaddq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_adds_epi8",
      "Intel Asm": "paddsb",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vqadd_s16",
      "full name": "int16x4_t vqadd_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_adds_pi16",
      "Intel Asm": "paddsw",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vqaddq_s16",
      "full name": "int16x8_t vqaddq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_adds_epi16",
      "Intel Asm": "paddsw",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vqadd_s32",
      "full name": "int32x2_t vqadd_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vqaddq_s32",
      "full name": "int32x4_t vqaddq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vqadd_s64",
      "full name": "int64x1_t vqadd_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vqaddq_s64",
      "full name": "int64x2_t vqaddq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[vector] sqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vqadd_u8",
      "full name": "uint8x8_t vqadd_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "_mm_adds_pu8",
      "Intel Asm": "paddusb",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vqaddq_u8",
      "full name": "uint8x16_t vqaddq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "_mm_adds_epu8",
      "Intel Asm": "paddusb",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vqadd_u16",
      "full name": "uint16x4_t vqadd_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "_mm_adds_pu16",
      "Intel Asm": "paddusw",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vqaddq_u16",
      "full name": "uint16x8_t vqaddq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "_mm_adds_epu16",
      "Intel Asm": "paddusw",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vqadd_u32",
      "full name": "uint32x2_t vqadd_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vqaddq_u32",
      "full name": "uint32x4_t vqaddq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vqadd_u64",
      "full name": "uint64x1_t vqadd_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vqaddq_u64",
      "full name": "uint64x2_t vqaddq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[vector] uqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vqaddb_s8",
      "full name": "int8_t vqaddb_s8(int8_t a, int8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[scalar] sqadd [8]",
      "function_cn": "[标量] 饱和加 [8]"
    },
    {
      "name": "vqaddh_s16",
      "full name": "int16_t vqaddh_s16(int16_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[scalar] sqadd [16]",
      "function_cn": "[标量] 饱和加 [16]"
    },
    {
      "name": "vqadds_s32",
      "full name": "int32_t vqadds_s32(int32_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[scalar] sqadd [32]",
      "function_cn": "[标量] 饱和加 [32]"
    },
    {
      "name": "vqaddd_s64",
      "full name": "int64_t vqaddd_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqadd",
      "function_en": "[scalar] sqadd [64]",
      "function_cn": "[标量] 饱和加 [64]"
    },
    {
      "name": "vqaddb_u8",
      "full name": "uint8_t vqaddb_u8(uint8_t a, uint8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[scalar] uqadd [8]",
      "function_cn": "[标量] 饱和加 [8]"
    },
    {
      "name": "vqaddh_u16",
      "full name": "uint16_t vqaddh_u16(uint16_t a, uint16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[scalar] uqadd [16]",
      "function_cn": "[标量] 饱和加 [16]"
    },
    {
      "name": "vqadds_u32",
      "full name": "uint32_t vqadds_u32(uint32_t a, uint32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[scalar] uqadd [32]",
      "function_cn": "[标量] 饱和加 [32]"
    },
    {
      "name": "vqaddd_u64",
      "full name": "uint64_t vqaddd_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqadd",
      "function_en": "[scalar] uqadd [64]",
      "function_cn": "[标量] 饱和加 [64]"
    },
    {
      "name": "vuqadd_s8",
      "full name": "int8x8_t vuqadd_s8(int8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vuqaddq_s8",
      "full name": "int8x16_t vuqaddq_s8(int8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vuqadd_s16",
      "full name": "int16x4_t vuqadd_s16(int16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vuqaddq_s16",
      "full name": "int16x8_t vuqaddq_s16(int16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vuqadd_s32",
      "full name": "int32x2_t vuqadd_s32(int32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vuqaddq_s32",
      "full name": "int32x4_t vuqaddq_s32(int32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vuqadd_s64",
      "full name": "int64x1_t vuqadd_s64(int64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vuqaddq_s64",
      "full name": "int64x2_t vuqaddq_s64(int64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[vector] suqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vuqaddb_s8",
      "full name": "int8_t vuqaddb_s8(int8_t a, uint8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[scalar] suqadd [8]",
      "function_cn": "[标量] 饱和加 [8]"
    },
    {
      "name": "vuqaddh_s16",
      "full name": "int16_t vuqaddh_s16(int16_t a, uint16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[scalar] suqadd [16]",
      "function_cn": "[标量] 饱和加 [16]"
    },
    {
      "name": "vuqadds_s32",
      "full name": "int32_t vuqadds_s32(int32_t a, uint32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[scalar] suqadd [32]",
      "function_cn": "[标量] 饱和加 [32]"
    },
    {
      "name": "vuqaddd_s64",
      "full name": "int64_t vuqaddd_s64(int64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "suqadd",
      "function_en": "[scalar] suqadd [64]",
      "function_cn": "[标量] 饱和加 [64]"
    },
    {
      "name": "vsqadd_u8",
      "full name": "uint8x8_t vsqadd_u8(uint8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vsqaddq_u8",
      "full name": "uint8x16_t vsqaddq_u8(uint8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [8]",
      "function_cn": "[向量] 饱和加 [8]"
    },
    {
      "name": "vsqadd_u16",
      "full name": "uint16x4_t vsqadd_u16(uint16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vsqaddq_u16",
      "full name": "uint16x8_t vsqaddq_u16(uint16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [16]",
      "function_cn": "[向量] 饱和加 [16]"
    },
    {
      "name": "vsqadd_u32",
      "full name": "uint32x2_t vsqadd_u32(uint32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vsqaddq_u32",
      "full name": "uint32x4_t vsqaddq_u32(uint32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [32]",
      "function_cn": "[向量] 饱和加 [32]"
    },
    {
      "name": "vsqadd_u64",
      "full name": "uint64x1_t vsqadd_u64(uint64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vsqaddq_u64",
      "full name": "uint64x2_t vsqaddq_u64(uint64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[vector] usqadd [64]",
      "function_cn": "[向量] 饱和加 [64]"
    },
    {
      "name": "vsqaddb_u8",
      "full name": "uint8_t vsqaddb_u8(uint8_t a, int8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[scalar] usqadd [8]",
      "function_cn": "[标量] 饱和加 [8]"
    },
    {
      "name": "vsqaddh_u16",
      "full name": "uint16_t vsqaddh_u16(uint16_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[scalar] usqadd [16]",
      "function_cn": "[标量] 饱和加 [16]"
    },
    {
      "name": "vsqadds_u32",
      "full name": "uint32_t vsqadds_u32(uint32_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[scalar] usqadd [32]",
      "function_cn": "[标量] 饱和加 [32]"
    },
    {
      "name": "vsqaddd_u64",
      "full name": "uint64_t vsqaddd_u64(uint64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usqadd",
      "function_en": "[scalar] usqadd [64]",
      "function_cn": "[标量] 饱和加 [64]"
    },
    {
      "name": "vaddhn_s16",
      "full name": "int8x8_t vaddhn_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn",
      "function_en": "[vector] addhn [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vaddhn_s32",
      "full name": "int16x4_t vaddhn_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn",
      "function_en": "[vector] addhn [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vaddhn_s64",
      "full name": "int32x2_t vaddhn_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn",
      "function_en": "[vector] addhn [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vaddhn_u16",
      "full name": "uint8x8_t vaddhn_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn",
      "function_en": "[vector] addhn [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vaddhn_u32",
      "full name": "uint16x4_t vaddhn_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn",
      "function_en": "[vector] addhn [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vaddhn_u64",
      "full name": "uint32x2_t vaddhn_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn",
      "function_en": "[vector] addhn [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vaddhn_high_s16",
      "full name": "int8x16_t vaddhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn2",
      "function_en": "[vector] addhn2 [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vaddhn_high_s32",
      "full name": "int16x8_t vaddhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn2",
      "function_en": "[vector] addhn2 [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vaddhn_high_s64",
      "full name": "int32x4_t vaddhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn2",
      "function_en": "[vector] addhn2 [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vaddhn_high_u16",
      "full name": "uint8x16_t vaddhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn2",
      "function_en": "[vector] addhn2 [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vaddhn_high_u32",
      "full name": "uint16x8_t vaddhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn2",
      "function_en": "[vector] addhn2 [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vaddhn_high_u64",
      "full name": "uint32x4_t vaddhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addhn2",
      "function_en": "[vector] addhn2 [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vraddhn_s16",
      "full name": "int8x8_t vraddhn_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn",
      "function_en": "[vector] raddhn [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vraddhn_s32",
      "full name": "int16x4_t vraddhn_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn",
      "function_en": "[vector] raddhn [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vraddhn_s64",
      "full name": "int32x2_t vraddhn_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn",
      "function_en": "[vector] raddhn [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vraddhn_u16",
      "full name": "uint8x8_t vraddhn_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn",
      "function_en": "[vector] raddhn [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vraddhn_u32",
      "full name": "uint16x4_t vraddhn_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn",
      "function_en": "[vector] raddhn [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vraddhn_u64",
      "full name": "uint32x2_t vraddhn_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn",
      "function_en": "[vector] raddhn [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vraddhn_high_s16",
      "full name": "int8x16_t vraddhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn2",
      "function_en": "[vector] raddhn2 [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vraddhn_high_s32",
      "full name": "int16x8_t vraddhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn2",
      "function_en": "[vector] raddhn2 [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vraddhn_high_s64",
      "full name": "int32x4_t vraddhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn2",
      "function_en": "[vector] raddhn2 [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vraddhn_high_u16",
      "full name": "uint8x16_t vraddhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn2",
      "function_en": "[vector] raddhn2 [16]",
      "function_cn": "[向量] 窄型加 [16]"
    },
    {
      "name": "vraddhn_high_u32",
      "full name": "uint16x8_t vraddhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn2",
      "function_en": "[vector] raddhn2 [32]",
      "function_cn": "[向量] 窄型加 [32]"
    },
    {
      "name": "vraddhn_high_u64",
      "full name": "uint32x4_t vraddhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "raddhn2",
      "function_en": "[vector] raddhn2 [64]",
      "function_cn": "[向量] 窄型加 [64]"
    },
    {
      "name": "vaddl_s8",
      "full name": "int16x8_t vaddl_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddl",
      "function_en": "[vector] saddl [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddl_s16",
      "full name": "int32x4_t vaddl_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddl",
      "function_en": "[vector] saddl [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddl_s32",
      "full name": "int64x2_t vaddl_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddl",
      "function_en": "[vector] saddl [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddl_u8",
      "full name": "uint16x8_t vaddl_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddl",
      "function_en": "[vector] uaddl [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddl_u16",
      "full name": "uint32x4_t vaddl_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddl",
      "function_en": "[vector] uaddl [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddl_u32",
      "full name": "uint64x2_t vaddl_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddl",
      "function_en": "[vector] uaddl [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddl_high_s8",
      "full name": "int16x8_t vaddl_high_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddl2",
      "function_en": "[vector] saddl2 [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddl_high_s16",
      "full name": "int32x4_t vaddl_high_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddl2",
      "function_en": "[vector] saddl2 [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddl_high_s32",
      "full name": "int64x2_t vaddl_high_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddl2",
      "function_en": "[vector] saddl2 [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddl_high_u8",
      "full name": "uint16x8_t vaddl_high_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddl2",
      "function_en": "[vector] uaddl2 [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddl_high_u16",
      "full name": "uint32x4_t vaddl_high_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddl2",
      "function_en": "[vector] uaddl2 [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddl_high_u32",
      "full name": "uint64x2_t vaddl_high_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddl2",
      "function_en": "[vector] uaddl2 [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddw_s8",
      "full name": "int16x8_t vaddw_s8(int16x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddw",
      "function_en": "[vector] saddw [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddw_s16",
      "full name": "int32x4_t vaddw_s16(int32x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddw",
      "function_en": "[vector] saddw [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddw_s32",
      "full name": "int64x2_t vaddw_s32(int64x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddw",
      "function_en": "[vector] saddw [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddw_u8",
      "full name": "uint16x8_t vaddw_u8(uint16x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddw",
      "function_en": "[vector] uaddw [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddw_u16",
      "full name": "uint32x4_t vaddw_u16(uint32x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddw",
      "function_en": "[vector] uaddw [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddw_u32",
      "full name": "uint64x2_t vaddw_u32(uint64x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddw",
      "function_en": "[vector] uaddw [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddw_high_s8",
      "full name": "int16x8_t vaddw_high_s8(int16x8_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddw2",
      "function_en": "[vector] saddw2 [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddw_high_s16",
      "full name": "int32x4_t vaddw_high_s16(int32x4_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddw2",
      "function_en": "[vector] saddw2 [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddw_high_s32",
      "full name": "int64x2_t vaddw_high_s32(int64x2_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddw2",
      "function_en": "[vector] saddw2 [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vaddw_high_u8",
      "full name": "uint16x8_t vaddw_high_u8(uint16x8_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddw2",
      "function_en": "[vector] uaddw2 [8]",
      "function_cn": "[向量] 加 [8]"
    },
    {
      "name": "vaddw_high_u16",
      "full name": "uint32x4_t vaddw_high_u16(uint32x4_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddw2",
      "function_en": "[vector] uaddw2 [16]",
      "function_cn": "[向量] 加 [16]"
    },
    {
      "name": "vaddw_high_u32",
      "full name": "uint64x2_t vaddw_high_u32(uint64x2_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddw2",
      "function_en": "[vector] uaddw2 [32]",
      "function_cn": "[向量] 加 [32]"
    },
    {
      "name": "vhadd_s8",
      "full name": "int8x8_t vhadd_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shadd",
      "function_en": "[vector] shadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vhaddq_s8",
      "full name": "int8x16_t vhaddq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shadd",
      "function_en": "[vector] shadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vhadd_s16",
      "full name": "int16x4_t vhadd_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shadd",
      "function_en": "[vector] shadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vhaddq_s16",
      "full name": "int16x8_t vhaddq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shadd",
      "function_en": "[vector] shadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vhadd_s32",
      "full name": "int32x2_t vhadd_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shadd",
      "function_en": "[vector] shadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vhaddq_s32",
      "full name": "int32x4_t vhaddq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shadd",
      "function_en": "[vector] shadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vhadd_u8",
      "full name": "uint8x8_t vhadd_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uhadd",
      "function_en": "[vector] uhadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vhaddq_u8",
      "full name": "uint8x16_t vhaddq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uhadd",
      "function_en": "[vector] uhadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vhadd_u16",
      "full name": "uint16x4_t vhadd_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uhadd",
      "function_en": "[vector] uhadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vhaddq_u16",
      "full name": "uint16x8_t vhaddq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uhadd",
      "function_en": "[vector] uhadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vhadd_u32",
      "full name": "uint32x2_t vhadd_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uhadd",
      "function_en": "[vector] uhadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vhaddq_u32",
      "full name": "uint32x4_t vhaddq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uhadd",
      "function_en": "[vector] uhadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vrhadd_s8",
      "full name": "int8x8_t vrhadd_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srhadd",
      "function_en": "[vector] srhadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vrhaddq_s8",
      "full name": "int8x16_t vrhaddq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srhadd",
      "function_en": "[vector] srhadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vrhadd_s16",
      "full name": "int16x4_t vrhadd_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srhadd",
      "function_en": "[vector] srhadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vrhaddq_s16",
      "full name": "int16x8_t vrhaddq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srhadd",
      "function_en": "[vector] srhadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vrhadd_s32",
      "full name": "int32x2_t vrhadd_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srhadd",
      "function_en": "[vector] srhadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vrhaddq_s32",
      "full name": "int32x4_t vrhaddq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srhadd",
      "function_en": "[vector] srhadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vrhadd_u8",
      "full name": "uint8x8_t vrhadd_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "_mm_avg_pu8",
      "Intel Asm": "pavgb",
      "Arm Asm": "urhadd",
      "function_en": "[vector] urhadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vrhaddq_u8",
      "full name": "uint8x16_t vrhaddq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "_mm_avg_epu8",
      "Intel Asm": "pavgb",
      "Arm Asm": "urhadd",
      "function_en": "[vector] urhadd [8]",
      "function_cn": "[向量] 相加并右移一位 [8]"
    },
    {
      "name": "vrhadd_u16",
      "full name": "uint16x4_t vrhadd_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "_mm_avg_pu16",
      "Intel Asm": "pavgw",
      "Arm Asm": "urhadd",
      "function_en": "[vector] urhadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vrhaddq_u16",
      "full name": "uint16x8_t vrhaddq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "_mm_avg_epu16",
      "Intel Asm": "pavgw",
      "Arm Asm": "urhadd",
      "function_en": "[vector] urhadd [16]",
      "function_cn": "[向量] 相加并右移一位 [16]"
    },
    {
      "name": "vrhadd_u32",
      "full name": "uint32x2_t vrhadd_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urhadd",
      "function_en": "[vector] urhadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
    {
      "name": "vrhaddq_u32",
      "full name": "uint32x4_t vrhaddq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urhadd",
      "function_en": "[vector] urhadd [32]",
      "function_cn": "[向量] 相加并右移一位 [32]"
    },
	{
	  "name": "vmul_s8",
	  "full name": "int8x8_t vmul_s8(int8x8_t a, int8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [8]",
	  "function_cn": "[向量] 乘 [8]"
	},
	{
	  "name": "vmulq_s8",
	  "full name": "int8x16_t vmulq_s8(int8x16_t a, int8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [8]",
	  "function_cn": "[向量] 乘 [8]"
	},
	{
	  "name": "vmul_s16",
	  "full name": "int16x4_t vmul_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "_mm_mullo_pi16",
	  "Intel Asm": "pmullw",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [16]",
	  "function_cn": "[向量] 乘 [16]"
	},
	{
	  "name": "vmulq_s16",
	  "full name": "int16x8_t vmulq_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "_mm_mullo_epi16",
	  "Intel Asm": "pmullw",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [16]",
	  "function_cn": "[向量] 乘 [16]"
	},
	{
	  "name": "vmul_s32",
	  "full name": "int32x2_t vmul_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulq_s32",
	  "full name": "int32x4_t vmulq_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "_mm_mullo_epi32",
	  "Intel Asm": "pmulld",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmul_u8",
	  "full name": "uint8x8_t vmul_u8(uint8x8_t a, uint8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [8]",
	  "function_cn": "[向量] 乘 [8]"
	},
	{
	  "name": "vmulq_u8",
	  "full name": "uint8x16_t vmulq_u8(uint8x16_t a, uint8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [8]",
	  "function_cn": "[向量] 乘 [8]"
	},
	{
	  "name": "vmul_u16",
	  "full name": "uint16x4_t vmul_u16(uint16x4_t a, uint16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [16]",
	  "function_cn": "[向量] 乘 [16]"
	},
	{
	  "name": "vmulq_u16",
	  "full name": "uint16x8_t vmulq_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [16]",
	  "function_cn": "[向量] 乘 [16]"
	},
	{
	  "name": "vmul_u32",
	  "full name": "uint32x2_t vmul_u32(uint32x2_t a, uint32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulq_u32",
	  "full name": "uint32x4_t vmulq_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mul",
	  "function_en": "[vector] mul [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmul_f32",
	  "full name": "float32x2_t vmul_f32(float32x2_t a, float32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmul",
	  "function_en": "[vector] fmul [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulq_f32",
	  "full name": "float32x4_t vmulq_f32(float32x4_t a, float32x4_t b)",
	  "Intel name": "_mm_mul_ps",
	  "Intel Asm": "mulps",
	  "Arm Asm": "fmul",
	  "function_en": "[vector] fmul [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmul_p8",
	  "full name": "poly8x8_t vmul_p8(poly8x8_t a, poly8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "pmul",
	  "function_en": "[vector] pmul [8]",
	  "function_cn": "[向量] 多项式乘 [8]"
	},
	{
	  "name": "vmulq_p8",
	  "full name": "poly8x16_t vmulq_p8(poly8x16_t a, poly8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "pmul",
	  "function_en": "[vector] pmul [8]",
	  "function_cn": "[向量] 多项式乘 [8]"
	},
	{
	  "name": "vmul_f64",
	  "full name": "float64x1_t vmul_f64(float64x1_t a, float64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmul",
	  "function_en": "[vector] fmul [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulq_f64",
	  "full name": "float64x2_t vmulq_f64(float64x2_t a, float64x2_t b)",
	  "Intel name": "_mm_mul_pd",
	  "Intel Asm": "mulpd",
	  "Arm Asm": "fmul",
	  "function_en": "[vector] fmul [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulx_f32",
	  "full name": "float32x2_t vmulx_f32(float32x2_t a, float32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulxq_f32",
	  "full name": "float32x4_t vmulxq_f32(float32x4_t a, float32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulx_f64",
	  "full name": "float64x1_t vmulx_f64(float64x1_t a, float64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulxq_f64",
	  "full name": "float64x2_t vmulxq_f64(float64x2_t a, float64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulxs_f32",
	  "full name": "float32_t vmulxs_f32(float32_t a, float32_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulxd_f64",
	  "full name": "float64_t vmulxd_f64(float64_t a, float64_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulx_lane_f32",
	  "full name": "float32x2_t vmulx_lane_f32(float32x2_t a, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulxq_lane_f32",
	  "full name": "float32x4_t vmulxq_lane_f32(float32x4_t a, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulx_lane_f64",
	  "full name": "float64x1_t vmulx_lane_f64(float64x1_t a, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulxq_lane_f64",
	  "full name": "float64x2_t vmulxq_lane_f64(float64x2_t a, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulxs_lane_f32",
	  "full name": "float32_t vmulxs_lane_f32(float32_t a, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulxd_lane_f64",
	  "full name": "float64_t vmulxd_lane_f64(float64_t a, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulx_laneq_f32",
	  "full name": "float32x2_t vmulx_laneq_f32(float32x2_t a, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulxq_laneq_f32",
	  "full name": "float32x4_t vmulxq_laneq_f32(float32x4_t a, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulx_laneq_f64",
	  "full name": "float64x1_t vmulx_laneq_f64(float64x1_t a, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulxq_laneq_f64",
	  "full name": "float64x2_t vmulxq_laneq_f64(float64x2_t a, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vmulxs_laneq_f32",
	  "full name": "float32_t vmulxs_laneq_f32(float32_t a, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [32]",
	  "function_cn": "[向量] 乘 [32]"
	},
	{
	  "name": "vmulxd_laneq_f64",
	  "full name": "float64_t vmulxd_laneq_f64(float64_t a, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmulx",
	  "function_en": "[vector] fmulx [64]",
	  "function_cn": "[向量] 乘 [64]"
	},
	{
	  "name": "vdiv_f32",
	  "full name": "float32x2_t vdiv_f32(float32x2_t a, float32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fdiv",
	  "function_en": "[vector] fdiv [32]",
	  "function_cn": "[向量] 除 [32]"
	},
	{
	  "name": "vdivq_f32",
	  "full name": "float32x4_t vdivq_f32(float32x4_t a, float32x4_t b)",
	  "Intel name": "_mm_div_ps",
	  "Intel Asm": "divps",
	  "Arm Asm": "fdiv",
	  "function_en": "[vector] fdiv [32]",
	  "function_cn": "[向量] 除 [32]"
	},
	{
	  "name": "vdiv_f64",
	  "full name": "float64x1_t vdiv_f64(float64x1_t a, float64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fdiv",
	  "function_en": "[vector] fdiv [64]",
	  "function_cn": "[向量] 除 [64]"
	},
	{
	  "name": "vdivq_f64",
	  "full name": "float64x2_t vdivq_f64(float64x2_t a, float64x2_t b)",
	  "Intel name": "_mm_div_pd",
	  "Intel Asm": "divpd",
	  "Arm Asm": "fdiv",
	  "function_en": "[vector] fdiv [64]",
	  "function_cn": "[向量] 除 [64]"
	},
	{
	  "name": "vmla_s8",
	  "full name": "int8x8_t vmla_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmlaq_s8",
	  "full name": "int8x16_t vmlaq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmla_s16",
	  "full name": "int16x4_t vmla_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmlaq_s16",
	  "full name": "int16x8_t vmlaq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmla_s32",
	  "full name": "int32x2_t vmla_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmlaq_s32",
	  "full name": "int32x4_t vmlaq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmla_u8",
	  "full name": "uint8x8_t vmla_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmlaq_u8",
	  "full name": "uint8x16_t vmlaq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmla_u16",
	  "full name": "uint16x4_t vmla_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmlaq_u16",
	  "full name": "uint16x8_t vmlaq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmla_u32",
	  "full name": "uint32x2_t vmla_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmlaq_u32",
	  "full name": "uint32x4_t vmlaq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mla",
	  "function_en": "[vector] mla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmla_f32",
	  "full name": "float32x2_t vmla_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "",
	  "function_en": "[vector] flma [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmlaq_f32",
	  "full name": "float32x4_t vmlaq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
	  "Intel name": "_mm_fmadd_ps",
	  "Intel Asm": "vfmadd132ps",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmla_f64",
	  "full name": "float64x1_t vmla_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vmlaq_f64",
	  "full name": "float64x2_t vmlaq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
	  "Intel name": "_mm_fmadd_pd",
	  "Intel Asm": "vfmadd132pd",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vmlal_s8",
	  "full name": "int16x8_t vmlal_s8(int16x8_t a, int8x8_t b, int8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlal",
	  "function_en": "[vector] smlal [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmlal_s16",
	  "full name": "int32x4_t vmlal_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlal",
	  "function_en": "[vector] smlal [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmlal_s32",
	  "full name": "int64x2_t vmlal_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlal",
	  "function_en": "[vector] smlal [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmlal_u8",
	  "full name": "uint16x8_t vmlal_u8(uint16x8_t a, uint8x8_t b, uint8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlal",
	  "function_en": "[vector] umlal [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmlal_u16",
	  "full name": "uint32x4_t vmlal_u16(uint32x4_t a, uint16x4_t b, uint16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlal",
	  "function_en": "[vector] umlal [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmlal_u32",
	  "full name": "uint64x2_t vmlal_u32(uint64x2_t a, uint32x2_t b, uint32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlal",
	  "function_en": "[vector] umlal [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmlal_high_s8",
	  "full name": "int16x8_t vmlal_high_s8(int16x8_t a, int8x16_t b, int8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlal2",
	  "function_en": "[vector] smlal2 [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmlal_high_s16",
	  "full name": "int32x4_t vmlal_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlal2",
	  "function_en": "[vector] smlal2 [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmlal_high_s32",
	  "full name": "int64x2_t vmlal_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlal2",
	  "function_en": "[vector] smlal2 [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vmlal_high_u8",
	  "full name": "uint16x8_t vmlal_high_u8(uint16x8_t a, uint8x16_t b, uint8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlal2",
	  "function_en": "[vector] umlal2 [8]",
	  "function_cn": "[向量] 乘加 [8]"
	},
	{
	  "name": "vmlal_high_u16",
	  "full name": "uint32x4_t vmlal_high_u16(uint32x4_t a, uint16x8_t b, uint16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlal2",
	  "function_en": "[vector] umlal2 [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmlal_high_u32",
	  "full name": "uint64x2_t vmlal_high_u32(uint64x2_t a, uint32x4_t b, uint32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlal2",
	  "function_en": "[vector] umlal2 [16]",
	  "function_cn": "[向量] 乘加 [16]"
	},
	{
	  "name": "vmls_s8",
	  "full name": "int8x8_t vmls_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmlsq_s8",
	  "full name": "int8x16_t vmlsq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmls_s16",
	  "full name": "int16x4_t vmls_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmlsq_s16",
	  "full name": "int16x8_t vmlsq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmls_s32",
	  "full name": "int32x2_t vmls_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmlsq_s32",
	  "full name": "int32x4_t vmlsq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmls_u8",
	  "full name": "uint8x8_t vmls_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmlsq_u8",
	  "full name": "uint8x16_t vmlsq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmls_u16",
	  "full name": "uint16x4_t vmls_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmlsq_u16",
	  "full name": "uint16x8_t vmlsq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmls_u32",
	  "full name": "uint32x2_t vmls_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmlsq_u32",
	  "full name": "uint32x4_t vmlsq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "mls",
	  "function_en": "[vector] mls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmls_f32",
	  "full name": "float32x2_t vmls_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmlsq_f32",
	  "full name": "float32x4_t vmlsq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
	  "Intel name": "_mm_fmsub_ps",
	  "Intel Asm": "vfmsub132ps",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmls_f64",
	  "full name": "float64x1_t vmls_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vmlsq_f64",
	  "full name": "float64x2_t vmlsq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
	  "Intel name": "_mm_fmsub_pd",
	  "Intel Asm": "vfmsub132pd",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vmlsl_s8",
	  "full name": "int16x8_t vmlsl_s8(int16x8_t a, int8x8_t b, int8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlsl",
	  "function_en": "[vector] smlsl [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmlsl_s16",
	  "full name": "int32x4_t vmlsl_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlsl",
	  "function_en": "[vector] smlsl [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmlsl_s32",
	  "full name": "int64x2_t vmlsl_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlsl",
	  "function_en": "[vector] smlsl [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmlsl_u8",
	  "full name": "uint16x8_t vmlsl_u8(uint16x8_t a, uint8x8_t b, uint8x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlsl",
	  "function_en": "[vector] umlsl [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmlsl_u16",
	  "full name": "uint32x4_t vmlsl_u16(uint32x4_t a, uint16x4_t b, uint16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlsl",
	  "function_en": "[vector] umlsl [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmlsl_u32",
	  "full name": "uint64x2_t vmlsl_u32(uint64x2_t a, uint32x2_t b, uint32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlsl",
	  "function_en": "[vector] umlsl [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmlsl_high_s8",
	  "full name": "int16x8_t vmlsl_high_s8(int16x8_t a, int8x16_t b, int8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlsl2",
	  "function_en": "[vector] smlsl2 [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmlsl_high_s16",
	  "full name": "int32x4_t vmlsl_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlsl2",
	  "function_en": "[vector] smlsl2 [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmlsl_high_s32",
	  "full name": "int64x2_t vmlsl_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smlsl2",
	  "function_en": "[vector] smlsl2 [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vmlsl_high_u8",
	  "full name": "uint16x8_t vmlsl_high_u8(uint16x8_t a, uint8x16_t b, uint8x16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlsl2",
	  "function_en": "[vector] umlsl2 [8]",
	  "function_cn": "[向量] 乘减 [8]"
	},
	{
	  "name": "vmlsl_high_u16",
	  "full name": "uint32x4_t vmlsl_high_u16(uint32x4_t a, uint16x8_t b, uint16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlsl2",
	  "function_en": "[vector] umlsl2 [16]",
	  "function_cn": "[向量] 乘减 [16]"
	},
	{
	  "name": "vmlsl_high_u32",
	  "full name": "uint64x2_t vmlsl_high_u32(uint64x2_t a, uint32x4_t b, uint32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umlsl2",
	  "function_en": "[vector] umlsl2 [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfma_f32",
	  "full name": "float32x2_t vfma_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfmaq_f32",
	  "full name": "float32x4_t vfmaq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
	  "Intel name": "_mm_fmadd_ps",
	  "Intel Asm": "vfmadd132ps",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfma_f64",
	  "full name": "float64x1_t vfma_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmadd",
	  "function_en": "[vector] fmadd [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfmaq_f64",
	  "full name": "float64x2_t vfmaq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
	  "Intel name": "_mm_fmadd_pd",
	  "Intel Asm": "vfmadd132pd",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfma_lane_f32",
	  "full name": "float32x2_t vfma_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfmaq_lane_f32",
	  "full name": "float32x4_t vfmaq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfma_lane_f64",
	  "full name": "float64x1_t vfma_lane_f64(float64x1_t a, float64x1_t b, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfmaq_lane_f64",
	  "full name": "float64x2_t vfmaq_lane_f64(float64x2_t a, float64x2_t b, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfmas_lane_f32",
	  "full name": "float32_t vfmas_lane_f32(float32_t a, float32_t b, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfmad_lane_f64",
	  "full name": "float64_t vfmad_lane_f64(float64_t a, float64_t b, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfma_laneq_f32",
	  "full name": "float32x2_t vfma_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfmaq_laneq_f32",
	  "full name": "float32x4_t vfmaq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfma_laneq_f64",
	  "full name": "float64x1_t vfma_laneq_f64(float64x1_t a, float64x1_t b, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfmaq_laneq_f64",
	  "full name": "float64x2_t vfmaq_laneq_f64(float64x2_t a, float64x2_t b, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfmas_laneq_f32",
	  "full name": "float32_t vfmas_laneq_f32(float32_t a, float32_t b, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [32]",
	  "function_cn": "[向量] 乘加 [32]"
	},
	{
	  "name": "vfmad_laneq_f64",
	  "full name": "float64_t vfmad_laneq_f64(float64_t a, float64_t b, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmla",
	  "function_en": "[vector] fmla [64]",
	  "function_cn": "[向量] 乘加 [64]"
	},
	{
	  "name": "vfms_f32",
	  "full name": "float32x2_t vfms_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfmsq_f32",
	  "full name": "float32x4_t vfmsq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
	  "Intel name": "_mm_fmsub_ps",
	  "Intel Asm": "vfmsub132ps",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfms_f64",
	  "full name": "float64x1_t vfms_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmsub",
	  "function_en": "[vector] fmsub [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfmsq_f64",
	  "full name": "float64x2_t vfmsq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
	  "Intel name": "_mm_fmsub_pd",
	  "Intel Asm": "vfmsub132pd",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfms_lane_f32",
	  "full name": "float32x2_t vfms_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfmsq_lane_f32",
	  "full name": "float32x4_t vfmsq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfms_lane_f64",
	  "full name": "float64x1_t vfms_lane_f64(float64x1_t a, float64x1_t b, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfmsq_lane_f64",
	  "full name": "float64x2_t vfmsq_lane_f64(float64x2_t a, float64x2_t b, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfmss_lane_f32",
	  "full name": "float32_t vfmss_lane_f32(float32_t a, float32_t b, float32x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfmsd_lane_f64",
	  "full name": "float64_t vfmsd_lane_f64(float64_t a, float64_t b, float64x1_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfms_laneq_f32",
	  "full name": "float32x2_t vfms_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfmsq_laneq_f32",
	  "full name": "float32x4_t vfmsq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfms_laneq_f64",
	  "full name": "float64x1_t vfms_laneq_f64(float64x1_t a, float64x1_t b, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfmsq_laneq_f64",
	  "full name": "float64x2_t vfmsq_laneq_f64(float64x2_t a, float64x2_t b, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vfmss_laneq_f32",
	  "full name": "float32_t vfmss_laneq_f32(float32_t a, float32_t b, float32x4_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [32]",
	  "function_cn": "[向量] 乘减 [32]"
	},
	{
	  "name": "vfmsd_laneq_f64",
	  "full name": "float64_t vfmsd_laneq_f64(float64_t a, float64_t b, float64x2_t v, const int lane)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fmls",
	  "function_en": "[vector] fmls [64]",
	  "function_cn": "[向量] 乘减 [64]"
	},
	{
	  "name": "vqdmulh_s16",
	  "full name": "int16x4_t vqdmulh_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmulh",
	  "function_en": "[vector] sqdmulh [16]",
	  "function_cn": "[向量] 饱和加倍乘 [16]"
	},
	{
	  "name": "vqdmulhq_s16",
	  "full name": "int16x8_t vqdmulhq_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmulh",
	  "function_en": "[vector] sqdmulh [16]",
	  "function_cn": "[向量] 饱和加倍乘 [16]"
	},
	{
	  "name": "vqdmulh_s32",
	  "full name": "int32x2_t vqdmulh_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmulh",
	  "function_en": "[vector] sqdmulh [32]",
	  "function_cn": "[向量] 饱和加倍乘 [32]"
	},
	{
	  "name": "vqdmulhq_s32",
	  "full name": "int32x4_t vqdmulhq_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmulh",
	  "function_en": "[vector] sqdmulh [32]",
	  "function_cn": "[向量] 饱和加倍乘 [32]"
	},
	{
	  "name": "vqdmulhh_s16",
	  "full name": "int16_t vqdmulhh_s16(int16_t a, int16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmulh",
	  "function_en": "[scalar] sqdmulh [16]",
	  "function_cn": "[标量] 饱和加倍乘 [16]"
	},
	{
	  "name": "vqdmulhs_s32",
	  "full name": "int32_t vqdmulhs_s32(int32_t a, int32_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmulh",
	  "function_en": "[scalar] sqdmulh [32]",
	  "function_cn": "[标量] 饱和加倍乘 [32]"
	},
	{
	  "name": "vqrdmulh_s16",
	  "full name": "int16x4_t vqrdmulh_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqrdmulh",
	  "function_en": "[vector] sqrdmulh [16]",
	  "function_cn": "[向量] 饱和加倍乘 [16]"
	},
	{
	  "name": "vqrdmulhq_s16",
	  "full name": "int16x8_t vqrdmulhq_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqrdmulh",
	  "function_en": "[vector] sqrdmulh [16]",
	  "function_cn": "[向量] 饱和加倍乘 [16]"
	},
	{
	  "name": "vqrdmulh_s32",
	  "full name": "int32x2_t vqrdmulh_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqrdmulh",
	  "function_en": "[vector] sqrdmulh [32]",
	  "function_cn": "[向量] 饱和加倍乘 [32]"
	},
	{
	  "name": "vqrdmulhq_s32",
	  "full name": "int32x4_t vqrdmulhq_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqrdmulh",
	  "function_en": "[vector] sqrdmulh [32]",
	  "function_cn": "[向量] 饱和加倍乘 [32]"
	},
	{
	  "name": "vqrdmulhh_s16",
	  "full name": "int16_t vqrdmulhh_s16(int16_t a, int16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqrdmulh",
	  "function_en": "[scalar] sqrdmulh [16]",
	  "function_cn": "[标量] 饱和加倍乘 [16]"
	},
	{
	  "name": "vqrdmulhs_s32",
	  "full name": "int32_t vqrdmulhs_s32(int32_t a, int32_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqrdmulh",
	  "function_en": "[scalar] sqrdmulh [32]",
	  "function_cn": "[标量] 饱和加倍乘 [32]"
	},
	{
	  "name": "vqdmlal_s16",
	  "full name": "int32x4_t vqdmlal_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlal",
	  "function_en": "[vector] sqdmlal [16]",
	  "function_cn": "[向量] 饱和加倍乘加 [16]"
	},
	{
	  "name": "vqdmlal_s32",
	  "full name": "int64x2_t vqdmlal_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlal",
	  "function_en": "[vector] sqdmlal [32]",
	  "function_cn": "[向量] 饱和加倍乘加 [32]"
	},
	{
	  "name": "vqdmlalh_s16",
	  "full name": "int32_t vqdmlalh_s16(int32_t a, int16_t b, int16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlal",
	  "function_en": "[scalar] sqdmlal [16]",
	  "function_cn": "[标量] 饱和加倍乘加 [16]"
	},
	{
	  "name": "vqdmlals_s32",
	  "full name": "int64_t vqdmlals_s32(int64_t a, int32_t b, int32_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlal",
	  "function_en": "[scalar] sqdmlal [32]",
	  "function_cn": "[标量] 饱和加倍乘加 [32]"
	},
	{
	  "name": "vqdmlal_high_s16",
	  "full name": "int32x4_t vqdmlal_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlal2",
	  "function_en": "[vector] sqdmlal2 [16]",
	  "function_cn": "[向量] 饱和加倍乘加 [16]"
	},
	{
	  "name": "vqdmlal_high_s32",
	  "full name": "int64x2_t vqdmlal_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlal2",
	  "function_en": "[vector] sqdmlal2 [32]",
	  "function_cn": "[向量] 饱和加倍乘加 [32]"
	},
	{
	  "name": "vqdmlsl_s16",
	  "full name": "int32x4_t vqdmlsl_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlsl",
	  "function_en": "[vector] sqdmlsl [16]",
	  "function_cn": "[向量] 饱和加倍乘减 [16]"
	},
	{
	  "name": "vqdmlsl_s32",
	  "full name": "int64x2_t vqdmlsl_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlsl",
	  "function_en": "[vector] sqdmlsl [32]",
	  "function_cn": "[向量] 饱和加倍乘减 [32]"
	},
	{
	  "name": "vqdmlslh_s16",
	  "full name": "int32_t vqdmlslh_s16(int32_t a, int16_t b, int16_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlsl",
	  "function_en": "[scalar] sqdmlsl [16]",
	  "function_cn": "[标量] 饱和加倍乘减 [16]"
	},
	{
	  "name": "vqdmlsls_s32",
	  "full name": "int64_t vqdmlsls_s32(int64_t a, int32_t b, int32_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlsl",
	  "function_en": "[scalar] sqdmlsl [32]",
	  "function_cn": "[标量] 饱和加倍乘减 [32]"
	},
	{
	  "name": "vqdmlsl_high_s16",
	  "full name": "int32x4_t vqdmlsl_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlsl2",
	  "function_en": "[vector] sqdmlsl2 [16]",
	  "function_cn": "[向量] 饱和加倍乘减 [16]"
	},
	{
	  "name": "vqdmlsl_high_s32",
	  "full name": "int64x2_t vqdmlsl_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmlsl2",
	  "function_en": "[vector] sqdmlsl2 [32]",
	  "function_cn": "[向量] 饱和加倍乘减 [32]"
	},
	{
	  "name": "vmull_s8",
	  "full name": "int16x8_t vmull_s8(int8x8_t a, int8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smull",
	  "function_en": "[vector] smull [8]",
	  "function_cn": "[向量] 长型乘 [8]"
	},
	{
	  "name": "vmull_s16",
	  "full name": "int32x4_t vmull_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smull",
	  "function_en": "[vector] smull [16]",
	  "function_cn": "[向量] 长型乘 [16]"
	},
	{
	  "name": "vmull_s32",
	  "full name": "int64x2_t vmull_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "_mm_mul_epi32",
	  "Intel Asm": "pmuldp",
	  "Arm Asm": "smull",
	  "function_en": "[vector] smull [32]",
	  "function_cn": "[向量] 长型乘 [32]"
	},
	{
	  "name": "vmull_u8",
	  "full name": "uint16x8_t vmull_u8(uint8x8_t a, uint8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umull",
	  "function_en": "[vector] umull [8]",
	  "function_cn": "[向量] 长型乘 [8]"
	},
	{
	  "name": "vmull_u16",
	  "full name": "uint32x4_t vmull_u16(uint16x4_t a, uint16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umull",
	  "function_en": "[vector] umull [16]",
	  "function_cn": "[向量] 长型乘 [16]"
	},
	{
	  "name": "vmull_u32",
	  "full name": "uint64x2_t vmull_u32(uint32x2_t a, uint32x2_t b)",
	  "Intel name": "_mm_mul_epu32",
	  "Intel Asm": "pmuludq",
	  "Arm Asm": "umull",
	  "function_en": "[vector] umull [32]",
	  "function_cn": "[向量] 长型乘 [32]"
	},
	{
	  "name": "vmull_p8",
	  "full name": "poly16x8_t vmull_p8(poly8x8_t a, poly8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "pmull",
	  "function_en": "[vector] pmull [8]",
	  "function_cn": "[向量] 长型乘 [8]"
	},
	{
	  "name": "vmull_high_s8",
	  "full name": "int16x8_t vmull_high_s8(int8x16_t a, int8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smull2",
	  "function_en": "[vector] smull2 [8]",
	  "function_cn": "[向量] 长型乘 [8]"
	},
	{
	  "name": "vmull_high_s16",
	  "full name": "int32x4_t vmull_high_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smull2",
	  "function_en": "[vector] smull2 [16]",
	  "function_cn": "[向量] 长型乘 [16]"
	},
	{
	  "name": "vmull_high_s32",
	  "full name": "int64x2_t vmull_high_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "smull2",
	  "function_en": "[vector] smull2 [32]",
	  "function_cn": "[向量] 长型乘 [32]"
	},
	{
	  "name": "vmull_high_u8",
	  "full name": "uint16x8_t vmull_high_u8(uint8x16_t a, uint8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umull2",
	  "function_en": "[vector] umull2 [8]",
	  "function_cn": "[向量] 长型乘 [8]"
	},
	{
	  "name": "vmull_high_u16",
	  "full name": "uint32x4_t vmull_high_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umull2",
	  "function_en": "[vector] umull2 [16]",
	  "function_cn": "[向量] 长型乘 [16]"
	},
	{
	  "name": "vmull_high_u32",
	  "full name": "uint64x2_t vmull_high_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "umull2",
	  "function_en": "[vector] umull2 [32]",
	  "function_cn": "[向量] 长型乘 [32]"
	},
	{
	  "name": "vmull_high_p8",
	  "full name": "poly16x8_t vmull_high_p8(poly8x16_t a, poly8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "pmull2",
	  "function_en": "[vector] pmull2 [8]",
	  "function_cn": "[向量] 长型乘 [8]"
	},
	{
	  "name": "vqdmull_s16",
	  "full name": "int32x4_t vqdmull_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmull",
	  "function_en": "[vector] sqdmull [16]",
	  "function_cn": "[向量] 饱和加倍长型乘 [16]"
	},
	{
	  "name": "vqdmull_s32",
	  "full name": "int64x2_t vqdmull_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmull",
	  "function_en": "[vector] sqdmull [32]",
	  "function_cn": "[向量] 饱和加倍长型乘 [32]"
	},
	{
	  "name": "vqdmullh_s16",
	  "full name": "int32_t vqdmullh_s16(int16_t a, int16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmull",
	  "function_en": "[scalar] sqdmull [16]",
	  "function_cn": "[标量] 饱和加倍长型乘 [16]"
	},
	{
	  "name": "vqdmulls_s32",
	  "full name": "int64_t vqdmulls_s32(int32_t a, int32_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmull",
	  "function_en": "[scalar] sqdmull [32]",
	  "function_cn": "[标量] 饱和加倍长型乘 [32]"
	},
	{
	  "name": "vqdmull_high_s16",
	  "full name": "int32x4_t vqdmull_high_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmull2",
	  "function_en": "[vector] sqdmull2 [16]",
	  "function_cn": "[向量] 饱和加倍长型乘 [16]"
	},
	{
	  "name": "vqdmull_high_s32",
	  "full name": "int64x2_t vqdmull_high_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqdmull2",
	  "function_en": "[vector] sqdmull2 [32]",
	  "function_cn": "[向量] 饱和加倍长型乘 [32]"
	},
	{
	  "name": "vsub_s8",
	  "full name": "int8x8_t vsub_s8(int8x8_t a, int8x8_t b)",
	  "Intel name": "_mm_sub_pi8",
	  "Intel Asm": "psubb",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubq_s8",
	  "full name": "int8x16_t vsubq_s8(int8x16_t a, int8x16_t b)",
	  "Intel name": "_mm_sub_epi8",
	  "Intel Asm": "psubb",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsub_s16",
	  "full name": "int16x4_t vsub_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "_mm_sub_pi16",
	  "Intel Asm": "psubw",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubq_s16",
	  "full name": "int16x8_t vsubq_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "_mm_sub_epi16",
	  "Intel Asm": "psubw",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsub_s32",
	  "full name": "int32x2_t vsub_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "_mm_sub_pi32",
	  "Intel Asm": "psubd",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubq_s32",
	  "full name": "int32x4_t vsubq_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "_mm_sub_epi32",
	  "Intel Asm": "psubd",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsub_s64",
	  "full name": "int64x1_t vsub_s64(int64x1_t a, int64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [64]",
	  "function_cn": "[向量] 减 [64]"
	},
	{
	  "name": "vsubq_s64",
	  "full name": "int64x2_t vsubq_s64(int64x2_t a, int64x2_t b)",
	  "Intel name": "_mm_sub_epi64",
	  "Intel Asm": "psubq",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [64]",
	  "function_cn": "[向量] 减 [64]"
	},
	{
	  "name": "vsub_u8",
	  "full name": "uint8x8_t vsub_u8(uint8x8_t a, uint8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubq_u8",
	  "full name": "uint8x16_t vsubq_u8(uint8x16_t a, uint8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsub_u16",
	  "full name": "uint16x4_t vsub_u16(uint16x4_t a, uint16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubq_u16",
	  "full name": "uint16x8_t vsubq_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsub_u32",
	  "full name": "uint32x2_t vsub_u32(uint32x2_t a, uint32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubq_u32",
	  "full name": "uint32x4_t vsubq_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsub_u64",
	  "full name": "uint64x1_t vsub_u64(uint64x1_t a, uint64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [64]",
	  "function_cn": "[向量] 减 [64]"
	},
	{
	  "name": "vsubq_u64",
	  "full name": "uint64x2_t vsubq_u64(uint64x2_t a, uint64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[vector] sub [64]",
	  "function_cn": "[向量] 减 [64]"
	},
	{
	  "name": "vsub_f32",
	  "full name": "float32x2_t vsub_f32(float32x2_t a, float32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fsub",
	  "function_en": "[vector] fsub [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubq_f32",
	  "full name": "float32x4_t vsubq_f32(float32x4_t a, float32x4_t b)",
	  "Intel name": "_mm_sub_ps",
	  "Intel Asm": "subps",
	  "Arm Asm": "fsub",
	  "function_en": "[vector] fsub [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsub_f64",
	  "full name": "float64x1_t vsub_f64(float64x1_t a, float64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "fsub",
	  "function_en": "[vector] fsub [64]",
	  "function_cn": "[向量] 减 [64]"
	},
	{
	  "name": "vsubq_f64",
	  "full name": "float64x2_t vsubq_f64(float64x2_t a, float64x2_t b)",
	  "Intel name": "_mm_sub_pd",
	  "Intel Asm": "subpd",
	  "Arm Asm": "fsub",
	  "function_en": "[vector] fsub [64]",
	  "function_cn": "[向量] 减 [64]"
	},
	{
	  "name": "vsubd_s64",
	  "full name": "int64_t vsubd_s64(int64_t a, int64_t b)",
	  "Intel name": "_mm_sub_si64",
	  "Intel Asm": "psubq",
	  "Arm Asm": "sub",
	  "function_en": "[scalar] sub [64]",
	  "function_cn": "[标量] 减 [64]"
	},
	{
	  "name": "vsubd_u64",
	  "full name": "uint64_t vsubd_u64(uint64_t a, uint64_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sub",
	  "function_en": "[scalar] sub [64]",
	  "function_cn": "[标量] 减 [64]"
	},
	{
	  "name": "vsubl_s8",
	  "full name": "int16x8_t vsubl_s8(int8x8_t a, int8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubl",
	  "function_en": "[vector] ssubl [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubl_s16",
	  "full name": "int32x4_t vsubl_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubl",
	  "function_en": "[vector] ssubl [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubl_s32",
	  "full name": "int64x2_t vsubl_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubl",
	  "function_en": "[vector] ssubl [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubl_u8",
	  "full name": "uint16x8_t vsubl_u8(uint8x8_t a, uint8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubl",
	  "function_en": "[vector] usubl [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubl_u16",
	  "full name": "uint32x4_t vsubl_u16(uint16x4_t a, uint16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubl",
	  "function_en": "[vector] usubl [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubl_u32",
	  "full name": "uint64x2_t vsubl_u32(uint32x2_t a, uint32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubl",
	  "function_en": "[vector] usubl [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubl_high_s8",
	  "full name": "int16x8_t vsubl_high_s8(int8x16_t a, int8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubl2",
	  "function_en": "[vector] ssubl2 [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubl_high_s16",
	  "full name": "int32x4_t vsubl_high_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubl2",
	  "function_en": "[vector] ssubl2 [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubl_high_s32",
	  "full name": "int64x2_t vsubl_high_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubl2",
	  "function_en": "[vector] ssubl2 [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubl_high_u8",
	  "full name": "uint16x8_t vsubl_high_u8(uint8x16_t a, uint8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubl2",
	  "function_en": "[vector] usubl2 [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubl_high_u16",
	  "full name": "uint32x4_t vsubl_high_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubl2",
	  "function_en": "[vector] usubl2 [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubl_high_u32",
	  "full name": "uint64x2_t vsubl_high_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubl2",
	  "function_en": "[vector] usubl2 [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubw_s8",
	  "full name": "int16x8_t vsubw_s8(int16x8_t a, int8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubw",
	  "function_en": "[vector] ssubw [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubw_s16",
	  "full name": "int32x4_t vsubw_s16(int32x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubw",
	  "function_en": "[vector] ssubw [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubw_s32",
	  "full name": "int64x2_t vsubw_s32(int64x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubw",
	  "function_en": "[vector] ssubw [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubw_u8",
	  "full name": "uint16x8_t vsubw_u8(uint16x8_t a, uint8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubw",
	  "function_en": "[vector] usubw [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubw_u16",
	  "full name": "uint32x4_t vsubw_u16(uint32x4_t a, uint16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubw",
	  "function_en": "[vector] usubw [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubw_u32",
	  "full name": "uint64x2_t vsubw_u32(uint64x2_t a, uint32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubw",
	  "function_en": "[vector] usubw [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubw_high_s8",
	  "full name": "int16x8_t vsubw_high_s8(int16x8_t a, int8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubw2",
	  "function_en": "[vector] ssubw2 [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubw_high_s16",
	  "full name": "int32x4_t vsubw_high_s16(int32x4_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubw2",
	  "function_en": "[vector] ssubw2 [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubw_high_s32",
	  "full name": "int64x2_t vsubw_high_s32(int64x2_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "ssubw2",
	  "function_en": "[vector] ssubw2 [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vsubw_high_u8",
	  "full name": "uint16x8_t vsubw_high_u8(uint16x8_t a, uint8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubw2",
	  "function_en": "[vector] usubw2 [8]",
	  "function_cn": "[向量] 减 [8]"
	},
	{
	  "name": "vsubw_high_u16",
	  "full name": "uint32x4_t vsubw_high_u16(uint32x4_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubw2",
	  "function_en": "[vector] usubw2 [16]",
	  "function_cn": "[向量] 减 [16]"
	},
	{
	  "name": "vsubw_high_u32",
	  "full name": "uint64x2_t vsubw_high_u32(uint64x2_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "usubw2",
	  "function_en": "[vector] usubw2 [32]",
	  "function_cn": "[向量] 减 [32]"
	},
	{
	  "name": "vhsub_s8",
	  "full name": "int8x8_t vhsub_s8(int8x8_t a, int8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "shsub",
	  "function_en": "[vector] shsub [8]",
	  "function_cn": "[向量] 相减并右移一位 [8]"
	},
	{
	  "name": "vhsubq_s8",
	  "full name": "int8x16_t vhsubq_s8(int8x16_t a, int8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "shsub",
	  "function_en": "[vector] shsub [8]",
	  "function_cn": "[向量] 相减并右移一位 [8]"
	},
	{
	  "name": "vhsub_s16",
	  "full name": "int16x4_t vhsub_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "shsub",
	  "function_en": "[vector] shsub [16]",
	  "function_cn": "[向量] 相减并右移一位 [16]"
	},
	{
	  "name": "vhsubq_s16",
	  "full name": "int16x8_t vhsubq_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "shsub",
	  "function_en": "[vector] shsub [16]",
	  "function_cn": "[向量] 相减并右移一位 [16]"
	},
	{
	  "name": "vhsub_s32",
	  "full name": "int32x2_t vhsub_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "shsub",
	  "function_en": "[vector] shsub [32]",
	  "function_cn": "[向量] 相减并右移一位 [32]"
	},
	{
	  "name": "vhsubq_s32",
	  "full name": "int32x4_t vhsubq_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "shsub",
	  "function_en": "[vector] shsub [32]",
	  "function_cn": "[向量] 相减并右移一位 [32]"
	},
	{
	  "name": "vhsub_u8",
	  "full name": "uint8x8_t vhsub_u8(uint8x8_t a, uint8x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uhsub",
	  "function_en": "[vector] uhsub [8]",
	  "function_cn": "[向量] 相减并右移一位 [8]"
	},
	{
	  "name": "vhsubq_u8",
	  "full name": "uint8x16_t vhsubq_u8(uint8x16_t a, uint8x16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uhsub",
	  "function_en": "[vector] uhsub [8]",
	  "function_cn": "[向量] 相减并右移一位 [8]"
	},
	{
	  "name": "vhsub_u16",
	  "full name": "uint16x4_t vhsub_u16(uint16x4_t a, uint16x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uhsub",
	  "function_en": "[vector] uhsub [16]",
	  "function_cn": "[向量] 相减并右移一位 [16]"
	},
	{
	  "name": "vhsubq_u16",
	  "full name": "uint16x8_t vhsubq_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uhsub",
	  "function_en": "[vector] uhsub [16]",
	  "function_cn": "[向量] 相减并右移一位 [16]"
	},
	{
	  "name": "vhsub_u32",
	  "full name": "uint32x2_t vhsub_u32(uint32x2_t a, uint32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uhsub",
	  "function_en": "[vector] uhsub [32]",
	  "function_cn": "[向量] 相减并右移一位 [32]"
	},
	{
	  "name": "vhsubq_u32",
	  "full name": "uint32x4_t vhsubq_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uhsub",
	  "function_en": "[vector] uhsub [32]",
	  "function_cn": "[向量] 相减并右移一位 [32]"
	},
	{
	  "name": "vqsub_s8",
	  "full name": "int8x8_t vqsub_s8(int8x8_t a, int8x8_t b)",
	  "Intel name": "_mm_subs_pi8",
	  "Intel Asm": "psubsb",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [8]",
	  "function_cn": "[向量] 饱和减 [8]"
	},
	{
	  "name": "vqsubq_s8",
	  "full name": "int8x16_t vqsubq_s8(int8x16_t a, int8x16_t b)",
	  "Intel name": "_mm_subs_epi8",
	  "Intel Asm": "psubsb",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [8]",
	  "function_cn": "[向量] 饱和减 [8]"
	},
	{
	  "name": "vqsub_s16",
	  "full name": "int16x4_t vqsub_s16(int16x4_t a, int16x4_t b)",
	  "Intel name": "_mm_subs_pi16",
	  "Intel Asm": "psubsw",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [16]",
	  "function_cn": "[向量] 饱和减 [16]"
	},
	{
	  "name": "vqsubq_s16",
	  "full name": "int16x8_t vqsubq_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "_mm_subs_epi16",
	  "Intel Asm": "psubsw",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [16]",
	  "function_cn": "[向量] 饱和减 [16]"
	},
	{
	  "name": "vqsub_s32",
	  "full name": "int32x2_t vqsub_s32(int32x2_t a, int32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [32]",
	  "function_cn": "[向量] 饱和减 [32]"
	},
	{
	  "name": "vqsubq_s32",
	  "full name": "int32x4_t vqsubq_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [32]",
	  "function_cn": "[向量] 饱和减 [32]"
	},
	{
	  "name": "vqsub_s64",
	  "full name": "int64x1_t vqsub_s64(int64x1_t a, int64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [64]",
	  "function_cn": "[向量] 饱和减 [64]"
	},
	{
	  "name": "vqsubq_s64",
	  "full name": "int64x2_t vqsubq_s64(int64x2_t a, int64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[vector] sqsub [64]",
	  "function_cn": "[向量] 饱和减 [64]"
	},
	{
	  "name": "vqsub_u8",
	  "full name": "uint8x8_t vqsub_u8(uint8x8_t a, uint8x8_t b)",
	  "Intel name": "_mm_subs_pu8",
	  "Intel Asm": "psubusb",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [8]",
	  "function_cn": "[向量] 饱和减 [8]"
	},
	{
	  "name": "vqsubq_u8",
	  "full name": "uint8x16_t vqsubq_u8(uint8x16_t a, uint8x16_t b)",
	  "Intel name": "_mm_subs_epu8",
	  "Intel Asm": "psubusb",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [8]",
	  "function_cn": "[向量] 饱和减 [8]"
	},
	{
	  "name": "vqsub_u16",
	  "full name": "uint16x4_t vqsub_u16(uint16x4_t a, uint16x4_t b)",
	  "Intel name": "_mm_subs_pu16",
	  "Intel Asm": "psubusw",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [16]",
	  "function_cn": "[向量] 饱和减 [16]"
	},
	{
	  "name": "vqsubq_u16",
	  "full name": "uint16x8_t vqsubq_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "_mm_subs_epu16",
	  "Intel Asm": "psubusw",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [16]",
	  "function_cn": "[向量] 饱和减 [16]"
	},
	{
	  "name": "vqsub_u32",
	  "full name": "uint32x2_t vqsub_u32(uint32x2_t a, uint32x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [32]",
	  "function_cn": "[向量] 饱和减 [32]"
	},
	{
	  "name": "vqsubq_u32",
	  "full name": "uint32x4_t vqsubq_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [32]",
	  "function_cn": "[向量] 饱和减 [32]"
	},
	{
	  "name": "vqsub_u64",
	  "full name": "uint64x1_t vqsub_u64(uint64x1_t a, uint64x1_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [64]",
	  "function_cn": "[向量] 饱和减 [64]"
	},
	{
	  "name": "vqsubq_u64",
	  "full name": "uint64x2_t vqsubq_u64(uint64x2_t a, uint64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[vector] uqsub [64]",
	  "function_cn": "[向量] 饱和减 [64]"
	},
	{
	  "name": "vqsubb_s8",
	  "full name": "int8_t vqsubb_s8(int8_t a, int8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[scalar] sqsub [8]",
	  "function_cn": "[标量] 饱和减 [8]"
	},
	{
	  "name": "vqsubh_s16",
	  "full name": "int16_t vqsubh_s16(int16_t a, int16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[scalar] sqsub [16]",
	  "function_cn": "[标量] 饱和减 [16]"
	},
	{
	  "name": "vqsubs_s32",
	  "full name": "int32_t vqsubs_s32(int32_t a, int32_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[scalar] sqsub [32]",
	  "function_cn": "[标量] 饱和减 [32]"
	},
	{
	  "name": "vqsubd_s64",
	  "full name": "int64_t vqsubd_s64(int64_t a, int64_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "sqsub",
	  "function_en": "[scalar] sqsub [64]",
	  "function_cn": "[标量] 饱和减 [64]"
	},
	{
	  "name": "vqsubb_u8",
	  "full name": "uint8_t vqsubb_u8(uint8_t a, uint8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[scalar] uqsub [8]",
	  "function_cn": "[标量] 饱和减 [8]"
	},
	{
	  "name": "vqsubh_u16",
	  "full name": "uint16_t vqsubh_u16(uint16_t a, uint16_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[scalar] uqsub [16]",
	  "function_cn": "[标量] 饱和减 [16]"
	},
	{
	  "name": "vqsubs_u32",
	  "full name": "uint32_t vqsubs_u32(uint32_t a, uint32_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[scalar] uqsub [32]",
	  "function_cn": "[标量] 饱和减 [32]"
	},
	{
	  "name": "vqsubd_u64",
	  "full name": "uint64_t vqsubd_u64(uint64_t a, uint64_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "uqsub",
	  "function_en": "[scalar] uqsub [64]",
	  "function_cn": "[标量] 饱和减 [64]"
	},
	{
	  "name": "vsubhn_s16",
	  "full name": "int8x8_t vsubhn_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn",
	  "function_en": "[vector] subhn [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vsubhn_s32",
	  "full name": "int16x4_t vsubhn_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn",
	  "function_en": "[vector] subhn [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vsubhn_s64",
	  "full name": "int32x2_t vsubhn_s64(int64x2_t a, int64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn",
	  "function_en": "[vector] subhn [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vsubhn_u16",
	  "full name": "uint8x8_t vsubhn_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn",
	  "function_en": "[vector] subhn [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vsubhn_u32",
	  "full name": "uint16x4_t vsubhn_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn",
	  "function_en": "[vector] subhn [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vsubhn_u64",
	  "full name": "uint32x2_t vsubhn_u64(uint64x2_t a, uint64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn",
	  "function_en": "[vector] subhn [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vsubhn_high_s16",
	  "full name": "int8x16_t vsubhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn2",
	  "function_en": "[vector] subhn2 [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vsubhn_high_s32",
	  "full name": "int16x8_t vsubhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn2",
	  "function_en": "[vector] subhn2 [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vsubhn_high_s64",
	  "full name": "int32x4_t vsubhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn2",
	  "function_en": "[vector] subhn2 [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vsubhn_high_u16",
	  "full name": "uint8x16_t vsubhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn2",
	  "function_en": "[vector] subhn2 [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vsubhn_high_u32",
	  "full name": "uint16x8_t vsubhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn2",
	  "function_en": "[vector] subhn2 [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vsubhn_high_u64",
	  "full name": "uint32x4_t vsubhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "subhn2",
	  "function_en": "[vector] subhn2 [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vrsubhn_s16",
	  "full name": "int8x8_t vrsubhn_s16(int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn",
	  "function_en": "[vector] rsubhn [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vrsubhn_s32",
	  "full name": "int16x4_t vrsubhn_s32(int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn",
	  "function_en": "[vector] rsubhn [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vrsubhn_s64",
	  "full name": "int32x2_t vrsubhn_s64(int64x2_t a, int64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn",
	  "function_en": "[vector] rsubhn [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vrsubhn_u16",
	  "full name": "uint8x8_t vrsubhn_u16(uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn",
	  "function_en": "[vector] rsubhn [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vrsubhn_u32",
	  "full name": "uint16x4_t vrsubhn_u32(uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn",
	  "function_en": "[vector] rsubhn [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vrsubhn_u64",
	  "full name": "uint32x2_t vrsubhn_u64(uint64x2_t a, uint64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn",
	  "function_en": "[vector] rsubhn [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vrsubhn_high_s16",
	  "full name": "int8x16_t vrsubhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn2",
	  "function_en": "[vector] rsubhn2 [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vrsubhn_high_s32",
	  "full name": "int16x8_t vrsubhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn2",
	  "function_en": "[vector] rsubhn2 [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vrsubhn_high_s64",
	  "full name": "int32x4_t vrsubhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn2",
	  "function_en": "[vector] rsubhn2 [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
	{
	  "name": "vrsubhn_high_u16",
	  "full name": "uint8x16_t vrsubhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn2",
	  "function_en": "[vector] rsubhn2 [16]",
	  "function_cn": "[向量] 窄型减 [16]"
	},
	{
	  "name": "vrsubhn_high_u32",
	  "full name": "uint16x8_t vrsubhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn2",
	  "function_en": "[vector] rsubhn2 [32]",
	  "function_cn": "[向量] 窄型减 [32]"
	},
	{
	  "name": "vrsubhn_high_u64",
	  "full name": "uint32x4_t vrsubhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
	  "Intel name": "",
	  "Intel Asm": "",
	  "Arm Asm": "rsubhn2",
	  "function_en": "[vector] rsubhn2 [64]",
	  "function_cn": "[向量] 窄型减 [64]"
	},
    {
      "name": "vceq_s8",
      "full name": "uint8x8_t vceq_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "_mm_cmpeq_pi8",
      "Intel Asm": "pcmpeqb",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较等于 [8]"
    },
    {
      "name": "vceqq_s8",
      "full name": "uint8x16_t vceqq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_cmpeq_epi8",
      "Intel Asm": "pcmpeqb",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较等于 [8]"
    },
    {
      "name": "vceq_s16",
      "full name": "uint16x4_t vceq_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_cmpeq_pi16",
      "Intel Asm": "pcmpeqw",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较等于 [16]"
    },
    {
      "name": "vceqq_s16",
      "full name": "uint16x8_t vceqq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_cmpeq_epi16",
      "Intel Asm": "pcmpeqw",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较等于 [16]"
    },
    {
      "name": "vceq_s32",
      "full name": "uint32x2_t vceq_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "_mm_cmpeq_pi32",
      "Intel Asm": "pcmpeqd",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较等于 [32]"
    },
    {
      "name": "vceqq_s32",
      "full name": "uint32x4_t vceqq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_cmpeq_epi32",
      "Intel Asm": "pcmpeqd",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较等于 [32]"
    },
    {
      "name": "vceq_u8",
      "full name": "uint8x8_t vceq_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较等于 [8]"
    },
    {
      "name": "vceqq_u8",
      "full name": "uint8x16_t vceqq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较等于 [8]"
    },
    {
      "name": "vceq_u16",
      "full name": "uint16x4_t vceq_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较等于 [16]"
    },
    {
      "name": "vceqq_u16",
      "full name": "uint16x8_t vceqq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较等于 [16]"
    },
    {
      "name": "vceq_u32",
      "full name": "uint32x2_t vceq_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较等于 [32]"
    },
    {
      "name": "vceqq_u32",
      "full name": "uint32x4_t vceqq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较等于 [32]"
    },
    {
      "name": "vceq_f32",
      "full name": "uint32x2_t vceq_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [32]",
      "function_cn": "[向量] 比较等于 [32]"
    },
    {
      "name": "vceqq_f32",
      "full name": "uint32x4_t vceqq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_cmpeq_ps",
      "Intel Asm": "cmpps",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [32]",
      "function_cn": "[向量] 比较等于 [32]"
    },
    {
      "name": "vceq_p8",
      "full name": "uint8x8_t vceq_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较等于 [8]"
    },
    {
      "name": "vceqq_p8",
      "full name": "uint8x16_t vceqq_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较等于 [8]"
    },
    {
      "name": "vceq_s64",
      "full name": "uint64x1_t vceq_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceqq_s64",
      "full name": "uint64x2_t vceqq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_cmpeq_epi64",
      "Intel Asm": "pcmpeqq",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceq_u64",
      "full name": "uint64x1_t vceq_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceqq_u64",
      "full name": "uint64x2_t vceqq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceq_p64",
      "full name": "uint64x1_t vceq_p64(poly64x1_t a, poly64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceqq_p64",
      "full name": "uint64x2_t vceqq_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceq_f64",
      "full name": "uint64x1_t vceq_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceqq_f64",
      "full name": "uint64x2_t vceqq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_cmpeq_pd",
      "Intel Asm": "cmppd",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [64]",
      "function_cn": "[向量] 比较等于 [64]"
    },
    {
      "name": "vceqd_s64",
      "full name": "uint64_t vceqd_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[scalar] cmeq [64]",
      "function_cn": "[标量] 比较等于 [64]"
    },
    {
      "name": "vceqd_u64",
      "full name": "uint64_t vceqd_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[scalar] cmeq [64]",
      "function_cn": "[标量] 比较等于 [64]"
    },
    {
      "name": "vceqs_f32",
      "full name": "uint32_t vceqs_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[scalar] fcmeq [32]",
      "function_cn": "[标量] 比较等于 [32]"
    },
    {
      "name": "vceqd_f64",
      "full name": "uint64_t vceqd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[scalar] fcmeq [64]",
      "function_cn": "[标量] 比较等于 [64]"
    },
    {
      "name": "vceqz_s8",
      "full name": "uint8x8_t vceqz_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较是否等于零寄存器 [8]"
    },
    {
      "name": "vceqzq_s8",
      "full name": "uint8x16_t vceqzq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较是否等于零寄存器 [8]"
    },
    {
      "name": "vceqz_s16",
      "full name": "uint16x4_t vceqz_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较是否等于零寄存器 [16]"
    },
    {
      "name": "vceqzq_s16",
      "full name": "uint16x8_t vceqzq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较是否等于零寄存器 [16]"
    },
    {
      "name": "vceqz_s32",
      "full name": "uint32x2_t vceqz_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqzq_s32",
      "full name": "uint32x4_t vceqzq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqz_u8",
      "full name": "uint8x8_t vceqz_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较是否等于零寄存器 [8]"
    },
    {
      "name": "vceqzq_u8",
      "full name": "uint8x16_t vceqzq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较是否等于零寄存器 [8]"
    },
    {
      "name": "vceqz_u16",
      "full name": "uint16x4_t vceqz_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较是否等于零寄存器 [16]"
    },
    {
      "name": "vceqzq_u16",
      "full name": "uint16x8_t vceqzq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [16]",
      "function_cn": "[向量] 比较是否等于零寄存器 [16]"
    },
    {
      "name": "vceqz_u32",
      "full name": "uint32x2_t vceqz_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqzq_u32",
      "full name": "uint32x4_t vceqzq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [32]",
      "function_cn": "[向量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqz_f32",
      "full name": "uint32x2_t vceqz_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [32]",
      "function_cn": "[向量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqzq_f32",
      "full name": "uint32x4_t vceqzq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [32]",
      "function_cn": "[向量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqz_p8",
      "full name": "uint8x8_t vceqz_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较是否等于零寄存器 [8]"
    },
    {
      "name": "vceqzq_p8",
      "full name": "uint8x16_t vceqzq_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [8]",
      "function_cn": "[向量] 比较是否等于零寄存器 [8]"
    },
    {
      "name": "vceqz_s64",
      "full name": "uint64x1_t vceqz_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzq_s64",
      "full name": "uint64x2_t vceqzq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqz_u64",
      "full name": "uint64x1_t vceqz_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzq_u64",
      "full name": "uint64x2_t vceqzq_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqz_p64",
      "full name": "uint64x1_t vceqz_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzq_p64",
      "full name": "uint64x2_t vceqzq_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[vector] cmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqz_f64",
      "full name": "uint64x1_t vceqz_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzq_f64",
      "full name": "uint64x2_t vceqzq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[vector] fcmeq [64]",
      "function_cn": "[向量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzd_s64",
      "full name": "uint64_t vceqzd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[scalar] cmeq [64]",
      "function_cn": "[标量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzd_u64",
      "full name": "uint64_t vceqzd_u64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmeq",
      "function_en": "[scalar] cmeq [64]",
      "function_cn": "[标量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vceqzs_f32",
      "full name": "uint32_t vceqzs_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[scalar] fcmeq [32]",
      "function_cn": "[标量] 比较是否等于零寄存器 [32]"
    },
    {
      "name": "vceqzd_f64",
      "full name": "uint64_t vceqzd_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmeq",
      "function_en": "[scalar] fcmeq [64]",
      "function_cn": "[标量] 比较是否等于零寄存器 [64]"
    },
    {
      "name": "vcge_s8",
      "full name": "uint8x8_t vcge_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [8]",
      "function_cn": "[向量] 比较大于等于 [8]"
    },
    {
      "name": "vcgeq_s8",
      "full name": "uint8x16_t vcgeq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [8]",
      "function_cn": "[向量] 比较大于等于 [8]"
    },
    {
      "name": "vcge_s16",
      "full name": "uint16x4_t vcge_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [16]",
      "function_cn": "[向量] 比较大于等于 [16]"
    },
    {
      "name": "vcgeq_s16",
      "full name": "uint16x8_t vcgeq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [16]",
      "function_cn": "[向量] 比较大于等于 [16]"
    },
    {
      "name": "vcge_s32",
      "full name": "uint32x2_t vcge_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [32]",
      "function_cn": "[向量] 比较大于等于 [32]"
    },
    {
      "name": "vcgeq_s32",
      "full name": "uint32x4_t vcgeq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [32]",
      "function_cn": "[向量] 比较大于等于 [32]"
    },
    {
      "name": "vcge_u8",
      "full name": "uint8x8_t vcge_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [8]",
      "function_cn": "[向量] 比较大于等于 [8]"
    },
    {
      "name": "vcgeq_u8",
      "full name": "uint8x16_t vcgeq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [8]",
      "function_cn": "[向量] 比较大于等于 [8]"
    },
    {
      "name": "vcge_u16",
      "full name": "uint16x4_t vcge_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [16]",
      "function_cn": "[向量] 比较大于等于 [16]"
    },
    {
      "name": "vcgeq_u16",
      "full name": "uint16x8_t vcgeq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [16]",
      "function_cn": "[向量] 比较大于等于 [16]"
    },
    {
      "name": "vcge_u32",
      "full name": "uint32x2_t vcge_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [32]",
      "function_cn": "[向量] 比较大于等于 [32]"
    },
    {
      "name": "vcgeq_u32",
      "full name": "uint32x4_t vcgeq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [32]",
      "function_cn": "[向量] 比较大于等于 [32]"
    },
    {
      "name": "vcge_f32",
      "full name": "uint32x2_t vcge_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [32]",
      "function_cn": "[向量] 比较大于等于 [32]"
    },
    {
      "name": "vcgeq_f32",
      "full name": "uint32x4_t vcgeq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_cmpge_ps",
      "Intel Asm": "cmpps",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [32]",
      "function_cn": "[向量] 比较大于等于 [32]"
    },
    {
      "name": "vcge_s64",
      "full name": "uint64x1_t vcge_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [64]",
      "function_cn": "[向量] 比较大于等于 [64]"
    },
    {
      "name": "vcgeq_s64",
      "full name": "uint64x2_t vcgeq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [64]",
      "function_cn": "[向量] 比较大于等于 [64]"
    },
    {
      "name": "vcge_u64",
      "full name": "uint64x1_t vcge_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [64]",
      "function_cn": "[向量] 比较大于等于 [64]"
    },
    {
      "name": "vcgeq_u64",
      "full name": "uint64x2_t vcgeq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [64]",
      "function_cn": "[向量] 比较大于等于 [64]"
    },
    {
      "name": "vcge_f64",
      "full name": "uint64x1_t vcge_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [64]",
      "function_cn": "[向量] 比较大于等于 [64]"
    },
    {
      "name": "vcgeq_f64",
      "full name": "uint64x2_t vcgeq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_cmpge_pd",
      "Intel Asm": "cmppd",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [64]",
      "function_cn": "[向量] 比较大于等于 [64]"
    },
    {
      "name": "vcged_s64",
      "full name": "uint64_t vcged_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[scalar] cmge [64]",
      "function_cn": "[标量] 比较大于等于 [64]"
    },
    {
      "name": "vcged_u64",
      "full name": "uint64_t vcged_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[scalar] cmhs [64]",
      "function_cn": "[标量] 比较大于等于 [64]"
    },
    {
      "name": "vcges_f32",
      "full name": "uint32_t vcges_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[scalar] fcmge [32]",
      "function_cn": "[标量] 比较大于等于 [32]"
    },
    {
      "name": "vcged_f64",
      "full name": "uint64_t vcged_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[scalar] fcmge [32]",
      "function_cn": "[标量] 比较大于等于 [32]"
    },
    {
      "name": "vcgez_s8",
      "full name": "uint8x8_t vcgez_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [8]",
      "function_cn": "[向量] 比较大于等于零寄存器 [8]"
    },
    {
      "name": "vcgezq_s8",
      "full name": "uint8x16_t vcgezq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [8]",
      "function_cn": "[向量] 比较大于等于零寄存器 [8]"
    },
    {
      "name": "vcgez_s16",
      "full name": "uint16x4_t vcgez_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [16]",
      "function_cn": "[向量] 比较大于等于零寄存器 [16]"
    },
    {
      "name": "vcgezq_s16",
      "full name": "uint16x8_t vcgezq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [16]",
      "function_cn": "[向量] 比较大于等于零寄存器 [16]"
    },
    {
      "name": "vcgez_s32",
      "full name": "uint32x2_t vcgez_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [32]",
      "function_cn": "[向量] 比较大于等于零寄存器 [32]"
    },
    {
      "name": "vcgezq_s32",
      "full name": "uint32x4_t vcgezq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [32]",
      "function_cn": "[向量] 比较大于等于零寄存器 [32]"
    },
    {
      "name": "vcgez_s64",
      "full name": "uint64x1_t vcgez_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [64]",
      "function_cn": "[向量] 比较大于等于零寄存器 [64]"
    },
    {
      "name": "vcgezq_s64",
      "full name": "uint64x2_t vcgezq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [64]",
      "function_cn": "[向量] 比较大于等于零寄存器 [64]"
    },
    {
      "name": "vcgez_f32",
      "full name": "uint32x2_t vcgez_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [32]",
      "function_cn": "[向量] 比较大于等于零寄存器 [32]"
    },
    {
      "name": "vcgezq_f32",
      "full name": "uint32x4_t vcgezq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [32]",
      "function_cn": "[向量] 比较大于等于零寄存器 [32]"
    },
    {
      "name": "vcgez_f64",
      "full name": "uint64x1_t vcgez_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [64]",
      "function_cn": "[向量] 比较大于等于零寄存器 [64]"
    },
    {
      "name": "vcgezq_f64",
      "full name": "uint64x2_t vcgezq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [64]",
      "function_cn": "[向量] 比较大于等于零寄存器 [64]"
    },
    {
      "name": "vcgezd_s64",
      "full name": "uint64_t vcgezd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[scalar] cmge [64]",
      "function_cn": "[标量] 比较大于等于零寄存器 [64]"
    },
    {
      "name": "vcgezs_f32",
      "full name": "uint32_t vcgezs_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[scalar] fcmge [32]",
      "function_cn": "[标量] 比较大于等于零寄存器 [32]"
    },
    {
      "name": "vcgezd_f64",
      "full name": "uint64_t vcgezd_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[scalar] fcmge [64]",
      "function_cn": "[标量] 比较大于等于零寄存器 [64]"
    },
    {
      "name": "vcle_s8",
      "full name": "uint8x8_t vcle_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [8]",
      "function_cn": "[向量] 比较小于等于 [8]"
    },
    {
      "name": "vcleq_s8",
      "full name": "uint8x16_t vcleq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [8]",
      "function_cn": "[向量] 比较小于等于 [8]"
    },
    {
      "name": "vcle_s16",
      "full name": "uint16x4_t vcle_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [16]",
      "function_cn": "[向量] 比较小于等于 [16]"
    },
    {
      "name": "vcleq_s16",
      "full name": "uint16x8_t vcleq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [16]",
      "function_cn": "[向量] 比较小于等于 [16]"
    },
    {
      "name": "vcle_s32",
      "full name": "uint32x2_t vcle_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [32]",
      "function_cn": "[向量] 比较小于等于 [32]"
    },
    {
      "name": "vcleq_s32",
      "full name": "uint32x4_t vcleq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [32]",
      "function_cn": "[向量] 比较小于等于 [32]"
    },
    {
      "name": "vcle_u8",
      "full name": "uint8x8_t vcle_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [8]",
      "function_cn": "[向量] 比较小于等于 [8]"
    },
    {
      "name": "vcleq_u8",
      "full name": "uint8x16_t vcleq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [8]",
      "function_cn": "[向量] 比较小于等于 [8]"
    },
    {
      "name": "vcle_u16",
      "full name": "uint16x4_t vcle_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [16]",
      "function_cn": "[向量] 比较小于等于 [16]"
    },
    {
      "name": "vcleq_u16",
      "full name": "uint16x8_t vcleq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [16]",
      "function_cn": "[向量] 比较小于等于 [16]"
    },
    {
      "name": "vcle_u32",
      "full name": "uint32x2_t vcle_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [32]",
      "function_cn": "[向量] 比较小于等于 [32]"
    },
    {
      "name": "vcleq_u32",
      "full name": "uint32x4_t vcleq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [32]",
      "function_cn": "[向量] 比较小于等于 [32]"
    },
    {
      "name": "vcle_f32",
      "full name": "uint32x2_t vcle_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [32]",
      "function_cn": "[向量] 比较小于等于 [32]"
    },
    {
      "name": "vcleq_f32",
      "full name": "uint32x4_t vcleq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_cmple_ps",
      "Intel Asm": "cmpps",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [32]",
      "function_cn": "[向量] 比较小于等于 [32]"
    },
    {
      "name": "vcle_s64",
      "full name": "uint64x1_t vcle_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [64]",
      "function_cn": "[向量] 比较小于等于 [64]"
    },
    {
      "name": "vcleq_s64",
      "full name": "uint64x2_t vcleq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[vector] cmge [64]",
      "function_cn": "[向量] 比较小于等于 [64]"
    },
    {
      "name": "vcle_u64",
      "full name": "uint64x1_t vcle_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [64]",
      "function_cn": "[向量] 比较小于等于 [64]"
    },
    {
      "name": "vcleq_u64",
      "full name": "uint64x2_t vcleq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[vector] cmhs [64]",
      "function_cn": "[向量] 比较小于等于 [64]"
    },
    {
      "name": "vcle_f64",
      "full name": "uint64x1_t vcle_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [64]",
      "function_cn": "[向量] 比较小于等于 [64]"
    },
    {
      "name": "vcleq_f64",
      "full name": "uint64x2_t vcleq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_cmple_pd",
      "Intel Asm": "cmppd",
      "Arm Asm": "fcmge",
      "function_en": "[vector] fcmge [64]",
      "function_cn": "[向量] 比较小于等于 [64]"
    },
    {
      "name": "vcled_s64",
      "full name": "uint64_t vcled_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmge",
      "function_en": "[scalar] cmge [64]",
      "function_cn": "[标量] 比较小于等于 [64]"
    },
    {
      "name": "vcled_u64",
      "full name": "uint64_t vcled_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhs",
      "function_en": "[scalar] cmhs [64]",
      "function_cn": "[标量] 比较小于等于 [64]"
    },
    {
      "name": "vcles_f32",
      "full name": "uint32_t vcles_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[scalar] fcmge [32]",
      "function_cn": "[标量] 比较小于等于 [32]"
    },
    {
      "name": "vcled_f64",
      "full name": "uint64_t vcled_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmge",
      "function_en": "[scalar] fcmge [32]",
      "function_cn": "[标量] 比较小于等于 [32]"
    },
    {
      "name": "vclez_s8",
      "full name": "uint8x8_t vclez_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [8]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [8]"
    },
    {
      "name": "vclezq_s8",
      "full name": "uint8x16_t vclezq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [8]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [8]"
    },
    {
      "name": "vclez_s16",
      "full name": "uint16x4_t vclez_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [16]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [16]"
    },
    {
      "name": "vclezq_s16",
      "full name": "uint16x8_t vclezq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [16]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [16]"
    },
    {
      "name": "vclez_s32",
      "full name": "uint32x2_t vclez_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [32]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [32]"
    },
    {
      "name": "vclezq_s32",
      "full name": "uint32x4_t vclezq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [32]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [32]"
    },
    {
      "name": "vclez_s64",
      "full name": "uint64x1_t vclez_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [64]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [64]"
    },
    {
      "name": "vclezq_s64",
      "full name": "uint64x2_t vclezq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [64]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [64]"
    },
    {
      "name": "vclez_f32",
      "full name": "uint32x2_t vclez_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[vector] cmle [32]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [32]"
    },
    {
      "name": "vclezq_f32",
      "full name": "uint32x4_t vclezq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmle",
      "function_en": "[vector] fcmle [32]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [32]"
    },
    {
      "name": "vclez_f64",
      "full name": "uint64x1_t vclez_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmle",
      "function_en": "[vector] fcmle [64]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [64]"
    },
    {
      "name": "vclezq_f64",
      "full name": "uint64x2_t vclezq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmle",
      "function_en": "[vector] fcmle [64]",
      "function_cn": "[向量] 比较是否小于等于零寄存器 [64]"
    },
    {
      "name": "vclezd_s64",
      "full name": "uint64_t vclezd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmle",
      "function_en": "[scalar] cmle [64]",
      "function_cn": "[标量] 比较是否小于等于零寄存器 [64]"
    },
    {
      "name": "vclezs_f32",
      "full name": "uint32_t vclezs_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmle",
      "function_en": "[scalar] fcmle [32]",
      "function_cn": "[标量] 比较是否小于等于零寄存器 [32]"
    },
    {
      "name": "vclezd_f64",
      "full name": "uint64_t vclezd_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmle",
      "function_en": "[scalar] fcmle [64]",
      "function_cn": "[标量] 比较是否小于等于零寄存器 [64]"
    },
    {
      "name": "vcgt_s8",
      "full name": "uint8x8_t vcgt_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "_mm_cmpgt_pi8",
      "Intel Asm": "pcmpgtb",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [8]",
      "function_cn": "[向量] 比较大于 [8]"
    },
    {
      "name": "vcgtq_s8",
      "full name": "uint8x16_t vcgtq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_cmpgt_epi8",
      "Intel Asm": "pcmpgtb",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [8]",
      "function_cn": "[向量] 比较大于 [8]"
    },
    {
      "name": "vcgt_s16",
      "full name": "uint16x4_t vcgt_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_cmpgt_pi16",
      "Intel Asm": "pcmpgtw",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [16]",
      "function_cn": "[向量] 比较大于 [16]"
    },
    {
      "name": "vcgtq_s16",
      "full name": "uint16x8_t vcgtq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_cmpgt_epi16",
      "Intel Asm": "pcmpgtw",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [16]",
      "function_cn": "[向量] 比较大于 [16]"
    },
    {
      "name": "vcgt_s32",
      "full name": "uint32x2_t vcgt_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "_mm_cmpgt_pi32",
      "Intel Asm": "pcmpgtd",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [32]",
      "function_cn": "[向量] 比较大于 [32]"
    },
    {
      "name": "vcgtq_s32",
      "full name": "uint32x4_t vcgtq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_cmpgt_epi32",
      "Intel Asm": "pcmpgtd",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [32]",
      "function_cn": "[向量] 比较大于 [32]"
    },
    {
      "name": "vcgt_u8",
      "full name": "uint8x8_t vcgt_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [8]",
      "function_cn": "[向量] 比较大于 [8]"
    },
    {
      "name": "vcgtq_u8",
      "full name": "uint8x16_t vcgtq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [8]",
      "function_cn": "[向量] 比较大于 [8]"
    },
    {
      "name": "vcgt_u16",
      "full name": "uint16x4_t vcgt_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [16]",
      "function_cn": "[向量] 比较大于 [16]"
    },
    {
      "name": "vcgtq_u16",
      "full name": "uint16x8_t vcgtq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [16]",
      "function_cn": "[向量] 比较大于 [16]"
    },
    {
      "name": "vcgt_u32",
      "full name": "uint32x2_t vcgt_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [32]",
      "function_cn": "[向量] 比较大于 [32]"
    },
    {
      "name": "vcgtq_u32",
      "full name": "uint32x4_t vcgtq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [32]",
      "function_cn": "[向量] 比较大于 [32]"
    },
    {
      "name": "vcgt_f32",
      "full name": "uint32x2_t vcgt_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [32]",
      "function_cn": "[向量] 比较大于 [32]"
    },
    {
      "name": "vcgtq_f32",
      "full name": "uint32x4_t vcgtq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_cmpgt_ps",
      "Intel Asm": "cmpps",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [32]",
      "function_cn": "[向量] 比较大于 [32]"
    },
    {
      "name": "vcgt_s64",
      "full name": "uint64x1_t vcgt_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [64]",
      "function_cn": "[向量] 比较大于 [64]"
    },
    {
      "name": "vcgtq_s64",
      "full name": "uint64x2_t vcgtq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_cmpgt_epi64",
      "Intel Asm": "pcmpgtq",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [64]",
      "function_cn": "[向量] 比较大于 [64]"
    },
    {
      "name": "vcgt_u64",
      "full name": "uint64x1_t vcgt_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [64]",
      "function_cn": "[向量] 比较大于 [64]"
    },
    {
      "name": "vcgtq_u64",
      "full name": "uint64x2_t vcgtq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [64]",
      "function_cn": "[向量] 比较大于 [64]"
    },
    {
      "name": "vcgt_f64",
      "full name": "uint64x1_t vcgt_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [64]",
      "function_cn": "[向量] 比较大于 [64]"
    },
    {
      "name": "vcgtq_f64",
      "full name": "uint64x2_t vcgtq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_cmpgt_pd",
      "Intel Asm": "cmppd",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [64]",
      "function_cn": "[向量] 比较大于 [64]"
    },
    {
      "name": "vcgtd_s64",
      "full name": "uint64_t vcgtd_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[scalar] cmgt [64]",
      "function_cn": "[标量] 比较大于 [64]"
    },
    {
      "name": "vcgtd_u64",
      "full name": "uint64_t vcgtd_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[scalar] cmhi [64]",
      "function_cn": "[标量] 比较大于 [64]"
    },
    {
      "name": "vcgts_f32",
      "full name": "uint32_t vcgts_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[scalar] fcmgt [32]",
      "function_cn": "[标量] 比较大于 [32]"
    },
    {
      "name": "vcgtd_f64",
      "full name": "uint64_t vcgtd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[scalar] fcmgt [64]",
      "function_cn": "[标量] 比较大于 [64]"
    },
    {
      "name": "vcgtz_s8",
      "full name": "uint8x8_t vcgtz_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [8]",
      "function_cn": "[向量] 比较是否大于零寄存器 [8]"
    },
    {
      "name": "vcgtzq_s8",
      "full name": "uint8x16_t vcgtzq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [8]",
      "function_cn": "[向量] 比较是否大于零寄存器 [8]"
    },
    {
      "name": "vcgtz_s16",
      "full name": "uint16x4_t vcgtz_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [16]",
      "function_cn": "[向量] 比较是否大于零寄存器 [16]"
    },
    {
      "name": "vcgtzq_s16",
      "full name": "uint16x8_t vcgtzq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [16]",
      "function_cn": "[向量] 比较是否大于零寄存器 [16]"
    },
    {
      "name": "vcgtz_s32",
      "full name": "uint32x2_t vcgtz_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [32]",
      "function_cn": "[向量] 比较是否大于零寄存器 [32]"
    },
    {
      "name": "vcgtzq_s32",
      "full name": "uint32x4_t vcgtzq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [32]",
      "function_cn": "[向量] 比较是否大于零寄存器 [32]"
    },
    {
      "name": "vcgtz_s64",
      "full name": "uint64x1_t vcgtz_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [64]",
      "function_cn": "[向量] 比较是否大于零寄存器 [64]"
    },
    {
      "name": "vcgtzq_s64",
      "full name": "uint64x2_t vcgtzq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [64]",
      "function_cn": "[向量] 比较是否大于零寄存器 [64]"
    },
    {
      "name": "vcgtz_f32",
      "full name": "uint32x2_t vcgtz_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [32]",
      "function_cn": "[向量] 比较是否大于零寄存器 [32]"
    },
    {
      "name": "vcgtzq_f32",
      "full name": "uint32x4_t vcgtzq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [32]",
      "function_cn": "[向量] 比较是否大于零寄存器 [32]"
    },
    {
      "name": "vcgtz_f64",
      "full name": "uint64x1_t vcgtz_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [64]",
      "function_cn": "[向量] 比较是否大于零寄存器 [64]"
    },
    {
      "name": "vcgtzq_f64",
      "full name": "uint64x2_t vcgtzq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [64]",
      "function_cn": "[向量] 比较是否大于零寄存器 [64]"
    },
    {
      "name": "vcgtzd_s64",
      "full name": "uint64_t vcgtzd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[scalar] cmgt [64]",
      "function_cn": "[标量] 比较是否大于零寄存器 [64]"
    },
    {
      "name": "vcgtzs_f32",
      "full name": "uint32_t vcgtzs_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[scalar] fcmgt [32]",
      "function_cn": "[标量] 比较是否大于零寄存器 [32]"
    },
    {
      "name": "vcgtzd_f64",
      "full name": "uint64_t vcgtzd_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[scalar] fcmgt [64]",
      "function_cn": "[标量] 比较是否大于零寄存器 [64]"
    },
    {
      "name": "vclt_s8",
      "full name": "uint8x8_t vclt_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [8]",
      "function_cn": "[向量] 比较小于 [8]"
    },
    {
      "name": "vcltq_s8",
      "full name": "uint8x16_t vcltq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_cmplt_epi8",
      "Intel Asm": "pcmpgtb",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [8]",
      "function_cn": "[向量] 比较小于 [8]"
    },
    {
      "name": "vclt_s16",
      "full name": "uint16x4_t vclt_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [16]",
      "function_cn": "[向量] 比较小于 [16]"
    },
    {
      "name": "vcltq_s16",
      "full name": "uint16x8_t vcltq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_cmplt_epi16",
      "Intel Asm": "pcmpgtw",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [16]",
      "function_cn": "[向量] 比较小于 [16]"
    },
    {
      "name": "vclt_s32",
      "full name": "uint32x2_t vclt_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [32]",
      "function_cn": "[向量] 比较小于 [32]"
    },
    {
      "name": "vcltq_s32",
      "full name": "uint32x4_t vcltq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_cmplt_epi32",
      "Intel Asm": "pcmpgtd",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [32]",
      "function_cn": "[向量] 比较小于 [32]"
    },
    {
      "name": "vclt_u8",
      "full name": "uint8x8_t vclt_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [8]",
      "function_cn": "[向量] 比较小于 [8]"
    },
    {
      "name": "vcltq_u8",
      "full name": "uint8x16_t vcltq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [8]",
      "function_cn": "[向量] 比较小于 [8]"
    },
    {
      "name": "vclt_u16",
      "full name": "uint16x4_t vclt_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [16]",
      "function_cn": "[向量] 比较小于 [16]"
    },
    {
      "name": "vcltq_u16",
      "full name": "uint16x8_t vcltq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [16]",
      "function_cn": "[向量] 比较小于 [16]"
    },
    {
      "name": "vclt_u32",
      "full name": "uint32x2_t vclt_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [32]",
      "function_cn": "[向量] 比较小于 [32]"
    },
    {
      "name": "vcltq_u32",
      "full name": "uint32x4_t vcltq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [32]",
      "function_cn": "[向量] 比较小于 [32]"
    },
    {
      "name": "vclt_f32",
      "full name": "uint32x2_t vclt_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [32]",
      "function_cn": "[向量] 比较小于 [32]"
    },
    {
      "name": "vcltq_f32",
      "full name": "uint32x4_t vcltq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_cmplt_ps",
      "Intel Asm": "cmpps",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [32]",
      "function_cn": "[向量] 比较小于 [32]"
    },
    {
      "name": "vclt_s64",
      "full name": "uint64x1_t vclt_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [64]",
      "function_cn": "[向量] 比较小于 [64]"
    },
    {
      "name": "vcltq_s64",
      "full name": "uint64x2_t vcltq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[vector] cmgt [64]",
      "function_cn": "[向量] 比较小于 [64]"
    },
    {
      "name": "vclt_u64",
      "full name": "uint64x1_t vclt_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [64]",
      "function_cn": "[向量] 比较小于 [64]"
    },
    {
      "name": "vcltq_u64",
      "full name": "uint64x2_t vcltq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[vector] cmhi [64]",
      "function_cn": "[向量] 比较小于 [64]"
    },
    {
      "name": "vclt_f64",
      "full name": "uint64x1_t vclt_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [64]",
      "function_cn": "[向量] 比较小于 [64]"
    },
    {
      "name": "vcltq_f64",
      "full name": "uint64x2_t vcltq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_cmplt_pd",
      "Intel Asm": "cmppd",
      "Arm Asm": "fcmgt",
      "function_en": "[vector] fcmgt [64]",
      "function_cn": "[向量] 比较小于 [64]"
    },
    {
      "name": "vcltd_s64",
      "full name": "uint64_t vcltd_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmgt",
      "function_en": "[scalar] cmgt [64]",
      "function_cn": "[标量] 比较小于 [64]"
    },
    {
      "name": "vcltd_u64",
      "full name": "uint64_t vcltd_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmhi",
      "function_en": "[scalar] cmhi [64]",
      "function_cn": "[标量] 比较小于 [64]"
    },
    {
      "name": "vclts_f32",
      "full name": "uint32_t vclts_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[scalar] fcmgt [32]",
      "function_cn": "[标量] 比较小于 [32]"
    },
    {
      "name": "vcltd_f64",
      "full name": "uint64_t vcltd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmgt",
      "function_en": "[scalar] fcmgt [64]",
      "function_cn": "[标量] 比较小于 [64]"
    },
    {
      "name": "vcltz_s8",
      "full name": "uint8x8_t vcltz_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [8]",
      "function_cn": "[向量] 比较是否小于零寄存器 [8]"
    },
    {
      "name": "vcltzq_s8",
      "full name": "uint8x16_t vcltzq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [8]",
      "function_cn": "[向量] 比较是否小于零寄存器 [8]"
    },
    {
      "name": "vcltz_s16",
      "full name": "uint16x4_t vcltz_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [16]",
      "function_cn": "[向量] 比较是否小于零寄存器 [16]"
    },
    {
      "name": "vcltzq_s16",
      "full name": "uint16x8_t vcltzq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [16]",
      "function_cn": "[向量] 比较是否小于零寄存器 [16]"
    },
    {
      "name": "vcltz_s32",
      "full name": "uint32x2_t vcltz_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [32]",
      "function_cn": "[向量] 比较是否小于零寄存器 [32]"
    },
    {
      "name": "vcltzq_s32",
      "full name": "uint32x4_t vcltzq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [32]",
      "function_cn": "[向量] 比较是否小于零寄存器 [32]"
    },
    {
      "name": "vcltz_s64",
      "full name": "uint64x1_t vcltz_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [64]",
      "function_cn": "[向量] 比较是否小于零寄存器 [64]"
    },
    {
      "name": "vcltzq_s64",
      "full name": "uint64x2_t vcltzq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[vector] cmlt [64]",
      "function_cn": "[向量] 比较是否小于零寄存器 [64]"
    },
    {
      "name": "vcltz_f32",
      "full name": "uint32x2_t vcltz_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmlt",
      "function_en": "[vector] fcmlt [32]",
      "function_cn": "[向量] 比较是否小于零寄存器 [32]"
    },
    {
      "name": "vcltzq_f32",
      "full name": "uint32x4_t vcltzq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmlt",
      "function_en": "[vector] fcmlt [32]",
      "function_cn": "[向量] 比较是否小于零寄存器 [32]"
    },
    {
      "name": "vcltz_f64",
      "full name": "uint64x1_t vcltz_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmlt",
      "function_en": "[vector] fcmlt [64]",
      "function_cn": "[向量] 比较是否小于零寄存器 [64]"
    },
    {
      "name": "vcltzq_f64",
      "full name": "uint64x2_t vcltzq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmlt",
      "function_en": "[vector] fcmlt [64]",
      "function_cn": "[向量] 比较是否小于零寄存器 [64]"
    },
    {
      "name": "vcltzd_s64",
      "full name": "uint64_t vcltzd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmlt",
      "function_en": "[scalar] cmlt [64]",
      "function_cn": "[标量] 比较是否小于零寄存器 [64]"
    },
    {
      "name": "vcltzs_f32",
      "full name": "uint32_t vcltzs_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmlt",
      "function_en": "[scalar] fcmlt [32]",
      "function_cn": "[标量] 比较是否小于零寄存器 [32]"
    },
    {
      "name": "vcltzd_f64",
      "full name": "uint64_t vcltzd_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcmlt",
      "function_en": "[scalar] fcmlt [64]",
      "function_cn": "[标量] 比较是否小于零寄存器 [64]"
    },
    {
      "name": "vcage_f32",
      "full name": "uint32x2_t vcage_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [32]",
      "function_cn": "[向量] 比较绝对值大于等于 [32]"
    },
    {
      "name": "vcageq_f32",
      "full name": "uint32x4_t vcageq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [32]",
      "function_cn": "[向量] 比较绝对值大于等于 [32]"
    },
    {
      "name": "vcage_f64",
      "full name": "uint64x1_t vcage_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [64]",
      "function_cn": "[向量] 比较绝对值大于等于 [64]"
    },
    {
      "name": "vcageq_f64",
      "full name": "uint64x2_t vcageq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [64]",
      "function_cn": "[向量] 比较绝对值大于等于 [64]"
    },
    {
      "name": "vcages_f32",
      "full name": "uint32_t vcages_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[scalar] facge [32]",
      "function_cn": "[标量] 比较绝对值大于等于 [32]"
    },
    {
      "name": "vcaged_f64",
      "full name": "uint64_t vcaged_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[scalar] facge [64]",
      "function_cn": "[标量] 比较绝对值大于等于 [64]"
    },
    {
      "name": "vcale_f32",
      "full name": "uint32x2_t vcale_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [32]",
      "function_cn": "[向量] 比较绝对值小于等于 [32]"
    },
    {
      "name": "vcaleq_f32",
      "full name": "uint32x4_t vcaleq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [32]",
      "function_cn": "[向量] 比较绝对值小于等于 [32]"
    },
    {
      "name": "vcale_f64",
      "full name": "uint64x1_t vcale_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [64]",
      "function_cn": "[向量] 比较绝对值小于等于 [64]"
    },
    {
      "name": "vcaleq_f64",
      "full name": "uint64x2_t vcaleq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[vector] facge [64]",
      "function_cn": "[向量] 比较绝对值小于等于 [64]"
    },
    {
      "name": "vcales_f32",
      "full name": "uint32_t vcales_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[scalar] facge [32]",
      "function_cn": "[标量] 比较绝对值小于等于 [32]"
    },
    {
      "name": "vcaled_f64",
      "full name": "uint64_t vcaled_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facge",
      "function_en": "[scalar] facge [64]",
      "function_cn": "[标量] 比较绝对值小于等于 [64]"
    },
    {
      "name": "vcagt_f32",
      "full name": "uint32x2_t vcagt_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [32]",
      "function_cn": "[向量] 比较绝对值大于 [32]"
    },
    {
      "name": "vcagtq_f32",
      "full name": "uint32x4_t vcagtq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [32]",
      "function_cn": "[向量] 比较绝对值大于 [32]"
    },
    {
      "name": "vcagt_f64",
      "full name": "uint64x1_t vcagt_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [64]",
      "function_cn": "[向量] 比较绝对值大于 [64]"
    },
    {
      "name": "vcagtq_f64",
      "full name": "uint64x2_t vcagtq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [64]",
      "function_cn": "[向量] 比较绝对值大于 [64]"
    },
    {
      "name": "vcagts_f32",
      "full name": "uint32_t vcagts_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[scalar] facgt [32]",
      "function_cn": "[标量] 比较绝对值大于 [32]"
    },
    {
      "name": "vcagtd_f64",
      "full name": "uint64_t vcagtd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[scalar] facgt [32]",
      "function_cn": "[标量] 比较绝对值大于 [32]"
    },
    {
      "name": "vcalt_f32",
      "full name": "uint32x2_t vcalt_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [32]",
      "function_cn": "[向量] 比较绝对值小于 [32]"
    },
    {
      "name": "vcaltq_f32",
      "full name": "uint32x4_t vcaltq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [32]",
      "function_cn": "[向量] 比较绝对值小于 [32]"
    },
    {
      "name": "vcalt_f64",
      "full name": "uint64x1_t vcalt_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [64]",
      "function_cn": "[向量] 比较绝对值小于 [64]"
    },
    {
      "name": "vcaltq_f64",
      "full name": "uint64x2_t vcaltq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[vector] facgt [64]",
      "function_cn": "[向量] 比较绝对值小于 [64]"
    },
    {
      "name": "vcalts_f32",
      "full name": "uint32_t vcalts_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[scalar] facgt [32]",
      "function_cn": "[标量] 比较绝对值小于 [32]"
    },
    {
      "name": "vcaltd_f64",
      "full name": "uint64_t vcaltd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "facgt",
      "function_en": "[scalar] facgt [64]",
      "function_cn": "[标量] 比较绝对值小于 [64]"
    },
    {
      "name": "vtst_s8",
      "full name": "uint8x8_t vtst_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [8]",
      "function_cn": "[向量] 按位比较测试位非零 [8]"
    },
    {
      "name": "vtstq_s8",
      "full name": "uint8x16_t vtstq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [8]",
      "function_cn": "[向量] 按位比较测试位非零 [8]"
    },
    {
      "name": "vtst_s16",
      "full name": "uint16x4_t vtst_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [16]",
      "function_cn": "[向量] 按位比较测试位非零 [16]"
    },
    {
      "name": "vtstq_s16",
      "full name": "uint16x8_t vtstq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [16]",
      "function_cn": "[向量] 按位比较测试位非零 [16]"
    },
    {
      "name": "vtst_s32",
      "full name": "uint32x2_t vtst_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [32]",
      "function_cn": "[向量] 按位比较测试位非零 [32]"
    },
    {
      "name": "vtstq_s32",
      "full name": "uint32x4_t vtstq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [32]",
      "function_cn": "[向量] 按位比较测试位非零 [32]"
    },
    {
      "name": "vtst_u8",
      "full name": "uint8x8_t vtst_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [8]",
      "function_cn": "[向量] 按位比较测试位非零 [8]"
    },
    {
      "name": "vtstq_u8",
      "full name": "uint8x16_t vtstq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [8]",
      "function_cn": "[向量] 按位比较测试位非零 [8]"
    },
    {
      "name": "vtst_u16",
      "full name": "uint16x4_t vtst_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [16]",
      "function_cn": "[向量] 按位比较测试位非零 [16]"
    },
    {
      "name": "vtstq_u16",
      "full name": "uint16x8_t vtstq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [16]",
      "function_cn": "[向量] 按位比较测试位非零 [16]"
    },
    {
      "name": "vtst_u32",
      "full name": "uint32x2_t vtst_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [32]",
      "function_cn": "[向量] 按位比较测试位非零 [32]"
    },
    {
      "name": "vtstq_u32",
      "full name": "uint32x4_t vtstq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [32]",
      "function_cn": "[向量] 按位比较测试位非零 [32]"
    },
    {
      "name": "vtst_p8",
      "full name": "uint8x8_t vtst_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [8]",
      "function_cn": "[向量] 按位比较测试位非零 [8]"
    },
    {
      "name": "vtstq_p8",
      "full name": "uint8x16_t vtstq_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [8]",
      "function_cn": "[向量] 按位比较测试位非零 [8]"
    },
    {
      "name": "vtst_s64",
      "full name": "uint64x1_t vtst_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [64]",
      "function_cn": "[向量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtstq_s64",
      "full name": "uint64x2_t vtstq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [64]",
      "function_cn": "[向量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtst_u64",
      "full name": "uint64x1_t vtst_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [64]",
      "function_cn": "[向量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtstq_u64",
      "full name": "uint64x2_t vtstq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [64]",
      "function_cn": "[向量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtst_p64",
      "full name": "uint64x1_t vtst_p64(poly64x1_t a, poly64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [64]",
      "function_cn": "[向量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtstq_p64",
      "full name": "uint64x2_t vtstq_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[vector] cmtst [64]",
      "function_cn": "[向量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtstd_s64",
      "full name": "uint64_t vtstd_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[scalar] cmtst [64]",
      "function_cn": "[标量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vtstd_u64",
      "full name": "uint64_t vtstd_u64(uint64_t a, uint64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cmtst",
      "function_en": "[scalar] cmtst [64]",
      "function_cn": "[标量] 按位比较测试位非零 [64]"
    },
    {
      "name": "vabd_s8",
      "full name": "int8x8_t vabd_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabd",
      "function_en": "[vector] sabd [8]",
      "function_cn": "[向量] 绝对差值 [8]"
    },
    {
      "name": "vabdq_s8",
      "full name": "int8x16_t vabdq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabd",
      "function_en": "[vector] sabd [8]",
      "function_cn": "[向量] 绝对差值 [8]"
    },
    {
      "name": "vabd_s16",
      "full name": "int16x4_t vabd_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabd",
      "function_en": "[vector] sabd [16]",
      "function_cn": "[向量] 绝对差值 [16]"
    },
    {
      "name": "vabdq_s16",
      "full name": "int16x8_t vabdq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabd",
      "function_en": "[vector] sabd [16]",
      "function_cn": "[向量] 绝对差值 [16]"
    },
    {
      "name": "vabd_s32",
      "full name": "int32x2_t vabd_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabd",
      "function_en": "[vector] sabd [32]",
      "function_cn": "[向量] 绝对差值 [32]"
    },
    {
      "name": "vabdq_s32",
      "full name": "int32x4_t vabdq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabd",
      "function_en": "[vector] sabd [32]",
      "function_cn": "[向量] 绝对差值 [32]"
    },
    {
      "name": "vabd_u8",
      "full name": "uint8x8_t vabd_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabd",
      "function_en": "[vector] uabd [8]",
      "function_cn": "[向量] 绝对差值 [8]"
    },
    {
      "name": "vabdq_u8",
      "full name": "uint8x16_t vabdq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabd",
      "function_en": "[vector] uabd [8]",
      "function_cn": "[向量] 绝对差值 [8]"
    },
    {
      "name": "vabd_u16",
      "full name": "uint16x4_t vabd_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabd",
      "function_en": "[vector] uabd [16]",
      "function_cn": "[向量] 绝对差值 [16]"
    },
    {
      "name": "vabdq_u16",
      "full name": "uint16x8_t vabdq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabd",
      "function_en": "[vector] uabd [16]",
      "function_cn": "[向量] 绝对差值 [16]"
    },
    {
      "name": "vabd_u32",
      "full name": "uint32x2_t vabd_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabd",
      "function_en": "[vector] uabd [32]",
      "function_cn": "[向量] 绝对差值 [32]"
    },
    {
      "name": "vabdq_u32",
      "full name": "uint32x4_t vabdq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabd",
      "function_en": "[vector] uabd [32]",
      "function_cn": "[向量] 绝对差值 [32]"
    },
    {
      "name": "vabd_f32",
      "full name": "float32x2_t vabd_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabd",
      "function_en": "[vector] fabd [32]",
      "function_cn": "[向量] 绝对差值 [32]"
    },
    {
      "name": "vabdq_f32",
      "full name": "float32x4_t vabdq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabd",
      "function_en": "[vector] fabd [32]",
      "function_cn": "[向量] 绝对差值 [32]"
    },
    {
      "name": "vabd_f64",
      "full name": "float64x1_t vabd_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabd",
      "function_en": "[vector] fabd [64]",
      "function_cn": "[向量] 绝对差值 [64]"
    },
    {
      "name": "vabdq_f64",
      "full name": "float64x2_t vabdq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabd",
      "function_en": "[vector] fabd [64]",
      "function_cn": "[向量] 绝对差值 [64]"
    },
    {
      "name": "vabds_f32",
      "full name": "float32_t vabds_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabd",
      "function_en": "[scalar] fabd [32]",
      "function_cn": "[标量] 绝对差值 [32]"
    },
    {
      "name": "vabdd_f64",
      "full name": "float64_t vabdd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabd",
      "function_en": "[scalar] fabd [64]",
      "function_cn": "[标量] 绝对差值 [64]"
    },
    {
      "name": "vabdl_s8",
      "full name": "int16x8_t vabdl_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabdl",
      "function_en": "[vector] sabdl [8]",
      "function_cn": "[向量] 长型绝对差值 [8]"
    },
    {
      "name": "vabdl_s16",
      "full name": "int32x4_t vabdl_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabdl",
      "function_en": "[vector] sabdl [16]",
      "function_cn": "[向量] 长型绝对差值 [16]"
    },
    {
      "name": "vabdl_s32",
      "full name": "int64x2_t vabdl_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabdl",
      "function_en": "[vector] sabdl [32]",
      "function_cn": "[向量] 长型绝对差值 [32]"
    },
    {
      "name": "vabdl_u8",
      "full name": "uint16x8_t vabdl_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabdl",
      "function_en": "[vector] uabdl [8]",
      "function_cn": "[向量] 长型绝对差值 [8]"
    },
    {
      "name": "vabdl_u16",
      "full name": "uint32x4_t vabdl_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabdl",
      "function_en": "[vector] uabdl [16]",
      "function_cn": "[向量] 长型绝对差值 [16]"
    },
    {
      "name": "vabdl_u32",
      "full name": "uint64x2_t vabdl_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabdl",
      "function_en": "[vector] uabdl [32]",
      "function_cn": "[向量] 长型绝对差值 [32]"
    },
    {
      "name": "vabdl_high_s8",
      "full name": "int16x8_t vabdl_high_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabdl2",
      "function_en": "[vector] sabdl2 [8]",
      "function_cn": "[向量] 长型绝对差值 [8]"
    },
    {
      "name": "vabdl_high_s16",
      "full name": "int32x4_t vabdl_high_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabdl2",
      "function_en": "[vector] sabdl2 [16]",
      "function_cn": "[向量] 长型绝对差值 [16]"
    },
    {
      "name": "vabdl_high_s32",
      "full name": "int64x2_t vabdl_high_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabdl2",
      "function_en": "[vector] sabdl2 [32]",
      "function_cn": "[向量] 长型绝对差值 [32]"
    },
    {
      "name": "vabdl_high_u8",
      "full name": "uint16x8_t vabdl_high_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabdl2",
      "function_en": "[vector] uabdl2 [8]",
      "function_cn": "[向量] 长型绝对差值 [8]"
    },
    {
      "name": "vabdl_high_u16",
      "full name": "uint32x4_t vabdl_high_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabdl2",
      "function_en": "[vector] uabdl2 [16]",
      "function_cn": "[向量] 长型绝对差值 [16]"
    },
    {
      "name": "vabdl_high_u32",
      "full name": "uint64x2_t vabdl_high_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabdl2",
      "function_en": "[vector] uabdl2 [32]",
      "function_cn": "[向量] 长型绝对差值 [32]"
    },
    {
      "name": "vaba_s8",
      "full name": "int8x8_t vaba_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saba",
      "function_en": "[vector] saba [8]",
      "function_cn": "[向量] 绝对差值再相加 [8]"
    },
    {
      "name": "vabaq_s8",
      "full name": "int8x16_t vabaq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saba",
      "function_en": "[vector] saba [8]",
      "function_cn": "[向量] 绝对差值再相加 [8]"
    },
    {
      "name": "vaba_s16",
      "full name": "int16x4_t vaba_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saba",
      "function_en": "[vector] saba [16]",
      "function_cn": "[向量] 绝对差值再相加 [16]"
    },
    {
      "name": "vabaq_s16",
      "full name": "int16x8_t vabaq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saba",
      "function_en": "[vector] saba [16]",
      "function_cn": "[向量] 绝对差值再相加 [16]"
    },
    {
      "name": "vaba_s32",
      "full name": "int32x2_t vaba_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saba",
      "function_en": "[vector] saba [32]",
      "function_cn": "[向量] 绝对差值再相加 [32]"
    },
    {
      "name": "vabaq_s32",
      "full name": "int32x4_t vabaq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saba",
      "function_en": "[vector] saba [32]",
      "function_cn": "[向量] 绝对差值再相加 [32]"
    },
    {
      "name": "vaba_u8",
      "full name": "uint8x8_t vaba_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaba",
      "function_en": "[vector] uaba [8]",
      "function_cn": "[向量] 绝对差值再相加 [8]"
    },
    {
      "name": "vabaq_u8",
      "full name": "uint8x16_t vabaq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaba",
      "function_en": "[vector] uaba [8]",
      "function_cn": "[向量] 绝对差值再相加 [8]"
    },
    {
      "name": "vaba_u16",
      "full name": "uint16x4_t vaba_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaba",
      "function_en": "[vector] uaba [16]",
      "function_cn": "[向量] 绝对差值再相加 [16]"
    },
    {
      "name": "vabaq_u16",
      "full name": "uint16x8_t vabaq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaba",
      "function_en": "[vector] uaba [16]",
      "function_cn": "[向量] 绝对差值再相加 [16]"
    },
    {
      "name": "vaba_u32",
      "full name": "uint32x2_t vaba_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaba",
      "function_en": "[vector] uaba [32]",
      "function_cn": "[向量] 绝对差值再相加 [32]"
    },
    {
      "name": "vabaq_u32",
      "full name": "uint32x4_t vabaq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaba",
      "function_en": "[vector] uaba [32]",
      "function_cn": "[向量] 绝对差值再相加 [32]"
    },
    {
      "name": "vabal_s8",
      "full name": "int16x8_t vabal_s8(int16x8_t a, int8x8_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabal",
      "function_en": "[vector] sabal [8]",
      "function_cn": "[向量] 长型绝对差值再相加 [8]"
    },
    {
      "name": "vabal_s16",
      "full name": "int32x4_t vabal_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabal",
      "function_en": "[vector] sabal [16]",
      "function_cn": "[向量] 长型绝对差值再相加 [16]"
    },
    {
      "name": "vabal_s32",
      "full name": "int64x2_t vabal_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabal",
      "function_en": "[vector] sabal [32]",
      "function_cn": "[向量] 长型绝对差值再相加 [32]"
    },
    {
      "name": "vabal_u8",
      "full name": "uint16x8_t vabal_u8(uint16x8_t a, uint8x8_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabal",
      "function_en": "[vector] uabal [8]",
      "function_cn": "[向量] 长型绝对差值再相加 [8]"
    },
    {
      "name": "vabal_u16",
      "full name": "uint32x4_t vabal_u16(uint32x4_t a, uint16x4_t b, uint16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabal",
      "function_en": "[vector] uabal [16]",
      "function_cn": "[向量] 长型绝对差值再相加 [16]"
    },
    {
      "name": "vabal_u32",
      "full name": "uint64x2_t vabal_u32(uint64x2_t a, uint32x2_t b, uint32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabal",
      "function_en": "[vector] uabal [32]",
      "function_cn": "[向量] 长型绝对差值再相加 [32]"
    },
    {
      "name": "vabal_high_s8",
      "full name": "int16x8_t vabal_high_s8(int16x8_t a, int8x16_t b, int8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabal2",
      "function_en": "[vector] sabal2 [8]",
      "function_cn": "[向量] 长型绝对差值再相加 [8]"
    },
    {
      "name": "vabal_high_s16",
      "full name": "int32x4_t vabal_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabal2",
      "function_en": "[vector] sabal2 [16]",
      "function_cn": "[向量] 长型绝对差值再相加 [16]"
    },
    {
      "name": "vabal_high_s32",
      "full name": "int64x2_t vabal_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sabal2",
      "function_en": "[vector] sabal2 [32]",
      "function_cn": "[向量] 长型绝对差值再相加 [32]"
    },
    {
      "name": "vabal_high_u8",
      "full name": "uint16x8_t vabal_high_u8(uint16x8_t a, uint8x16_t b, uint8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabal2",
      "function_en": "[vector] uabal2 [8]",
      "function_cn": "[向量] 长型绝对差值再相加 [8]"
    },
    {
      "name": "vabal_high_u16",
      "full name": "uint32x4_t vabal_high_u16(uint32x4_t a, uint16x8_t b, uint16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabal2",
      "function_en": "[vector] uabal2 [16]",
      "function_cn": "[向量] 长型绝对差值再相加 [16]"
    },
    {
      "name": "vabal_high_u32",
      "full name": "uint64x2_t vabal_high_u32(uint64x2_t a, uint32x4_t b, uint32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uabal2",
      "function_en": "[vector] uabal2 [32]",
      "function_cn": "[向量] 长型绝对差值再相加 [32]"
    },
    {
      "name": "vmax_s8",
      "full name": "int8x8_t vmax_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smax",
      "function_en": "[vector] smax [8]",
      "function_cn": "[向量] 求最大值 [8]"
    },
    {
      "name": "vmaxq_s8",
      "full name": "int8x16_t vmaxq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_max_epi8",
      "Intel Asm": "pmaxsb",
      "Arm Asm": "smax",
      "function_en": "[vector] smax [8]",
      "function_cn": "[向量] 求最大值 [8]"
    },
    {
      "name": "vmax_s16",
      "full name": "int16x4_t vmax_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_max_pi16",
      "Intel Asm": "pmaxsw",
      "Arm Asm": "smax",
      "function_en": "[vector] smax [16]",
      "function_cn": "[向量] 求最大值 [16]"
    },
    {
      "name": "vmaxq_s16",
      "full name": "int16x8_t vmaxq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_max_epi16",
      "Intel Asm": "pmaxsw",
      "Arm Asm": "smax",
      "function_en": "[vector] smax [16]",
      "function_cn": "[向量] 求最大值 [16]"
    },
    {
      "name": "vmax_s32",
      "full name": "int32x2_t vmax_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smax",
      "function_en": "[vector] smax [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmaxq_s32",
      "full name": "int32x4_t vmaxq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_max_epi32",
      "Intel Asm": "pmaxsd",
      "Arm Asm": "smax",
      "function_en": "[vector] smax [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmax_u8",
      "full name": "uint8x8_t vmax_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "_mm_max_pu8",
      "Intel Asm": "pmaxub",
      "Arm Asm": "umax",
      "function_en": "[vector] umax [8]",
      "function_cn": "[向量] 求最大值 [8]"
    },
    {
      "name": "vmaxq_u8",
      "full name": "uint8x16_t vmaxq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "_mm_max_epu8",
      "Intel Asm": "pmaxub",
      "Arm Asm": "umax",
      "function_en": "[vector] umax [8]",
      "function_cn": "[向量] 求最大值 [8]"
    },
    {
      "name": "vmax_u16",
      "full name": "uint16x4_t vmax_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umax",
      "function_en": "[vector] umax [16]",
      "function_cn": "[向量] 求最大值 [16]"
    },
    {
      "name": "vmaxq_u16",
      "full name": "uint16x8_t vmaxq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "_mm_max_epu16",
      "Intel Asm": "pmaxuw",
      "Arm Asm": "umax",
      "function_en": "[vector] umax [16]",
      "function_cn": "[向量] 求最大值 [16]"
    },
    {
      "name": "vmax_u32",
      "full name": "uint32x2_t vmax_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umax",
      "function_en": "[vector] umax [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmaxq_u32",
      "full name": "uint32x4_t vmaxq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "_mm_max_epu32",
      "Intel Asm": "pmaxud",
      "Arm Asm": "umax",
      "function_en": "[vector] umax [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmax_f32",
      "full name": "float32x2_t vmax_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmax",
      "function_en": "[vector] fmax [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmaxq_f32",
      "full name": "float32x4_t vmaxq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_max_ps",
      "Intel Asm": "maxps",
      "Arm Asm": "fmax",
      "function_en": "[vector] fmax [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmax_f64",
      "full name": "float64x1_t vmax_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmax",
      "function_en": "[vector] fmax [64]",
      "function_cn": "[向量] 求最大值 [64]"
    },
    {
      "name": "vmaxq_f64",
      "full name": "float64x2_t vmaxq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_max_pd",
      "Intel Asm": "maxpd",
      "Arm Asm": "fmax",
      "function_en": "[vector] fmax [64]",
      "function_cn": "[向量] 求最大值 [64]"
    },
    {
      "name": "vmin_s8",
      "full name": "int8x8_t vmin_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smin",
      "function_en": "[vector] smin [8]",
      "function_cn": "[向量] 求最小值 [8]"
    },
    {
      "name": "vminq_s8",
      "full name": "int8x16_t vminq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_min_epi8",
      "Intel Asm": "pminsb",
      "Arm Asm": "smin",
      "function_en": "[vector] smin [8]",
      "function_cn": "[向量] 求最小值 [8]"
    },
    {
      "name": "vmin_s16",
      "full name": "int16x4_t vmin_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_min_pi16",
      "Intel Asm": "pminsw",
      "Arm Asm": "smin",
      "function_en": "[vector] smin [16]",
      "function_cn": "[向量] 求最小值 [16]"
    },
    {
      "name": "vminq_s16",
      "full name": "int16x8_t vminq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_min_epi16",
      "Intel Asm": "pminsw",
      "Arm Asm": "smin",
      "function_en": "[vector] smin [16]",
      "function_cn": "[向量] 求最小值 [16]"
    },
    {
      "name": "vmin_s32",
      "full name": "int32x2_t vmin_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smin",
      "function_en": "[vector] smin [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vminq_s32",
      "full name": "int32x4_t vminq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_min_epi32",
      "Intel Asm": "pminsd",
      "Arm Asm": "smin",
      "function_en": "[vector] smin [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vmin_u8",
      "full name": "uint8x8_t vmin_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "_mm_min_pu8",
      "Intel Asm": "pminub",
      "Arm Asm": "umin",
      "function_en": "[vector] umin [8]",
      "function_cn": "[向量] 求最小值 [8]"
    },
    {
      "name": "vminq_u8",
      "full name": "uint8x16_t vminq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "_mm_min_epu8",
      "Intel Asm": "pminub",
      "Arm Asm": "umin",
      "function_en": "[vector] umin [8]",
      "function_cn": "[向量] 求最小值 [8]"
    },
    {
      "name": "vmin_u16",
      "full name": "uint16x4_t vmin_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umin",
      "function_en": "[vector] umin [16]",
      "function_cn": "[向量] 求最小值 [16]"
    },
    {
      "name": "vminq_u16",
      "full name": "uint16x8_t vminq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "_mm_min_epu16",
      "Intel Asm": "pminuw",
      "Arm Asm": "umin",
      "function_en": "[vector] umin [16]",
      "function_cn": "[向量] 求最小值 [16]"
    },
    {
      "name": "vmin_u32",
      "full name": "uint32x2_t vmin_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umin",
      "function_en": "[vector] umin [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vminq_u32",
      "full name": "uint32x4_t vminq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "_mm_min_epu32",
      "Intel Asm": "pminud",
      "Arm Asm": "umin",
      "function_en": "[vector] umin [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vmin_f32",
      "full name": "float32x2_t vmin_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmin",
      "function_en": "[vector] fmin [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vminq_f32",
      "full name": "float32x4_t vminq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_min_ps",
      "Intel Asm": "minps",
      "Arm Asm": "fmin",
      "function_en": "[vector] fmin [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vmin_f64",
      "full name": "float64x1_t vmin_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmin",
      "function_en": "[vector] fmin [64]",
      "function_cn": "[向量] 求最小值 [64]"
    },
    {
      "name": "vminq_f64",
      "full name": "float64x2_t vminq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_min_pd",
      "Intel Asm": "minpd",
      "Arm Asm": "fmin",
      "function_en": "[vector] fmin [64]",
      "function_cn": "[向量] 求最小值 [64]"
    },
    {
      "name": "vmaxnm_f32",
      "full name": "float32x2_t vmaxnm_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnm",
      "function_en": "[vector] fmaxnm [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmaxnmq_f32",
      "full name": "float32x4_t vmaxnmq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_max_pd",
      "Intel Asm": "maxps",
      "Arm Asm": "fmaxnm",
      "function_en": "[vector] fmaxnm [32]",
      "function_cn": "[向量] 求最大值 [32]"
    },
    {
      "name": "vmaxnm_f64",
      "full name": "float64x1_t vmaxnm_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnm",
      "function_en": "[vector] fmaxnm [64]",
      "function_cn": "[向量] 求最大值 [64]"
    },
    {
      "name": "vmaxnmq_f64",
      "full name": "float64x2_t vmaxnmq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_max_pd",
      "Intel Asm": "maxpd",
      "Arm Asm": "fmaxnm",
      "function_en": "[vector] fmaxnm [64]",
      "function_cn": "[向量] 求最大值 [64]"
    },
    {
      "name": "vminnm_f32",
      "full name": "float32x2_t vminnm_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnm",
      "function_en": "[vector] fminnm [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vminnmq_f32",
      "full name": "float32x4_t vminnmq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_min_ps",
      "Intel Asm": "minps",
      "Arm Asm": "fminnm",
      "function_en": "[vector] fminnm [32]",
      "function_cn": "[向量] 求最小值 [32]"
    },
    {
      "name": "vminnm_f64",
      "full name": "float64x1_t vminnm_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnm",
      "function_en": "[vector] fminnm [64]",
      "function_cn": "[向量] 求最小值 [64]"
    },
    {
      "name": "vminnmq_f64",
      "full name": "float64x2_t vminnmq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_min_pd",
      "Intel Asm": "minpd",
      "Arm Asm": "fminnm",
      "function_en": "[vector] fminnm [64]",
      "function_cn": "[向量] 求最小值 [64]"
    },
    {
      "name": "vshl_s8",
      "full name": "int8x8_t vshl_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshlq_s8",
      "full name": "int8x16_t vshlq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshl_s16",
      "full name": "int16x4_t vshl_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshlq_s16",
      "full name": "int16x8_t vshlq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshl_s32",
      "full name": "int32x2_t vshl_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshlq_s32",
      "full name": "int32x4_t vshlq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshl_s64",
      "full name": "int64x1_t vshl_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshlq_s64",
      "full name": "int64x2_t vshlq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[vector] sshl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshl_u8",
      "full name": "uint8x8_t vshl_u8(uint8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshlq_u8",
      "full name": "uint8x16_t vshlq_u8(uint8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshl_u16",
      "full name": "uint16x4_t vshl_u16(uint16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshlq_u16",
      "full name": "uint16x8_t vshlq_u16(uint16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshl_u32",
      "full name": "uint32x2_t vshl_u32(uint32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshlq_u32",
      "full name": "uint32x4_t vshlq_u32(uint32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshl_u64",
      "full name": "uint64x1_t vshl_u64(uint64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshlq_u64",
      "full name": "uint64x2_t vshlq_u64(uint64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[vector] ushl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshld_s64",
      "full name": "int64_t vshld_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshl",
      "function_en": "[scalar] sshl [64]",
      "function_cn": "[标量] 左移 [64]"
    },
    {
      "name": "vshld_u64",
      "full name": "uint64_t vshld_u64(uint64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushl",
      "function_en": "[scalar] ushl [64]",
      "function_cn": "[标量] 左移 [64]"
    },
    {
      "name": "vqshl_s8",
      "full name": "int8x8_t vqshl_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshlq_s8",
      "full name": "int8x16_t vqshlq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshl_s16",
      "full name": "int16x4_t vqshl_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshlq_s16",
      "full name": "int16x8_t vqshlq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshl_s32",
      "full name": "int32x2_t vqshl_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshlq_s32",
      "full name": "int32x4_t vqshlq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshl_s64",
      "full name": "int64x1_t vqshl_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshlq_s64",
      "full name": "int64x2_t vqshlq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshl_u8",
      "full name": "uint8x8_t vqshl_u8(uint8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshlq_u8",
      "full name": "uint8x16_t vqshlq_u8(uint8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshl_u16",
      "full name": "uint16x4_t vqshl_u16(uint16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshlq_u16",
      "full name": "uint16x8_t vqshlq_u16(uint16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshl_u32",
      "full name": "uint32x2_t vqshl_u32(uint32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshlq_u32",
      "full name": "uint32x4_t vqshlq_u32(uint32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshl_u64",
      "full name": "uint64x1_t vqshl_u64(uint64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshlq_u64",
      "full name": "uint64x2_t vqshlq_u64(uint64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshlb_s8",
      "full name": "int8_t vqshlb_s8(int8_t a, int8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [8]",
      "function_cn": "[标量] 饱和左移 [8]"
    },
    {
      "name": "vqshlh_s16",
      "full name": "int16_t vqshlh_s16(int16_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [16]",
      "function_cn": "[标量] 饱和左移 [16]"
    },
    {
      "name": "vqshls_s32",
      "full name": "int32_t vqshls_s32(int32_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [32]",
      "function_cn": "[标量] 饱和左移 [32]"
    },
    {
      "name": "vqshld_s64",
      "full name": "int64_t vqshld_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [64]",
      "function_cn": "[标量] 饱和左移 [64]"
    },
    {
      "name": "vqshlb_u8",
      "full name": "uint8_t vqshlb_u8(uint8_t a, int8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [8]",
      "function_cn": "[标量] 饱和左移 [8]"
    },
    {
      "name": "vqshlh_u16",
      "full name": "uint16_t vqshlh_u16(uint16_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [16]",
      "function_cn": "[标量] 饱和左移 [16]"
    },
    {
      "name": "vqshls_u32",
      "full name": "uint32_t vqshls_u32(uint32_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [32]",
      "function_cn": "[标量] 饱和左移 [32]"
    },
    {
      "name": "vqshld_u64",
      "full name": "uint64_t vqshld_u64(uint64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [64]",
      "function_cn": "[标量] 饱和左移 [64]"
    },
    {
      "name": "vrshl_s8",
      "full name": "int8x8_t vrshl_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [8]",
      "function_cn": "[向量] 舍入左移 [8]"
    },
    {
      "name": "vrshlq_s8",
      "full name": "int8x16_t vrshlq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [8]",
      "function_cn": "[向量] 舍入左移 [8]"
    },
    {
      "name": "vrshl_s16",
      "full name": "int16x4_t vrshl_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [16]",
      "function_cn": "[向量] 舍入左移 [16]"
    },
    {
      "name": "vrshlq_s16",
      "full name": "int16x8_t vrshlq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [16]",
      "function_cn": "[向量] 舍入左移 [16]"
    },
    {
      "name": "vrshl_s32",
      "full name": "int32x2_t vrshl_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [32]",
      "function_cn": "[向量] 舍入左移 [32]"
    },
    {
      "name": "vrshlq_s32",
      "full name": "int32x4_t vrshlq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [32]",
      "function_cn": "[向量] 舍入左移 [32]"
    },
    {
      "name": "vrshl_s64",
      "full name": "int64x1_t vrshl_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [64]",
      "function_cn": "[向量] 舍入左移 [64]"
    },
    {
      "name": "vrshlq_s64",
      "full name": "int64x2_t vrshlq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[vector] srshl [64]",
      "function_cn": "[向量] 舍入左移 [64]"
    },
    {
      "name": "vrshl_u8",
      "full name": "uint8x8_t vrshl_u8(uint8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [8]",
      "function_cn": "[向量] 舍入左移 [8]"
    },
    {
      "name": "vrshlq_u8",
      "full name": "uint8x16_t vrshlq_u8(uint8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [8]",
      "function_cn": "[向量] 舍入左移 [8]"
    },
    {
      "name": "vrshl_u16",
      "full name": "uint16x4_t vrshl_u16(uint16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [16]",
      "function_cn": "[向量] 舍入左移 [16]"
    },
    {
      "name": "vrshlq_u16",
      "full name": "uint16x8_t vrshlq_u16(uint16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [16]",
      "function_cn": "[向量] 舍入左移 [16]"
    },
    {
      "name": "vrshl_u32",
      "full name": "uint32x2_t vrshl_u32(uint32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [32]",
      "function_cn": "[向量] 舍入左移 [32]"
    },
    {
      "name": "vrshlq_u32",
      "full name": "uint32x4_t vrshlq_u32(uint32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [32]",
      "function_cn": "[向量] 舍入左移 [32]"
    },
    {
      "name": "vrshl_u64",
      "full name": "uint64x1_t vrshl_u64(uint64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [64]",
      "function_cn": "[向量] 舍入左移 [64]"
    },
    {
      "name": "vrshlq_u64",
      "full name": "uint64x2_t vrshlq_u64(uint64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[vector] urshl [64]",
      "function_cn": "[向量] 舍入左移 [64]"
    },
    {
      "name": "vrshld_s64",
      "full name": "int64_t vrshld_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshl",
      "function_en": "[scalar] srshl [64]",
      "function_cn": "[标量] 舍入左移 [64]"
    },
    {
      "name": "vrshld_u64",
      "full name": "uint64_t vrshld_u64(uint64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshl",
      "function_en": "[scalar] urshl [64]",
      "function_cn": "[标量] 舍入左移 [64]"
    },
    {
      "name": "vqrshl_s8",
      "full name": "int8x8_t vqrshl_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [8]",
      "function_cn": "[向量] 饱和舍入左移 [8]"
    },
    {
      "name": "vqrshlq_s8",
      "full name": "int8x16_t vqrshlq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [8]",
      "function_cn": "[向量] 饱和舍入左移 [8]"
    },
    {
      "name": "vqrshl_s16",
      "full name": "int16x4_t vqrshl_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [16]",
      "function_cn": "[向量] 饱和舍入左移 [16]"
    },
    {
      "name": "vqrshlq_s16",
      "full name": "int16x8_t vqrshlq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [16]",
      "function_cn": "[向量] 饱和舍入左移 [16]"
    },
    {
      "name": "vqrshl_s32",
      "full name": "int32x2_t vqrshl_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [32]",
      "function_cn": "[向量] 饱和舍入左移 [32]"
    },
    {
      "name": "vqrshlq_s32",
      "full name": "int32x4_t vqrshlq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [32]",
      "function_cn": "[向量] 饱和舍入左移 [32]"
    },
    {
      "name": "vqrshl_s64",
      "full name": "int64x1_t vqrshl_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [64]",
      "function_cn": "[向量] 饱和舍入左移 [64]"
    },
    {
      "name": "vqrshlq_s64",
      "full name": "int64x2_t vqrshlq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[vector] sqrshl [64]",
      "function_cn": "[向量] 饱和舍入左移 [64]"
    },
    {
      "name": "vqrshl_u8",
      "full name": "uint8x8_t vqrshl_u8(uint8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [8]",
      "function_cn": "[向量] 饱和舍入左移 [8]"
    },
    {
      "name": "vqrshlq_u8",
      "full name": "uint8x16_t vqrshlq_u8(uint8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [8]",
      "function_cn": "[向量] 饱和舍入左移 [8]"
    },
    {
      "name": "vqrshl_u16",
      "full name": "uint16x4_t vqrshl_u16(uint16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [16]",
      "function_cn": "[向量] 饱和舍入左移 [16]"
    },
    {
      "name": "vqrshlq_u16",
      "full name": "uint16x8_t vqrshlq_u16(uint16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [16]",
      "function_cn": "[向量] 饱和舍入左移 [16]"
    },
    {
      "name": "vqrshl_u32",
      "full name": "uint32x2_t vqrshl_u32(uint32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [32]",
      "function_cn": "[向量] 饱和舍入左移 [32]"
    },
    {
      "name": "vqrshlq_u32",
      "full name": "uint32x4_t vqrshlq_u32(uint32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [32]",
      "function_cn": "[向量] 饱和舍入左移 [32]"
    },
    {
      "name": "vqrshl_u64",
      "full name": "uint64x1_t vqrshl_u64(uint64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [64]",
      "function_cn": "[向量] 饱和舍入左移 [64]"
    },
    {
      "name": "vqrshlq_u64",
      "full name": "uint64x2_t vqrshlq_u64(uint64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[vector] uqrshl [64]",
      "function_cn": "[向量] 饱和舍入左移 [64]"
    },
    {
      "name": "vqrshlb_s8",
      "full name": "int8_t vqrshlb_s8(int8_t a, int8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[scalar] sqrshl [8]",
      "function_cn": "[标量] 饱和舍入左移 [8]"
    },
    {
      "name": "vqrshlh_s16",
      "full name": "int16_t vqrshlh_s16(int16_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[scalar] sqrshl [16]",
      "function_cn": "[标量] 饱和舍入左移 [16]"
    },
    {
      "name": "vqrshls_s32",
      "full name": "int32_t vqrshls_s32(int32_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[scalar] sqrshl [32]",
      "function_cn": "[标量] 饱和舍入左移 [32]"
    },
    {
      "name": "vqrshld_s64",
      "full name": "int64_t vqrshld_s64(int64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshl",
      "function_en": "[scalar] sqrshl [64]",
      "function_cn": "[标量] 饱和舍入左移 [64]"
    },
    {
      "name": "vqrshlb_u8",
      "full name": "uint8_t vqrshlb_u8(uint8_t a, int8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[scalar] uqrshl [8]",
      "function_cn": "[标量] 饱和舍入左移 [8]"
    },
    {
      "name": "vqrshlh_u16",
      "full name": "uint16_t vqrshlh_u16(uint16_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[scalar] uqrshl [16]",
      "function_cn": "[标量] 饱和舍入左移 [16]"
    },
    {
      "name": "vqrshls_u32",
      "full name": "uint32_t vqrshls_u32(uint32_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[scalar] uqrshl [32]",
      "function_cn": "[标量] 饱和舍入左移 [32]"
    },
    {
      "name": "vqrshld_u64",
      "full name": "uint64_t vqrshld_u64(uint64_t a, int64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshl",
      "function_en": "[scalar] uqrshl [64]",
      "function_cn": "[标量] 饱和舍入左移 [64]"
    },
    {
      "name": "vshr_n_s8",
      "full name": "int8x8_t vshr_n_s8(int8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [8]",
      "function_cn": "[向量] 右移 [8]"
    },
    {
      "name": "vshrq_n_s8",
      "full name": "int8x16_t vshrq_n_s8(int8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [8]",
      "function_cn": "[向量] 右移 [8]"
    },
    {
      "name": "vshr_n_s16",
      "full name": "int16x4_t vshr_n_s16(int16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [16]",
      "function_cn": "[向量] 右移 [16]"
    },
    {
      "name": "vshrq_n_s16",
      "full name": "int16x8_t vshrq_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [16]",
      "function_cn": "[向量] 右移 [16]"
    },
    {
      "name": "vshr_n_s32",
      "full name": "int32x2_t vshr_n_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [32]",
      "function_cn": "[向量] 右移 [32]"
    },
    {
      "name": "vshrq_n_s32",
      "full name": "int32x4_t vshrq_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [32]",
      "function_cn": "[向量] 右移 [32]"
    },
    {
      "name": "vshr_n_s64",
      "full name": "int64x1_t vshr_n_s64(int64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [64]",
      "function_cn": "[向量] 右移 [64]"
    },
    {
      "name": "vshrq_n_s64",
      "full name": "int64x2_t vshrq_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[vector] sshr [64]",
      "function_cn": "[向量] 右移 [64]"
    },
    {
      "name": "vshr_n_u8",
      "full name": "uint8x8_t vshr_n_u8(uint8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [8]",
      "function_cn": "[向量] 右移 [8]"
    },
    {
      "name": "vshrq_n_u8",
      "full name": "uint8x16_t vshrq_n_u8(uint8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [8]",
      "function_cn": "[向量] 右移 [8]"
    },
    {
      "name": "vshr_n_u16",
      "full name": "uint16x4_t vshr_n_u16(uint16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [16]",
      "function_cn": "[向量] 右移 [16]"
    },
    {
      "name": "vshrq_n_u16",
      "full name": "uint16x8_t vshrq_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [16]",
      "function_cn": "[向量] 右移 [16]"
    },
    {
      "name": "vshr_n_u32",
      "full name": "uint32x2_t vshr_n_u32(uint32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [32]",
      "function_cn": "[向量] 右移 [32]"
    },
    {
      "name": "vshrq_n_u32",
      "full name": "uint32x4_t vshrq_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [32]",
      "function_cn": "[向量] 右移 [32]"
    },
    {
      "name": "vshr_n_u64",
      "full name": "uint64x1_t vshr_n_u64(uint64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [64]",
      "function_cn": "[向量] 右移 [64]"
    },
    {
      "name": "vshrq_n_u64",
      "full name": "uint64x2_t vshrq_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[vector] ushr [64]",
      "function_cn": "[向量] 右移 [64]"
    },
    {
      "name": "vshrd_n_s64",
      "full name": "int64_t vshrd_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshr",
      "function_en": "[scalar] sshr [64]",
      "function_cn": "[标量] 右移 [64]"
    },
    {
      "name": "vshrd_n_u64",
      "full name": "uint64_t vshrd_n_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushr",
      "function_en": "[scalar] ushr [64]",
      "function_cn": "[标量] 右移 [64]"
    },
    {
      "name": "vshl_n_s8",
      "full name": "int8x8_t vshl_n_s8(int8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshlq_n_s8",
      "full name": "int8x16_t vshlq_n_s8(int8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshl_n_s16",
      "full name": "int16x4_t vshl_n_s16(int16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshlq_n_s16",
      "full name": "int16x8_t vshlq_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshl_n_s32",
      "full name": "int32x2_t vshl_n_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshlq_n_s32",
      "full name": "int32x4_t vshlq_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshl_n_s64",
      "full name": "int64x1_t vshl_n_s64(int64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshlq_n_s64",
      "full name": "int64x2_t vshlq_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshl_n_u8",
      "full name": "uint8x8_t vshl_n_u8(uint8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshlq_n_u8",
      "full name": "uint8x16_t vshlq_n_u8(uint8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [8]",
      "function_cn": "[向量] 左移 [8]"
    },
    {
      "name": "vshl_n_u16",
      "full name": "uint16x4_t vshl_n_u16(uint16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshlq_n_u16",
      "full name": "uint16x8_t vshlq_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [16]",
      "function_cn": "[向量] 左移 [16]"
    },
    {
      "name": "vshl_n_u32",
      "full name": "uint32x2_t vshl_n_u32(uint32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshlq_n_u32",
      "full name": "uint32x4_t vshlq_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [32]",
      "function_cn": "[向量] 左移 [32]"
    },
    {
      "name": "vshl_n_u64",
      "full name": "uint64x1_t vshl_n_u64(uint64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshlq_n_u64",
      "full name": "uint64x2_t vshlq_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[vector] shl [64]",
      "function_cn": "[向量] 左移 [64]"
    },
    {
      "name": "vshld_n_s64",
      "full name": "int64_t vshld_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[scalar] shl [64]",
      "function_cn": "[标量] 左移 [64]"
    },
    {
      "name": "vshld_n_u64",
      "full name": "uint64_t vshld_n_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shl",
      "function_en": "[scalar] shl [64]",
      "function_cn": "[标量] 左移 [64]"
    },
    {
      "name": "vrshr_n_s8",
      "full name": "int8x8_t vrshr_n_s8(int8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [8]",
      "function_cn": "[向量] 舍入右移 [8]"
    },
    {
      "name": "vrshrq_n_s8",
      "full name": "int8x16_t vrshrq_n_s8(int8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [8]",
      "function_cn": "[向量] 舍入右移 [8]"
    },
    {
      "name": "vrshr_n_s16",
      "full name": "int16x4_t vrshr_n_s16(int16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [16]",
      "function_cn": "[向量] 舍入右移 [16]"
    },
    {
      "name": "vrshrq_n_s16",
      "full name": "int16x8_t vrshrq_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [16]",
      "function_cn": "[向量] 舍入右移 [16]"
    },
    {
      "name": "vrshr_n_s32",
      "full name": "int32x2_t vrshr_n_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [32]",
      "function_cn": "[向量] 舍入右移 [32]"
    },
    {
      "name": "vrshrq_n_s32",
      "full name": "int32x4_t vrshrq_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [32]",
      "function_cn": "[向量] 舍入右移 [32]"
    },
    {
      "name": "vrshr_n_s64",
      "full name": "int64x1_t vrshr_n_s64(int64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [64]",
      "function_cn": "[向量] 舍入右移 [64]"
    },
    {
      "name": "vrshrq_n_s64",
      "full name": "int64x2_t vrshrq_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[vector] srshr [64]",
      "function_cn": "[向量] 舍入右移 [64]"
    },
    {
      "name": "vrshr_n_u8",
      "full name": "uint8x8_t vrshr_n_u8(uint8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [8]",
      "function_cn": "[向量] 舍入右移 [8]"
    },
    {
      "name": "vrshrq_n_u8",
      "full name": "uint8x16_t vrshrq_n_u8(uint8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [8]",
      "function_cn": "[向量] 舍入右移 [8]"
    },
    {
      "name": "vrshr_n_u16",
      "full name": "uint16x4_t vrshr_n_u16(uint16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [16]",
      "function_cn": "[向量] 舍入右移 [16]"
    },
    {
      "name": "vrshrq_n_u16",
      "full name": "uint16x8_t vrshrq_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [16]",
      "function_cn": "[向量] 舍入右移 [16]"
    },
    {
      "name": "vrshr_n_u32",
      "full name": "uint32x2_t vrshr_n_u32(uint32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [32]",
      "function_cn": "[向量] 舍入右移 [32]"
    },
    {
      "name": "vrshrq_n_u32",
      "full name": "uint32x4_t vrshrq_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [32]",
      "function_cn": "[向量] 舍入右移 [32]"
    },
    {
      "name": "vrshr_n_u64",
      "full name": "uint64x1_t vrshr_n_u64(uint64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [64]",
      "function_cn": "[向量] 舍入右移 [64]"
    },
    {
      "name": "vrshrq_n_u64",
      "full name": "uint64x2_t vrshrq_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[vector] urshr [64]",
      "function_cn": "[向量] 舍入右移 [64]"
    },
    {
      "name": "vrshrd_n_s64",
      "full name": "int64_t vrshrd_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srshr",
      "function_en": "[scalar] srshr [64]",
      "function_cn": "[标量] 舍入右移 [64]"
    },
    {
      "name": "vrshrd_n_u64",
      "full name": "uint64_t vrshrd_n_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urshr",
      "function_en": "[scalar] urshr [64]",
      "function_cn": "[标量] 舍入右移 [64]"
    },
    {
      "name": "vsra_n_s8",
      "full name": "int8x8_t vsra_n_s8(int8x8_t a, int8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [8]",
      "function_cn": "[向量] 右移相加 [8]"
    },
    {
      "name": "vsraq_n_s8",
      "full name": "int8x16_t vsraq_n_s8(int8x16_t a, int8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [8]",
      "function_cn": "[向量] 右移相加 [8]"
    },
    {
      "name": "vsra_n_s16",
      "full name": "int16x4_t vsra_n_s16(int16x4_t a, int16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [16]",
      "function_cn": "[向量] 右移相加 [16]"
    },
    {
      "name": "vsraq_n_s16",
      "full name": "int16x8_t vsraq_n_s16(int16x8_t a, int16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [16]",
      "function_cn": "[向量] 右移相加 [16]"
    },
    {
      "name": "vsra_n_s32",
      "full name": "int32x2_t vsra_n_s32(int32x2_t a, int32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [32]",
      "function_cn": "[向量] 右移相加 [32]"
    },
    {
      "name": "vsraq_n_s32",
      "full name": "int32x4_t vsraq_n_s32(int32x4_t a, int32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [32]",
      "function_cn": "[向量] 右移相加 [32]"
    },
    {
      "name": "vsra_n_s64",
      "full name": "int64x1_t vsra_n_s64(int64x1_t a, int64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [64]",
      "function_cn": "[向量] 右移相加 [64]"
    },
    {
      "name": "vsraq_n_s64",
      "full name": "int64x2_t vsraq_n_s64(int64x2_t a, int64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[vector] ssra [64]",
      "function_cn": "[向量] 右移相加 [64]"
    },
    {
      "name": "vsra_n_u8",
      "full name": "uint8x8_t vsra_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [8]",
      "function_cn": "[向量] 右移相加 [8]"
    },
    {
      "name": "vsraq_n_u8",
      "full name": "uint8x16_t vsraq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [8]",
      "function_cn": "[向量] 右移相加 [8]"
    },
    {
      "name": "vsra_n_u16",
      "full name": "uint16x4_t vsra_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [16]",
      "function_cn": "[向量] 右移相加 [16]"
    },
    {
      "name": "vsraq_n_u16",
      "full name": "uint16x8_t vsraq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [16]",
      "function_cn": "[向量] 右移相加 [16]"
    },
    {
      "name": "vsra_n_u32",
      "full name": "uint32x2_t vsra_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [32]",
      "function_cn": "[向量] 右移相加 [32]"
    },
    {
      "name": "vsraq_n_u32",
      "full name": "uint32x4_t vsraq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [32]",
      "function_cn": "[向量] 右移相加 [32]"
    },
    {
      "name": "vsra_n_u64",
      "full name": "uint64x1_t vsra_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [64]",
      "function_cn": "[向量] 右移相加 [64]"
    },
    {
      "name": "vsraq_n_u64",
      "full name": "uint64x2_t vsraq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[vector] usra [64]",
      "function_cn": "[向量] 右移相加 [64]"
    },
    {
      "name": "vsrad_n_s64",
      "full name": "int64_t vsrad_n_s64(int64_t a, int64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ssra",
      "function_en": "[scalar] ssra [64]",
      "function_cn": "[标量] 右移相加 [64]"
    },
    {
      "name": "vsrad_n_u64",
      "full name": "uint64_t vsrad_n_u64(uint64_t a, uint64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "usra",
      "function_en": "[scalar] usra [64]",
      "function_cn": "[标量] 右移相加 [64]"
    },
    {
      "name": "vrsra_n_s8",
      "full name": "int8x8_t vrsra_n_s8(int8x8_t a, int8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [8]",
      "function_cn": "[向量] 舍入右移相加 [8]"
    },
    {
      "name": "vrsraq_n_s8",
      "full name": "int8x16_t vrsraq_n_s8(int8x16_t a, int8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [8]",
      "function_cn": "[向量] 舍入右移相加 [8]"
    },
    {
      "name": "vrsra_n_s16",
      "full name": "int16x4_t vrsra_n_s16(int16x4_t a, int16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [8]",
      "function_cn": "[向量] 舍入右移相加 [8]"
    },
    {
      "name": "vrsraq_n_s16",
      "full name": "int16x8_t vrsraq_n_s16(int16x8_t a, int16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [16]",
      "function_cn": "[向量] 舍入右移相加 [16]"
    },
    {
      "name": "vrsra_n_s32",
      "full name": "int32x2_t vrsra_n_s32(int32x2_t a, int32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [32]",
      "function_cn": "[向量] 舍入右移相加 [32]"
    },
    {
      "name": "vrsraq_n_s32",
      "full name": "int32x4_t vrsraq_n_s32(int32x4_t a, int32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [32]",
      "function_cn": "[向量] 舍入右移相加 [32]"
    },
    {
      "name": "vrsra_n_s64",
      "full name": "int64x1_t vrsra_n_s64(int64x1_t a, int64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [64]",
      "function_cn": "[向量] 舍入右移相加 [64]"
    },
    {
      "name": "vrsraq_n_s64",
      "full name": "int64x2_t vrsraq_n_s64(int64x2_t a, int64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[vector] srsra [64]",
      "function_cn": "[向量] 舍入右移相加 [64]"
    },
    {
      "name": "vrsra_n_u8",
      "full name": "uint8x8_t vrsra_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [8]",
      "function_cn": "[向量] 舍入右移相加 [8]"
    },
    {
      "name": "vrsraq_n_u8",
      "full name": "uint8x16_t vrsraq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [8]",
      "function_cn": "[向量] 舍入右移相加 [8]"
    },
    {
      "name": "vrsra_n_u16",
      "full name": "uint16x4_t vrsra_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [16]",
      "function_cn": "[向量] 舍入右移相加 [16]"
    },
    {
      "name": "vrsraq_n_u16",
      "full name": "uint16x8_t vrsraq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [16]",
      "function_cn": "[向量] 舍入右移相加 [16]"
    },
    {
      "name": "vrsra_n_u32",
      "full name": "uint32x2_t vrsra_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [32]",
      "function_cn": "[向量] 舍入右移相加 [32]"
    },
    {
      "name": "vrsraq_n_u32",
      "full name": "uint32x4_t vrsraq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [32]",
      "function_cn": "[向量] 舍入右移相加 [32]"
    },
    {
      "name": "vrsra_n_u64",
      "full name": "uint64x1_t vrsra_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [64]",
      "function_cn": "[向量] 舍入右移相加 [64]"
    },
    {
      "name": "vrsraq_n_u64",
      "full name": "uint64x2_t vrsraq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[vector] ursra [64]",
      "function_cn": "[向量] 舍入右移相加 [64]"
    },
    {
      "name": "vrsrad_n_s64",
      "full name": "int64_t vrsrad_n_s64(int64_t a, int64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "srsra",
      "function_en": "[scalar] srsra [64]",
      "function_cn": "[标量] 舍入右移相加 [64]"
    },
    {
      "name": "vrsrad_n_u64",
      "full name": "uint64_t vrsrad_n_u64(uint64_t a, uint64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursra",
      "function_en": "[scalar] ursra [64]",
      "function_cn": "[标量] 舍入右移相加 [64]"
    },
    {
      "name": "vqshl_n_s8",
      "full name": "int8x8_t vqshl_n_s8(int8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshlq_n_s8",
      "full name": "int8x16_t vqshlq_n_s8(int8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshl_n_s16",
      "full name": "int16x4_t vqshl_n_s16(int16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshlq_n_s16",
      "full name": "int16x8_t vqshlq_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshl_n_s32",
      "full name": "int32x2_t vqshl_n_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshlq_n_s32",
      "full name": "int32x4_t vqshlq_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshl_n_s64",
      "full name": "int64x1_t vqshl_n_s64(int64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshlq_n_s64",
      "full name": "int64x2_t vqshlq_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[vector] sqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshl_n_u8",
      "full name": "uint8x8_t vqshl_n_u8(uint8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshlq_n_u8",
      "full name": "uint8x16_t vqshlq_n_u8(uint8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [8]",
      "function_cn": "[向量] 饱和左移 [8]"
    },
    {
      "name": "vqshl_n_u16",
      "full name": "uint16x4_t vqshl_n_u16(uint16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshlq_n_u16",
      "full name": "uint16x8_t vqshlq_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [16]",
      "function_cn": "[向量] 饱和左移 [16]"
    },
    {
      "name": "vqshl_n_u32",
      "full name": "uint32x2_t vqshl_n_u32(uint32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshlq_n_u32",
      "full name": "uint32x4_t vqshlq_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [32]",
      "function_cn": "[向量] 饱和左移 [32]"
    },
    {
      "name": "vqshl_n_u64",
      "full name": "uint64x1_t vqshl_n_u64(uint64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshlq_n_u64",
      "full name": "uint64x2_t vqshlq_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[vector] uqshl [64]",
      "function_cn": "[向量] 饱和左移 [64]"
    },
    {
      "name": "vqshlb_n_s8",
      "full name": "int8_t vqshlb_n_s8(int8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [8]",
      "function_cn": "[标量] 饱和左移 [8]"
    },
    {
      "name": "vqshlh_n_s16",
      "full name": "int16_t vqshlh_n_s16(int16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [16]",
      "function_cn": "[标量] 饱和左移 [16]"
    },
    {
      "name": "vqshls_n_s32",
      "full name": "int32_t vqshls_n_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [32]",
      "function_cn": "[标量] 饱和左移 [32]"
    },
    {
      "name": "vqshld_n_s64",
      "full name": "int64_t vqshld_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshl",
      "function_en": "[scalar] sqshl [64]",
      "function_cn": "[标量] 饱和左移 [64]"
    },
    {
      "name": "vqshlb_n_u8",
      "full name": "uint8_t vqshlb_n_u8(uint8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [8]",
      "function_cn": "[标量] 饱和左移 [8]"
    },
    {
      "name": "vqshlh_n_u16",
      "full name": "uint16_t vqshlh_n_u16(uint16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [16]",
      "function_cn": "[标量] 饱和左移 [16]"
    },
    {
      "name": "vqshls_n_u32",
      "full name": "uint32_t vqshls_n_u32(uint32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [32]",
      "function_cn": "[标量] 饱和左移 [32]"
    },
    {
      "name": "vqshld_n_u64",
      "full name": "uint64_t vqshld_n_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshl",
      "function_en": "[scalar] uqshl [32]",
      "function_cn": "[标量] 饱和左移 [32]"
    },
    {
      "name": "vqshlu_n_s8",
      "full name": "uint8x8_t vqshlu_n_s8(int8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [8]",
      "function_cn": "[向量] 有符号饱和左移无符号 [8]"
    },
    {
      "name": "vqshluq_n_s8",
      "full name": "uint8x16_t vqshluq_n_s8(int8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [8]",
      "function_cn": "[向量] 有符号饱和左移无符号 [8]"
    },
    {
      "name": "vqshlu_n_s16",
      "full name": "uint16x4_t vqshlu_n_s16(int16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [16]",
      "function_cn": "[向量] 有符号饱和左移无符号 [16]"
    },
    {
      "name": "vqshluq_n_s16",
      "full name": "uint16x8_t vqshluq_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [16]",
      "function_cn": "[向量] 有符号饱和左移无符号 [16]"
    },
    {
      "name": "vqshlu_n_s32",
      "full name": "uint32x2_t vqshlu_n_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [32]",
      "function_cn": "[向量] 有符号饱和左移无符号 [32]"
    },
    {
      "name": "vqshluq_n_s32",
      "full name": "uint32x4_t vqshluq_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [32]",
      "function_cn": "[向量] 有符号饱和左移无符号 [32]"
    },
    {
      "name": "vqshlu_n_s64",
      "full name": "uint64x1_t vqshlu_n_s64(int64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [64]",
      "function_cn": "[向量] 有符号饱和左移无符号 [64]"
    },
    {
      "name": "vqshluq_n_s64",
      "full name": "uint64x2_t vqshluq_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[vector] sqshlu [64]",
      "function_cn": "[向量] 有符号饱和左移无符号 [64]"
    },
    {
      "name": "vqshlub_n_s8",
      "full name": "uint8_t vqshlub_n_s8(int8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[scalar] sqshlu [8]",
      "function_cn": "[标量] 有符号饱和左移无符号 [8]"
    },
    {
      "name": "vqshluh_n_s16",
      "full name": "uint16_t vqshluh_n_s16(int16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[scalar] sqshlu [16]",
      "function_cn": "[标量] 有符号饱和左移无符号 [16]"
    },
    {
      "name": "vqshlus_n_s32",
      "full name": "uint32_t vqshlus_n_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[scalar] sqshlu [32]",
      "function_cn": "[标量] 有符号饱和左移无符号 [23]"
    },
    {
      "name": "vqshlud_n_s64",
      "full name": "uint64_t vqshlud_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshlu",
      "function_en": "[scalar] sqshlu [64]",
      "function_cn": "[标量] 有符号饱和左移无符号 [64]"
    },
    {
      "name": "vshrn_n_s16",
      "full name": "int8x8_t vshrn_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn",
      "function_en": "[vector] shrn [16]",
      "function_cn": "[向量] 窄型右移 [16]"
    },
    {
      "name": "vshrn_n_s32",
      "full name": "int16x4_t vshrn_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn",
      "function_en": "[vector] shrn [32]",
      "function_cn": "[向量] 窄型右移 [32]"
    },
    {
      "name": "vshrn_n_s64",
      "full name": "int32x2_t vshrn_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn",
      "function_en": "[vector] shrn [64]",
      "function_cn": "[向量] 窄型右移 [64]"
    },
    {
      "name": "vshrn_n_u16",
      "full name": "uint8x8_t vshrn_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn",
      "function_en": "[vector] shrn [16]",
      "function_cn": "[向量] 窄型右移 [16]"
    },
    {
      "name": "vshrn_n_u32",
      "full name": "uint16x4_t vshrn_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn",
      "function_en": "[vector] shrn [32]",
      "function_cn": "[向量] 窄型右移 [32]"
    },
    {
      "name": "vshrn_n_u64",
      "full name": "uint32x2_t vshrn_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn",
      "function_en": "[vector] shrn [32]",
      "function_cn": "[向量] 窄型右移 [32]"
    },
    {
      "name": "vshrn_high_n_s16",
      "full name": "int8x16_t vshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn2",
      "function_en": "[vector] shrn2 [16]",
      "function_cn": "[向量] 窄型右移(立即数) [16]"
    },
    {
      "name": "vshrn_high_n_s32",
      "full name": "int16x8_t vshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn2",
      "function_en": "[vector] shrn2 [32]",
      "function_cn": "[向量] 窄型右移(立即数) [32]"
    },
    {
      "name": "vshrn_high_n_s64",
      "full name": "int32x4_t vshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn2",
      "function_en": "[vector] shrn2 [64]",
      "function_cn": "[向量] 窄型右移(立即数) [64]"
    },
    {
      "name": "vshrn_high_n_u16",
      "full name": "uint8x16_t vshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn2",
      "function_en": "[vector] shrn2 [16]",
      "function_cn": "[向量] 窄型右移(立即数) [16]"
    },
    {
      "name": "vshrn_high_n_u32",
      "full name": "uint16x8_t vshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn2",
      "function_en": "[vector] shrn2 [32]",
      "function_cn": "[向量] 窄型右移(立即数) [32]"
    },
    {
      "name": "vshrn_high_n_u64",
      "full name": "uint32x4_t vshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shrn2",
      "function_en": "[vector] shrn2 [64]",
      "function_cn": "[向量] 窄型右移(立即数) [64]"
    },
    {
      "name": "vqshrun_n_s16",
      "full name": "uint8x8_t vqshrun_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun",
      "function_en": "[vector] sqshrun [16]",
      "function_cn": "[向量] 窄型有符号饱和右移为无符号 [16]"
    },
    {
      "name": "vqshrun_n_s32",
      "full name": "uint16x4_t vqshrun_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun",
      "function_en": "[vector] sqshrun [32]",
      "function_cn": "[向量] 窄型有符号饱和右移为无符号 [32]"
    },
    {
      "name": "vqshrun_n_s64",
      "full name": "uint32x2_t vqshrun_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun",
      "function_en": "[vector] sqshrun [64]",
      "function_cn": "[向量] 窄型有符号饱和右移为无符号 [64]"
    },
    {
      "name": "vqshrunh_n_s16",
      "full name": "uint8_t vqshrunh_n_s16(int16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun",
      "function_en": "[scalar] sqshrun [16]",
      "function_cn": "[标量] 窄型有符号饱和右移为无符号 [16]"
    },
    {
      "name": "vqshruns_n_s32",
      "full name": "uint16_t vqshruns_n_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun",
      "function_en": "[scalar] sqshrun [32]",
      "function_cn": "[标量] 窄型有符号饱和右移为无符号 [32]"
    },
    {
      "name": "vqshrund_n_s64",
      "full name": "uint32_t vqshrund_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun",
      "function_en": "[scalar] sqshrun [64]",
      "function_cn": "[标量] 窄型有符号饱和右移为无符号 [64]"
    },
    {
      "name": "vqshrun_high_n_s16",
      "full name": "uint8x16_t vqshrun_high_n_s16(uint8x8_t r, int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun2",
      "function_en": "[vector] sqshrun2 [16]",
      "function_cn": "[向量] 窄型有符号饱和右移为无符号(立即数) [16]"
    },
    {
      "name": "vqshrun_high_n_s32",
      "full name": "uint16x8_t vqshrun_high_n_s32(uint16x4_t r, int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun2",
      "function_en": "[vector] sqshrun2 [32]",
      "function_cn": "[向量] 窄型有符号饱和右移为无符号(立即数) [32]"
    },
    {
      "name": "vqshrun_high_n_s64",
      "full name": "uint32x4_t vqshrun_high_n_s64(uint32x2_t r, int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrun2",
      "function_en": "[vector] sqshrun2 [64]",
      "function_cn": "[向量] 窄型有符号饱和右移为无符号(立即数) [64]"
    },
    {
      "name": "vqrshrun_n_s16",
      "full name": "uint8x8_t vqrshrun_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun",
      "function_en": "[vector] sqrshrun [16]",
      "function_cn": "[向量] 窄型有符号饱和舍入右移为无符号 [16]"
    },
    {
      "name": "vqrshrun_n_s32",
      "full name": "uint16x4_t vqrshrun_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun",
      "function_en": "[vector] sqrshrun [32]",
      "function_cn": "[向量] 窄型有符号饱和舍入右移为无符号 [32]"
    },
    {
      "name": "vqrshrun_n_s64",
      "full name": "uint32x2_t vqrshrun_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun",
      "function_en": "[vector] sqrshrun [64]",
      "function_cn": "[向量] 窄型有符号饱和舍入右移为无符号 [64]"
    },
    {
      "name": "vqrshrunh_n_s16",
      "full name": "uint8_t vqrshrunh_n_s16(int16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun",
      "function_en": "[scalar] sqrshrun [16]",
      "function_cn": "[标量] 窄型有符号饱和舍入右移为无符号 [16]"
    },
    {
      "name": "vqrshruns_n_s32",
      "full name": "uint16_t vqrshruns_n_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun",
      "function_en": "[scalar] sqrshrun [32]",
      "function_cn": "[标量] 窄型有符号饱和舍入右移为无符号 [32]"
    },
    {
      "name": "vqrshrund_n_s64",
      "full name": "uint32_t vqrshrund_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun",
      "function_en": "[scalar] sqrshrun [64]",
      "function_cn": "[标量] 窄型有符号饱和舍入右移为无符号 [64]"
    },
    {
      "name": "vqrshrun_high_n_s16",
      "full name": "uint8x16_t vqrshrun_high_n_s16(uint8x8_t r, int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun2",
      "function_en": "[vector] sqrshrun2 [16]",
      "function_cn": "[向量] 窄型有符号饱和舍入右移为无符号(立即数) [16]"
    },
    {
      "name": "vqrshrun_high_n_s32",
      "full name": "uint16x8_t vqrshrun_high_n_s32(uint16x4_t r, int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun2",
      "function_en": "[vector] sqrshrun2 [32]",
      "function_cn": "[向量] 窄型有符号饱和舍入右移为无符号(立即数) [32]"
    },
    {
      "name": "vqrshrun_high_n_s64",
      "full name": "uint32x4_t vqrshrun_high_n_s64(uint32x2_t r, int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrun2",
      "function_en": "[vector] sqrshrun2 [64]",
      "function_cn": "[向量] 窄型有符号饱和舍入右移为无符号(立即数) [64]"
    },
    {
      "name": "vqshrn_n_s16",
      "full name": "int8x8_t vqshrn_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn",
      "function_en": "[vector] sqshrn [16]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [16]"
    },
    {
      "name": "vqshrn_n_s32",
      "full name": "int16x4_t vqshrn_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn",
      "function_en": "[vector] sqshrn [32]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [32]"
    },
    {
      "name": "vqshrn_n_s64",
      "full name": "int32x2_t vqshrn_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn",
      "function_en": "[vector] sqshrn [64]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [64]"
    },
    {
      "name": "vqshrn_n_u16",
      "full name": "uint8x8_t vqshrn_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn",
      "function_en": "[vector] uqshrn [16]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [16]"
    },
    {
      "name": "vqshrn_n_u32",
      "full name": "uint16x4_t vqshrn_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn",
      "function_en": "[vector] uqshrn [32]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [32]"
    },
    {
      "name": "vqshrn_n_u64",
      "full name": "uint32x2_t vqshrn_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn",
      "function_en": "[vector] uqshrn [64]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [64]"
    },
    {
      "name": "vqshrnh_n_s16",
      "full name": "int8_t vqshrnh_n_s16(int16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn",
      "function_en": "[scalar] sqshrn [16]",
      "function_cn": "[标量] 窄型饱和右移(立即数) [16]"
    },
    {
      "name": "vqshrns_n_s32",
      "full name": "int16_t vqshrns_n_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn",
      "function_en": "[scalar] sqshrn [32]",
      "function_cn": "[标量] 窄型饱和右移(立即数) [32]"
    },
    {
      "name": "vqshrnd_n_s64",
      "full name": "int32_t vqshrnd_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn",
      "function_en": "[scalar] sqshrn [64]",
      "function_cn": "[标量] 窄型饱和右移(立即数) [64]"
    },
    {
      "name": "vqshrnh_n_u16",
      "full name": "uint8_t vqshrnh_n_u16(uint16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn",
      "function_en": "[scalar] uqshrn [16]",
      "function_cn": "[标量] 窄型饱和右移(立即数) [16]"
    },
    {
      "name": "vqshrns_n_u32",
      "full name": "uint16_t vqshrns_n_u32(uint32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn",
      "function_en": "[scalar] uqshrn [32]",
      "function_cn": "[标量] 窄型饱和右移(立即数) [32]"
    },
    {
      "name": "vqshrnd_n_u64",
      "full name": "uint32_t vqshrnd_n_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn",
      "function_en": "[scalar] uqshrn [64]",
      "function_cn": "[标量] 窄型饱和右移(立即数) [64]"
    },
    {
      "name": "vqshrn_high_n_s16",
      "full name": "int8x16_t vqshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn2",
      "function_en": "[vector] sqshrn2 [16]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [16]"
    },
    {
      "name": "vqshrn_high_n_s32",
      "full name": "int16x8_t vqshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn2",
      "function_en": "[vector] sqshrn2 [32]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [32]"
    },
    {
      "name": "vqshrn_high_n_s64",
      "full name": "int32x4_t vqshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqshrn2",
      "function_en": "[vector] sqshrn2 [64]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [64]"
    },
    {
      "name": "vqshrn_high_n_u16",
      "full name": "uint8x16_t vqshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn2",
      "function_en": "[vector] uqshrn2 [16]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [16]"
    },
    {
      "name": "vqshrn_high_n_u32",
      "full name": "uint16x8_t vqshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn2",
      "function_en": "[vector] uqshrn2 [32]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [32]"
    },
    {
      "name": "vqshrn_high_n_u64",
      "full name": "uint32x4_t vqshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqshrn2",
      "function_en": "[vector] uqshrn2 [64]",
      "function_cn": "[向量] 窄型饱和右移(立即数) [64]"
    },
    {
      "name": "vrshrn_n_s16",
      "full name": "int8x8_t vrshrn_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn",
      "function_en": "[vector] rshrn [16]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [16]"
    },
    {
      "name": "vrshrn_n_s32",
      "full name": "int16x4_t vrshrn_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn",
      "function_en": "[vector] rshrn [32]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [32]"
    },
    {
      "name": "vrshrn_n_s64",
      "full name": "int32x2_t vrshrn_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn",
      "function_en": "[vector] rshrn [64]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [64]"
    },
    {
      "name": "vrshrn_n_u16",
      "full name": "uint8x8_t vrshrn_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn",
      "function_en": "[vector] rshrn [16]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [16]"
    },
    {
      "name": "vrshrn_n_u32",
      "full name": "uint16x4_t vrshrn_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn",
      "function_en": "[vector] rshrn [32]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [32]"
    },
    {
      "name": "vrshrn_n_u64",
      "full name": "uint32x2_t vrshrn_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn",
      "function_en": "[vector] rshrn [64]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [64]"
    },
    {
      "name": "vrshrn_high_n_s16",
      "full name": "int8x16_t vrshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn2",
      "function_en": "[vector] rshrn2 [16]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [16]"
    },
    {
      "name": "vrshrn_high_n_s32",
      "full name": "int16x8_t vrshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn2",
      "function_en": "[vector] rshrn2 [32]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [32]"
    },
    {
      "name": "vrshrn_high_n_s64",
      "full name": "int32x4_t vrshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn2",
      "function_en": "[vector] rshrn2 [64]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [64]"
    },
    {
      "name": "vrshrn_high_n_u16",
      "full name": "uint8x16_t vrshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn2",
      "function_en": "[vector] rshrn2 [16]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [16]"
    },
    {
      "name": "vrshrn_high_n_u32",
      "full name": "uint16x8_t vrshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn2",
      "function_en": "[vector] rshrn2 [32]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [32]"
    },
    {
      "name": "vrshrn_high_n_u64",
      "full name": "uint32x4_t vrshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rshrn2",
      "function_en": "[vector] rshrn2 [64]",
      "function_cn": "[向量] 窄型舍入右移(立即数) [64]"
    },
    {
      "name": "vqrshrn_n_s16",
      "full name": "int8x8_t vqrshrn_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn",
      "function_en": "[vector] sqrshrn [16]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [16]"
    },
    {
      "name": "vqrshrn_n_s32",
      "full name": "int16x4_t vqrshrn_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn",
      "function_en": "[vector] sqrshrn [32]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [32]"
    },
    {
      "name": "vqrshrn_n_s64",
      "full name": "int32x2_t vqrshrn_n_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn",
      "function_en": "[vector] sqrshrn [64]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [64]"
    },
    {
      "name": "vqrshrn_n_u16",
      "full name": "uint8x8_t vqrshrn_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn",
      "function_en": "[vector] uqrshrn [16]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [16]"
    },
    {
      "name": "vqrshrn_n_u32",
      "full name": "uint16x4_t vqrshrn_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn",
      "function_en": "[vector] uqrshrn [32]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [32]"
    },
    {
      "name": "vqrshrn_n_u64",
      "full name": "uint32x2_t vqrshrn_n_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn",
      "function_en": "[vector] uqrshrn [64]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [64]"
    },
    {
      "name": "vqrshrnh_n_s16",
      "full name": "int8_t vqrshrnh_n_s16(int16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn",
      "function_en": "[scalar] sqrshrn [16]",
      "function_cn": "[标量] 窄型饱和舍入右移(立即数) [16]"
    },
    {
      "name": "vqrshrns_n_s32",
      "full name": "int16_t vqrshrns_n_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn",
      "function_en": "[scalar] sqrshrn [32]",
      "function_cn": "[标量] 窄型饱和舍入右移(立即数) [32]"
    },
    {
      "name": "vqrshrnd_n_s64",
      "full name": "int32_t vqrshrnd_n_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn",
      "function_en": "[scalar] sqrshrn [64]",
      "function_cn": "[标量] 窄型饱和舍入右移(立即数) [64]"
    },
    {
      "name": "vqrshrnh_n_u16",
      "full name": "uint8_t vqrshrnh_n_u16(uint16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn",
      "function_en": "[scalar] uqrshrn [16]",
      "function_cn": "[标量] 窄型饱和舍入右移(立即数) [16]"
    },
    {
      "name": "vqrshrns_n_u32",
      "full name": "uint16_t vqrshrns_n_u32(uint32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn",
      "function_en": "[scalar] uqrshrn [32]",
      "function_cn": "[标量] 窄型饱和舍入右移(立即数) [32]"
    },
    {
      "name": "vqrshrnd_n_u64",
      "full name": "uint32_t vqrshrnd_n_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn",
      "function_en": "[scalar] uqrshrn [64]",
      "function_cn": "[标量] 窄型饱和舍入右移(立即数)  [64]"
    },
    {
      "name": "vqrshrn_high_n_s16",
      "full name": "int8x16_t vqrshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn2",
      "function_en": "[vector] sqrshrn2 [16]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [16]"
    },
    {
      "name": "vqrshrn_high_n_s32",
      "full name": "int16x8_t vqrshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn2",
      "function_en": "[vector] sqrshrn2 [32]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [32]"
    },
    {
      "name": "vqrshrn_high_n_s64",
      "full name": "int32x4_t vqrshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrshrn2",
      "function_en": "[vector] sqrshrn2 [64]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [64]"
    },
    {
      "name": "vqrshrn_high_n_u16",
      "full name": "uint8x16_t vqrshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn2",
      "function_en": "[vector] uqrshrn2 [16]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [16]"
    },
    {
      "name": "vqrshrn_high_n_u32",
      "full name": "uint16x8_t vqrshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn2",
      "function_en": "[vector] uqrshrn2 [32]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [32]"
    },
    {
      "name": "vqrshrn_high_n_u64",
      "full name": "uint32x4_t vqrshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqrshrn2",
      "function_en": "[vector] uqrshrn2 [64]",
      "function_cn": "[向量] 窄型饱和舍入右移(立即数) [64]"
    },
    {
      "name": "vshll_n_s8",
      "full name": "int16x8_t vshll_n_s8(int8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll",
      "function_en": "[vector] shll [8]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 8) [8]"
    },
    {
      "name": "vshll_n_s16",
      "full name": "int32x4_t vshll_n_s16(int16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll",
      "function_en": "[vector] shll [16]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 16) [16]"
    },
    {
      "name": "vshll_n_s32",
      "full name": "int64x2_t vshll_n_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll",
      "function_en": "[vector] shll [32]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 32) [32]"
    },
    {
      "name": "vshll_n_u8",
      "full name": "uint16x8_t vshll_n_u8(uint8x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll",
      "function_en": "[vector] shll [8]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 8) [8]"
    },
    {
      "name": "vshll_n_u16",
      "full name": "uint32x4_t vshll_n_u16(uint16x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll",
      "function_en": "[vector] shll [16]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 16) [16]"
    },
    {
      "name": "vshll_n_u32",
      "full name": "uint64x2_t vshll_n_u32(uint32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll",
      "function_en": "[vector] shll [32]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 32) [32]"
    },
    {
      "name": "vshll_high_n_s8",
      "full name": "int16x8_t vshll_high_n_s8(int8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll2",
      "function_en": "[vector] shll2 [8]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 8) [8]"
    },
    {
      "name": "vshll_high_n_s16",
      "full name": "int32x4_t vshll_high_n_s16(int16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll2",
      "function_en": "[vector] shll2 [16]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 16) [16]"
    },
    {
      "name": "vshll_high_n_s32",
      "full name": "int64x2_t vshll_high_n_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll2",
      "function_en": "[vector] shll2 [32]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 32) [32]"
    },
    {
      "name": "vshll_high_n_u8",
      "full name": "uint16x8_t vshll_high_n_u8(uint8x16_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll2",
      "function_en": "[vector] shll2 [8]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 8) [8]"
    },
    {
      "name": "vshll_high_n_u16",
      "full name": "uint32x4_t vshll_high_n_u16(uint16x8_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll2",
      "function_en": "[vector] shll2 [16]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 8) [16]"
    },
    {
      "name": "vshll_high_n_u32",
      "full name": "uint64x2_t vshll_high_n_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "shll2",
      "function_en": "[vector] shll2 [32]",
      "function_cn": "[向量] 长型左移(按元素个数, n = 8) [32]"
    },
    {
      "name": "vsri_n_s8",
      "full name": "int8x8_t vsri_n_s8(int8x8_t a, int8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [8]",
      "function_cn": "[向量] 右移并插入 [8]"
    },
    {
      "name": "vsriq_n_s8",
      "full name": "int8x16_t vsriq_n_s8(int8x16_t a, int8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [8]",
      "function_cn": "[向量] 右移并插入 [8]"
    },
    {
      "name": "vsri_n_s16",
      "full name": "int16x4_t vsri_n_s16(int16x4_t a, int16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [16]",
      "function_cn": "[向量] 右移并插入 [16]"
    },
    {
      "name": "vsriq_n_s16",
      "full name": "int16x8_t vsriq_n_s16(int16x8_t a, int16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [16]",
      "function_cn": "[向量] 右移并插入 [16]"
    },
    {
      "name": "vsri_n_s32",
      "full name": "int32x2_t vsri_n_s32(int32x2_t a, int32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [32]",
      "function_cn": "[向量] 右移并插入 [32]"
    },
    {
      "name": "vsriq_n_s32",
      "full name": "int32x4_t vsriq_n_s32(int32x4_t a, int32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [32]",
      "function_cn": "[向量] 右移并插入 [32]"
    },
    {
      "name": "vsri_n_s64",
      "full name": "int64x1_t vsri_n_s64(int64x1_t a, int64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [64]",
      "function_cn": "[向量] 右移并插入 [64]"
    },
    {
      "name": "vsriq_n_s64",
      "full name": "int64x2_t vsriq_n_s64(int64x2_t a, int64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [64]",
      "function_cn": "[向量] 右移并插入 [64]"
    },
    {
      "name": "vsri_n_u8",
      "full name": "uint8x8_t vsri_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [8]",
      "function_cn": "[向量] 右移并插入 [8]"
    },
    {
      "name": "vsriq_n_u8",
      "full name": "uint8x16_t vsriq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [8]",
      "function_cn": "[向量] 右移并插入 [8]"
    },
    {
      "name": "vsri_n_u16",
      "full name": "uint16x4_t vsri_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [16]",
      "function_cn": "[向量] 右移并插入 [16]"
    },
    {
      "name": "vsriq_n_u16",
      "full name": "uint16x8_t vsriq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [16]",
      "function_cn": "[向量] 右移并插入 [16]"
    },
    {
      "name": "vsri_n_u32",
      "full name": "uint32x2_t vsri_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [32]",
      "function_cn": "[向量] 右移并插入 [32]"
    },
    {
      "name": "vsriq_n_u32",
      "full name": "uint32x4_t vsriq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [32]",
      "function_cn": "[向量] 右移并插入 [32]"
    },
    {
      "name": "vsri_n_u64",
      "full name": "uint64x1_t vsri_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [64]",
      "function_cn": "[向量] 右移并插入 [64]"
    },
    {
      "name": "vsriq_n_u64",
      "full name": "uint64x2_t vsriq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [64]",
      "function_cn": "[向量] 右移并插入 [64]"
    },
    {
      "name": "vsri_n_p64",
      "full name": "poly64x1_t vsri_n_p64(poly64x1_t a, poly64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [64]",
      "function_cn": "[向量] 右移并插入 [64]"
    },
    {
      "name": "vsriq_n_p64",
      "full name": "poly64x2_t vsriq_n_p64(poly64x2_t a, poly64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [64]",
      "function_cn": "[向量] 右移并插入 [64]"
    },
    {
      "name": "vsri_n_p8",
      "full name": "poly8x8_t vsri_n_p8(poly8x8_t a, poly8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [8]",
      "function_cn": "[向量] 右移并插入 [8]"
    },
    {
      "name": "vsriq_n_p8",
      "full name": "poly8x16_t vsriq_n_p8(poly8x16_t a, poly8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [8]",
      "function_cn": "[向量] 右移并插入 [8]"
    },
    {
      "name": "vsri_n_p16",
      "full name": "poly16x4_t vsri_n_p16(poly16x4_t a, poly16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [16]",
      "function_cn": "[向量] 右移并插入 [16]"
    },
    {
      "name": "vsriq_n_p16",
      "full name": "poly16x8_t vsriq_n_p16(poly16x8_t a, poly16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[vector] sri [16]",
      "function_cn": "[向量] 右移并插入 [16]"
    },
    {
      "name": "vsrid_n_s64",
      "full name": "int64_t vsrid_n_s64(int64_t a, int64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[scalar] sri [64]",
      "function_cn": "[标量] 右移并插入 [64]"
    },
    {
      "name": "vsrid_n_u64",
      "full name": "uint64_t vsrid_n_u64(uint64_t a, uint64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sri",
      "function_en": "[scalar] sri [64]",
      "function_cn": "[标量] 右移并插入 [64]"
    },
    {
      "name": "vsli_n_s8",
      "full name": "int8x8_t vsli_n_s8(int8x8_t a, int8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [8]",
      "function_cn": "[向量] 左移并插入 [8]"
    },
    {
      "name": "vsliq_n_s8",
      "full name": "int8x16_t vsliq_n_s8(int8x16_t a, int8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [8]",
      "function_cn": "[向量] 左移并插入 [8]"
    },
    {
      "name": "vsli_n_s16",
      "full name": "int16x4_t vsli_n_s16(int16x4_t a, int16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [16]",
      "function_cn": "[向量] 左移并插入 [16]"
    },
    {
      "name": "vsliq_n_s16",
      "full name": "int16x8_t vsliq_n_s16(int16x8_t a, int16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [16]",
      "function_cn": "[向量] 左移并插入 [16]"
    },
    {
      "name": "vsli_n_s32",
      "full name": "int32x2_t vsli_n_s32(int32x2_t a, int32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [32]",
      "function_cn": "[向量] 左移并插入 [32]"
    },
    {
      "name": "vsliq_n_s32",
      "full name": "int32x4_t vsliq_n_s32(int32x4_t a, int32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [32]",
      "function_cn": "[向量] 左移并插入 [32]"
    },
    {
      "name": "vsli_n_s64",
      "full name": "int64x1_t vsli_n_s64(int64x1_t a, int64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [64]",
      "function_cn": "[向量] 左移并插入 [64]"
    },
    {
      "name": "vsliq_n_s64",
      "full name": "int64x2_t vsliq_n_s64(int64x2_t a, int64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [64]",
      "function_cn": "[向量] 左移并插入 [64]"
    },
    {
      "name": "vsli_n_u8",
      "full name": "uint8x8_t vsli_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [8]",
      "function_cn": "[向量] 左移并插入 [8]"
    },
    {
      "name": "vsliq_n_u8",
      "full name": "uint8x16_t vsliq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [8]",
      "function_cn": "[向量] 左移并插入 [8]"
    },
    {
      "name": "vsli_n_u16",
      "full name": "uint16x4_t vsli_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [16]",
      "function_cn": "[向量] 左移并插入 [16]"
    },
    {
      "name": "vsliq_n_u16",
      "full name": "uint16x8_t vsliq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [16]",
      "function_cn": "[向量] 左移并插入 [16]"
    },
    {
      "name": "vsli_n_u32",
      "full name": "uint32x2_t vsli_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [32]",
      "function_cn": "[向量] 左移并插入 [32]"
    },
    {
      "name": "vsliq_n_u32",
      "full name": "uint32x4_t vsliq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [32]",
      "function_cn": "[向量] 左移并插入 [32]"
    },
    {
      "name": "vsli_n_u64",
      "full name": "uint64x1_t vsli_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [64]",
      "function_cn": "[向量] 左移并插入 [64]"
    },
    {
      "name": "vsliq_n_u64",
      "full name": "uint64x2_t vsliq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [64]",
      "function_cn": "[向量] 左移并插入 [64]"
    },
    {
      "name": "vsli_n_p64",
      "full name": "poly64x1_t vsli_n_p64(poly64x1_t a, poly64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [64]",
      "function_cn": "[向量] 左移并插入 [64]"
    },
    {
      "name": "vsliq_n_p64",
      "full name": "poly64x2_t vsliq_n_p64(poly64x2_t a, poly64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [64]",
      "function_cn": "[向量] 左移并插入 [64]"
    },
    {
      "name": "vsli_n_p8",
      "full name": "poly8x8_t vsli_n_p8(poly8x8_t a, poly8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [8]",
      "function_cn": "[向量] 左移并插入 [8]"
    },
    {
      "name": "vsliq_n_p8",
      "full name": "poly8x16_t vsliq_n_p8(poly8x16_t a, poly8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [8]",
      "function_cn": "[向量] 左移并插入 [8]"
    },
    {
      "name": "vsli_n_p16",
      "full name": "poly16x4_t vsli_n_p16(poly16x4_t a, poly16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [16]",
      "function_cn": "[向量] 左移并插入 [16]"
    },
    {
      "name": "vsliq_n_p16",
      "full name": "poly16x8_t vsliq_n_p16(poly16x8_t a, poly16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[vector] sli [16]",
      "function_cn": "[向量] 左移并插入 [16]"
    },
    {
      "name": "vslid_n_s64",
      "full name": "int64_t vslid_n_s64(int64_t a, int64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[scalar] sli [64]",
      "function_cn": "[标量] 左移并插入 [64]"
    },
    {
      "name": "vslid_n_u64",
      "full name": "uint64_t vslid_n_u64(uint64_t a, uint64_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sli",
      "function_en": "[scalar] sli [64]",
      "function_cn": "[标量] 左移并插入 [64]"
    },
    {
      "name": "vcvt_s32_f32",
      "full name": "int32x2_t vcvt_s32_f32(float32x2_t a)",
      "Intel name": "_mm_cvtt_ps2pi",
      "Intel Asm": "cvttps2pi",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [32]",
      "function_cn": "[向量] 浮点数转为有符号整数,向零舍入 [32]"
    },
    {
      "name": "vcvtq_s32_f32",
      "full name": "int32x4_t vcvtq_s32_f32(float32x4_t a)",
      "Intel name": "_mm_cvttps_epi32",
      "Intel Asm": "cvttps2dq",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [32]",
      "function_cn": "[向量] 浮点数转为有符号整数,向零舍入 [32]"
    },
    {
      "name": "vcvt_u32_f32",
      "full name": "uint32x2_t vcvt_u32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数,向零舍入 [32]"
    },
    {
      "name": "vcvtq_u32_f32",
      "full name": "uint32x4_t vcvtq_u32_f32(float32x4_t a)",
      "Intel name": "_mm_cvttps_epu32",
      "Intel Asm": "vcvttps2udq",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数,向零舍入 [32]"
    },
    {
      "name": "vcvtn_s32_f32",
      "full name": "int32x2_t vcvtn_s32_f32(float32x2_t a)",
      "Intel name": "_mm_cvt_ps2pi",
      "Intel Asm": "cvtps2pi",
      "Arm Asm": "fcvtns",
      "function_en": "[vector] fcvtns [32]",
      "function_cn": "[向量] 浮点数转为有符号整数,四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vcvtnq_s32_f32",
      "full name": "int32x4_t vcvtnq_s32_f32(float32x4_t a)",
      "Intel name": "_mm_cvtps_epi32",
      "Intel Asm": "cvtps2dq",
      "Arm Asm": "fcvtns",
      "function_en": "[vector] fcvtns [32]",
      "function_cn": "[向量] 浮点数转为有符号整数,四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vcvtn_u32_f32",
      "full name": "uint32x2_t vcvtn_u32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtnu",
      "function_en": "[vector] fcvtnu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数,四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vcvtnq_u32_f32",
      "full name": "uint32x4_t vcvtnq_u32_f32(float32x4_t a)",
      "Intel name": "_mm_cvtps_epu32",
      "Intel Asm": "vcvtps2udq",
      "Arm Asm": "fcvtnu",
      "function_en": "[vector] fcvtnu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数,四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vcvtm_s32_f32",
      "full name": "int32x2_t vcvtm_s32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtms",
      "function_en": "[vector] fcvtms [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，向负无穷舍入 [32]"
    },
    {
      "name": "vcvtmq_s32_f32",
      "full name": "int32x4_t vcvtmq_s32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtms",
      "function_en": "[vector] fcvtms [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，向负无穷舍入 [32]"
    },
    {
      "name": "vcvtm_u32_f32",
      "full name": "uint32x2_t vcvtm_u32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtmu",
      "function_en": "[vector] fcvtmu [32",
      "function_cn": "[向量] 浮点数转为无符号整数，向负无穷舍入 [32]"
    },
    {
      "name": "vcvtmq_u32_f32",
      "full name": "uint32x4_t vcvtmq_u32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtmu",
      "function_en": "[vector] fcvtmu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，向负无穷舍入 [32]"
    },
    {
      "name": "vcvtp_s32_f32",
      "full name": "int32x2_t vcvtp_s32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtps",
      "function_en": "[vector] fcvtps [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，向正无穷舍入 [32]"
    },
    {
      "name": "vcvtpq_s32_f32",
      "full name": "int32x4_t vcvtpq_s32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtps",
      "function_en": "[vector] fcvtps [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，向正无穷舍入 [32]"
    },
    {
      "name": "vcvtp_u32_f32",
      "full name": "uint32x2_t vcvtp_u32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtpu",
      "function_en": "[vector] fcvtpu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，向正无穷舍入 [32]"
    },
    {
      "name": "vcvtpq_u32_f32",
      "full name": "uint32x4_t vcvtpq_u32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtpu",
      "function_en": "[vector] fcvtpu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，向正无穷舍入 [32]"
    },
    {
      "name": "vcvta_s32_f32",
      "full name": "int32x2_t vcvta_s32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtas",
      "function_en": "[vector] fcvtas [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vcvtaq_s32_f32",
      "full name": "int32x4_t vcvtaq_s32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtas",
      "function_en": "[vector] fcvtas [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vcvta_u32_f32",
      "full name": "uint32x2_t vcvta_u32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtau",
      "function_en": "[vector] fcvtau [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vcvtaq_u32_f32",
      "full name": "uint32x4_t vcvtaq_u32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtau",
      "function_en": "[vector] fcvtau [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vcvts_s32_f32",
      "full name": "int32_t vcvts_s32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[scalar] fcvtzs [32]",
      "function_cn": "[标量] 浮点数转为有符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvts_u32_f32",
      "full name": "uint32_t vcvts_u32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[scalar] fcvtzu [32]",
      "function_cn": "[标量] 浮点数转为无符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvtns_s32_f32",
      "full name": "int32_t vcvtns_s32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtns",
      "function_en": "[scalar] fcvtns [32]",
      "function_cn": "[标量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vcvtns_u32_f32",
      "full name": "uint32_t vcvtns_u32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtnu",
      "function_en": "[scalar] fcvtnu [32]",
      "function_cn": "[标量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vcvtms_s32_f32",
      "full name": "int32_t vcvtms_s32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtms",
      "function_en": "[scalar] fcvtms [32]",
      "function_cn": "[标量] 浮点数转为有符号整数，向负无穷舍入 [32]"
    },
    {
      "name": "vcvtms_u32_f32",
      "full name": "uint32_t vcvtms_u32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtmu",
      "function_en": "[scalar] fcvtmu [32]",
      "function_cn": "[标量] 浮点数转为无符号整数，向负无穷舍入 [32]"
    },
    {
      "name": "vcvtps_s32_f32",
      "full name": "int32_t vcvtps_s32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtps",
      "function_en": "[scalar] fcvtps [32]",
      "function_cn": "[标量] 浮点数转为有符号整数，向正无穷舍入 [32]"
    },
    {
      "name": "vcvtps_u32_f32",
      "full name": "uint32_t vcvtps_u32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtpu",
      "function_en": "[scalar] fcvtpu [32]",
      "function_cn": "[标量] 浮点数转为无符号整数，向正无穷舍入 [32]"
    },
    {
      "name": "vcvtas_s32_f32",
      "full name": "int32_t vcvtas_s32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtas",
      "function_en": "[scalar] fcvtas [32]",
      "function_cn": "[标量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vcvtas_u32_f32",
      "full name": "uint32_t vcvtas_u32_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtau",
      "function_en": "[scalar] fcvtau [32]",
      "function_cn": "[标量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vcvt_s64_f64",
      "full name": "int64x1_t vcvt_s64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtq_s64_f64",
      "full name": "int64x2_t vcvtq_s64_f64(float64x2_t a)",
      "Intel name": "_mm_cvttpd_epi64",
      "Intel Asm": "vcvttpd2qq",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvt_u64_f64",
      "full name": "uint64x1_t vcvt_u64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtq_u64_f64",
      "full name": "uint64x2_t vcvtq_u64_f64(float64x2_t a)",
      "Intel name": "_mm_cvttpd_epu64",
      "Intel Asm": "vcvttpd2uqq",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtn_s64_f64",
      "full name": "int64x1_t vcvtn_s64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtns",
      "function_en": "[vector] fcvtns [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vcvtnq_s64_f64",
      "full name": "int64x2_t vcvtnq_s64_f64(float64x2_t a)",
      "Intel name": "_mm_cvtpd_epi64",
      "Intel Asm": "vcvtpd2qq",
      "Arm Asm": "fcvtns",
      "function_en": "[vector] fcvtns [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vcvtn_u64_f64",
      "full name": "uint64x1_t vcvtn_u64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtnu",
      "function_en": "[vector] fcvtnu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vcvtnq_u64_f64",
      "full name": "uint64x2_t vcvtnq_u64_f64(float64x2_t a)",
      "Intel name": "_mm_cvtpd_epu64",
      "Intel Asm": "vcvtpd2uqq",
      "Arm Asm": "fcvtnu",
      "function_en": "[vector] fcvtnu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vcvtm_s64_f64",
      "full name": "int64x1_t vcvtm_s64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtms",
      "function_en": "[vector] fcvtms [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向负无穷舍入 [64]"
    },
    {
      "name": "vcvtmq_s64_f64",
      "full name": "int64x2_t vcvtmq_s64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtms",
      "function_en": "[vector] fcvtms [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向负无穷舍入 [64]"
    },
    {
      "name": "vcvtm_u64_f64",
      "full name": "uint64x1_t vcvtm_u64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtmu",
      "function_en": "[vector] fcvtmu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向负无穷舍入 [64]"
    },
    {
      "name": "vcvtmq_u64_f64",
      "full name": "uint64x2_t vcvtmq_u64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtmu",
      "function_en": "[vector] fcvtmu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向负无穷舍入 [64]"
    },
    {
      "name": "vcvtp_s64_f64",
      "full name": "int64x1_t vcvtp_s64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtps",
      "function_en": "[vector] fcvtps [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvtpq_s64_f64",
      "full name": "int64x2_t vcvtpq_s64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtps",
      "function_en": "[vector] fcvtps [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvtp_u64_f64",
      "full name": "uint64x1_t vcvtp_u64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtpu",
      "function_en": "[vector] fcvtpu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvtpq_u64_f64",
      "full name": "uint64x2_t vcvtpq_u64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtpu",
      "function_en": "[vector] fcvtpu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvta_s64_f64",
      "full name": "int64x1_t vcvta_s64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtas",
      "function_en": "[vector] fcvtas [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vcvtaq_s64_f64",
      "full name": "int64x2_t vcvtaq_s64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtas",
      "function_en": "[vector] fcvtas [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vcvta_u64_f64",
      "full name": "uint64x1_t vcvta_u64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtau",
      "function_en": "[vector] fcvtau [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vcvtaq_u64_f64",
      "full name": "uint64x2_t vcvtaq_u64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtau",
      "function_en": "[vector] fcvtau [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vcvtd_s64_f64",
      "full name": "int64_t vcvtd_s64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[scalar] fcvtzs [64]",
      "function_cn": "[标量] 浮点数转为有符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtd_u64_f64",
      "full name": "uint64_t vcvtd_u64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[scalar] fcvtzu [64]",
      "function_cn": "[标量] 浮点数转为无符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtnd_s64_f64",
      "full name": "int64_t vcvtnd_s64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtns",
      "function_en": "[scalar] fcvtns [64]",
      "function_cn": "[标量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vcvtnd_u64_f64",
      "full name": "uint64_t vcvtnd_u64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtnu",
      "function_en": "[scalar] fcvtnu [64]",
      "function_cn": "[标量] 浮点数转为无符号整数，四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vcvtmd_s64_f64",
      "full name": "int64_t vcvtmd_s64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtms",
      "function_en": "[scalar] fcvtms [64]",
      "function_cn": "[标量] 浮点数转为有符号整数，向负无穷舍入 [64]"
    },
    {
      "name": "vcvtmd_u64_f64",
      "full name": "uint64_t vcvtmd_u64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtmu",
      "function_en": "[scalar] fcvtmu [64]",
      "function_cn": "[标量] 浮点数转为无符号整数，向负无穷舍入 [64]"
    },
    {
      "name": "vcvtpd_s64_f64",
      "full name": "int64_t vcvtpd_s64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtps",
      "function_en": "[scalar] fcvtps [64]",
      "function_cn": "[标量] 浮点数转为有符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvtpd_u64_f64",
      "full name": "uint64_t vcvtpd_u64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtpu",
      "function_en": "[scalar] fcvtpu [64]",
      "function_cn": "[标量] 浮点数转为无符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvtad_s64_f64",
      "full name": "int64_t vcvtad_s64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtas",
      "function_en": "[scalar] fcvtas [64]",
      "function_cn": "[标量] 浮点数转为有符号整数，四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vcvtad_u64_f64",
      "full name": "uint64_t vcvtad_u64_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtau",
      "function_en": "[scalar] fcvtau [64]",
      "function_cn": "[标量] 浮点数转为无符号整数，向正无穷舍入 [64]"
    },
    {
      "name": "vcvt_n_s32_f32",
      "full name": "int32x2_t vcvt_n_s32_f32(float32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvtq_n_s32_f32",
      "full name": "int32x4_t vcvtq_n_s32_f32(float32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [32]",
      "function_cn": "[向量] 浮点数转为有符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvt_n_u32_f32",
      "full name": "uint32x2_t vcvt_n_u32_f32(float32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvtq_n_u32_f32",
      "full name": "uint32x4_t vcvtq_n_u32_f32(float32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [32]",
      "function_cn": "[向量] 浮点数转为无符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvts_n_s32_f32",
      "full name": "int32_t vcvts_n_s32_f32(float32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[scalar] fcvtzs [32]",
      "function_cn": "[标量] 浮点数转为有符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvts_n_u32_f32",
      "full name": "uint32_t vcvts_n_u32_f32(float32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[scalar] fcvtzu [32]",
      "function_cn": "[标量] 浮点数转为无符号整数，向零舍入 [32]"
    },
    {
      "name": "vcvt_n_s64_f64",
      "full name": "int64x1_t vcvt_n_s64_f64(float64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtq_n_s64_f64",
      "full name": "int64x2_t vcvtq_n_s64_f64(float64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[vector] fcvtzs [64]",
      "function_cn": "[向量] 浮点数转为有符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvt_n_u64_f64",
      "full name": "uint64x1_t vcvt_n_u64_f64(float64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtq_n_u64_f64",
      "full name": "uint64x2_t vcvtq_n_u64_f64(float64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[vector] fcvtzu [64]",
      "function_cn": "[向量] 浮点数转为无符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtd_n_s64_f64",
      "full name": "int64_t vcvtd_n_s64_f64(float64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzs",
      "function_en": "[scalar] fcvtzs [64]",
      "function_cn": "[标量] 浮点数转为有符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvtd_n_u64_f64",
      "full name": "uint64_t vcvtd_n_u64_f64(float64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtzu",
      "function_en": "[scalar] fcvtzu [64]",
      "function_cn": "[标量] 浮点数转为无符号整数，向零舍入 [64]"
    },
    {
      "name": "vcvt_f32_s32",
      "full name": "float32x2_t vcvt_f32_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [32]",
      "function_cn": "[向量] 有符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvtq_f32_s32",
      "full name": "float32x4_t vcvtq_f32_s32(int32x4_t a)",
      "Intel name": "_mm_cvtepi32_ps",
      "Intel Asm": "cvtdq2ps",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [32]",
      "function_cn": "[向量] 有符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvt_f32_u32",
      "full name": "float32x2_t vcvt_f32_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [32]",
      "function_cn": "[向量] 无符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvtq_f32_u32",
      "full name": "float32x4_t vcvtq_f32_u32(uint32x4_t a)",
      "Intel name": "_mm512_cvtepu32_ps",
      "Intel Asm": "vcvtudq2ps",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [32]",
      "function_cn": "[向量] 无符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvts_f32_s32",
      "full name": "float32_t vcvts_f32_s32(int32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[scalar] scvtf [32]",
      "function_cn": "[标量] 有符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvts_f32_u32",
      "full name": "float32_t vcvts_f32_u32(uint32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[scalar] ucvtf [32]",
      "function_cn": "[标量] 无符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvt_f64_s64",
      "full name": "float64x1_t vcvt_f64_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [64]",
      "function_cn": "[向量] 有符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtq_f64_s64",
      "full name": "float64x2_t vcvtq_f64_s64(int64x2_t a)",
      "Intel name": "_mm_cvtepi64_pd",
      "Intel Asm": "vcvtqq2pd",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [64]",
      "function_cn": "[向量] 有符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvt_f64_u64",
      "full name": "float64x1_t vcvt_f64_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [64]",
      "function_cn": "[向量] 无符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtq_f64_u64",
      "full name": "float64x2_t vcvtq_f64_u64(uint64x2_t a)",
      "Intel name": "_mm_cvtepu64_pd",
      "Intel Asm": "vcvtuqq2pd",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [64]",
      "function_cn": "[向量] 无符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtd_f64_s64",
      "full name": "float64_t vcvtd_f64_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[scalar] scvtf [64]",
      "function_cn": "[标量] 有符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtd_f64_u64",
      "full name": "float64_t vcvtd_f64_u64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[scalar] ucvtf [64]",
      "function_cn": "[标量] 无符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvt_n_f32_s32",
      "full name": "float32x2_t vcvt_n_f32_s32(int32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [32]",
      "function_cn": "[向量] 有符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvtq_n_f32_s32",
      "full name": "float32x4_t vcvtq_n_f32_s32(int32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [32]",
      "function_cn": "[向量] 有符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvt_n_f32_u32",
      "full name": "float32x2_t vcvt_n_f32_u32(uint32x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [32]",
      "function_cn": "[向量] 无符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvtq_n_f32_u32",
      "full name": "float32x4_t vcvtq_n_f32_u32(uint32x4_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [32]",
      "function_cn": "[向量] 无符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvts_n_f32_s32",
      "full name": "float32_t vcvts_n_f32_s32(int32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[scalar] scvtf [32]",
      "function_cn": "[标量] 有符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvts_n_f32_u32",
      "full name": "float32_t vcvts_n_f32_u32(uint32_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[scalar] ucvtf [32]",
      "function_cn": "[标量] 无符号整数转为单精度浮点数 [32]"
    },
    {
      "name": "vcvt_n_f64_s64",
      "full name": "float64x1_t vcvt_n_f64_s64(int64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [64]",
      "function_cn": "[向量] 有符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtq_n_f64_s64",
      "full name": "float64x2_t vcvtq_n_f64_s64(int64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[vector] scvtf [64]",
      "function_cn": "[向量] 有符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvt_n_f64_u64",
      "full name": "float64x1_t vcvt_n_f64_u64(uint64x1_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [64]",
      "function_cn": "[向量] 无符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtq_n_f64_u64",
      "full name": "float64x2_t vcvtq_n_f64_u64(uint64x2_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[vector] ucvtf [64]",
      "function_cn": "[向量] 无符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtd_n_f64_s64",
      "full name": "float64_t vcvtd_n_f64_s64(int64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "scvtf",
      "function_en": "[scalar] scvtf [64]",
      "function_cn": "[标量] 有符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvtd_n_f64_u64",
      "full name": "float64_t vcvtd_n_f64_u64(uint64_t a, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ucvtf",
      "function_en": "[scalar] ucvtf [64]",
      "function_cn": "[标量] 无符号整数转为双精度浮点数 [64]"
    },
    {
      "name": "vcvt_f16_f32",
      "full name": "float16x4_t vcvt_f16_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtn",
      "function_en": "[vector] fcvtn [32]",
      "function_cn": "[向量] float32_t类型转为float16_t类型 [32]"
    },
    {
      "name": "vcvt_high_f16_f32",
      "full name": "float16x8_t vcvt_high_f16_f32(float16x4_t r, float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtn2",
      "function_en": "[vector] fcvtn2 [32]",
      "function_cn": "[向量] float32_t类型转为float16_t类型，写入目标寄存器的高半部分 [32]"
    },
    {
      "name": "vcvt_f32_f64",
      "full name": "float32x2_t vcvt_f32_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtn",
      "function_en": "[vector] fcvtn [64]",
      "function_cn": "[向量] float64_t类型转为float32_t类型 [64]"
    },
    {
      "name": "vcvt_high_f32_f64",
      "full name": "float32x4_t vcvt_high_f32_f64(float32x2_t r, float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtn2",
      "function_en": "[vector] fcvtn2 [64]",
      "function_cn": "[向量] float64_t类型转为float32_t类型，写入高半部分 [64]"
    },
    {
      "name": "vcvt_f32_f16",
      "full name": "float32x4_t vcvt_f32_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtl",
      "function_en": "[vector] fcvtl [16]",
      "function_cn": "[向量] float16_t类型转为float32_t类型 [16]"
    },
    {
      "name": "vcvt_high_f32_f16",
      "full name": "float32x4_t vcvt_high_f32_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtl2",
      "function_en": "[vector] fcvtl2 [16]",
      "function_cn": "[向量] float16_t类型转为float32_t类型 [16]"
    },
    {
      "name": "vcvt_f64_f32",
      "full name": "float64x2_t vcvt_f64_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtl",
      "function_en": "[vector] fcvtl [32]",
      "function_cn": "[向量] float32_t类型转为float64_t类型 [32]"
    },
    {
      "name": "vcvt_high_f64_f32",
      "full name": "float64x2_t vcvt_high_f64_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtl2",
      "function_en": "[vector] fcvtl2 [32]",
      "function_cn": "[向量] float32_t类型转为float64_t类型 [32]"
    },
    {
      "name": "vcvtx_f32_f64",
      "full name": "float32x2_t vcvtx_f32_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtxn",
      "function_en": "[vector] fcvtxn [64]",
      "function_cn": "[向量] float64_t类型转为float32_t类型 [64]"
    },
    {
      "name": "vcvtxd_f32_f64",
      "full name": "float32_t vcvtxd_f32_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtxn",
      "function_en": "[scalar] fcvtxn [64]",
      "function_cn": "[标量] float64_t类型转为float32_t类型 [64]"
    },
    {
      "name": "vcvtx_high_f32_f64",
      "full name": "float32x4_t vcvtx_high_f32_f64(float32x2_t r, float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fcvtxn2",
      "function_en": "[vector] fcvtxn2 [64]",
      "function_cn": "[向量] float64_t类型转为float32_t类型 [64]"
    },
    {
      "name": "vrnd_f32",
      "full name": "float32x2_t vrnd_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintz",
      "function_en": "[vector] frintz [32]",
      "function_cn": "[向量] 浮点数向零舍入 [32]"
    },
    {
      "name": "vrndq_f32",
      "full name": "float32x4_t vrndq_f32(float32x4_t a)",
      "Intel name": "_mm_round_ps",
      "Intel Asm": "roundps",
      "Arm Asm": "frintz",
      "function_en": "[vector] frintz [32]",
      "function_cn": "[向量] 浮点数向零舍入 [32]"
    },
    {
      "name": "vrnd_f64",
      "full name": "float64x1_t vrnd_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintz",
      "function_en": "[vector] frintz [64]",
      "function_cn": "[向量] 浮点数向零舍入 [64]"
    },
    {
      "name": "vrndq_f64",
      "full name": "float64x2_t vrndq_f64(float64x2_t a)",
      "Intel name": "_mm_round_pd",
      "Intel Asm": "roundpd",
      "Arm Asm": "frintz",
      "function_en": "[vector] frintz [64]",
      "function_cn": "[向量] 浮点数向零舍入 [64]"
    },
    {
      "name": "vrndn_f32",
      "full name": "float32x2_t vrndn_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintn",
      "function_en": "[vector] frintn [32]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vrndnq_f32",
      "full name": "float32x4_t vrndnq_f32(float32x4_t a)",
      "Intel name": "_mm_round_ps",
      "Intel Asm": "roundps",
      "Arm Asm": "frintn",
      "function_en": "[vector] frintn [32]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vrndn_f64",
      "full name": "float64x1_t vrndn_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintn",
      "function_en": "[vector] frintn [64]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vrndnq_f64",
      "full name": "float64x2_t vrndnq_f64(float64x2_t a)",
      "Intel name": "_mm_round_pd",
      "Intel Asm": "roundpd",
      "Arm Asm": "frintn",
      "function_en": "[vector] frintn [64]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时向偶数舍入 [64]"
    },
    {
      "name": "vrndns_f32",
      "full name": "float32_t vrndns_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintn",
      "function_en": "[scalar] frintn [32]",
      "function_cn": "[标量] 浮点数四舍五入到最近的值，数字落在中间时向偶数舍入 [32]"
    },
    {
      "name": "vrndm_f32",
      "full name": "float32x2_t vrndm_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintm",
      "function_en": "[vector] frintm [32]",
      "function_cn": "[向量] 浮点数向负无穷舍入 [32]"
    },
    {
      "name": "vrndmq_f32",
      "full name": "float32x4_t vrndmq_f32(float32x4_t a)",
      "Intel name": "_mm_round_ps",
      "Intel Asm": "roundps",
      "Arm Asm": "frintm",
      "function_en": "[vector] frintm [32]",
      "function_cn": "[向量] 浮点数向负无穷舍入 [32]"
    },
    {
      "name": "vrndm_f64",
      "full name": "float64x1_t vrndm_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintm",
      "function_en": "[vector] frintm [64]",
      "function_cn": "[向量] 浮点数向负无穷舍入 [64]"
    },
    {
      "name": "vrndmq_f64",
      "full name": "float64x2_t vrndmq_f64(float64x2_t a)",
      "Intel name": "_mm_round_pd",
      "Intel Asm": "roundpd",
      "Arm Asm": "frintm",
      "function_en": "[vector] frintm [64]",
      "function_cn": "[向量] 浮点数向负无穷舍入 [64]"
    },
    {
      "name": "vrndp_f32",
      "full name": "float32x2_t vrndp_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintp",
      "function_en": "[vector] frintp [32]",
      "function_cn": "[向量] 浮点数向正无穷舍入 [32]"
    },
    {
      "name": "vrndpq_f32",
      "full name": "float32x4_t vrndpq_f32(float32x4_t a)",
      "Intel name": "_mm_round_ps",
      "Intel Asm": "roundps",
      "Arm Asm": "frintp",
      "function_en": "[vector] frintp [32]",
      "function_cn": "[向量] 浮点数向正无穷舍入 [32]"
    },
    {
      "name": "vrndp_f64",
      "full name": "float64x1_t vrndp_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintp",
      "function_en": "[vector] frintp [64]",
      "function_cn": "[向量] 浮点数向正无穷舍入 [64]"
    },
    {
      "name": "vrndpq_f64",
      "full name": "float64x2_t vrndpq_f64(float64x2_t a)",
      "Intel name": "_mm_round_pd",
      "Intel Asm": "roundpd",
      "Arm Asm": "frintp",
      "function_en": "[vector] frintp [64]",
      "function_cn": "[向量] 浮点数向正无穷舍入 [64]"
    },
    {
      "name": "vrnda_f32",
      "full name": "float32x2_t vrnda_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinta",
      "function_en": "[vector] frinta [32]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vrndaq_f32",
      "full name": "float32x4_t vrndaq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinta",
      "function_en": "[vector] frinta [32]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时远离零舍入 [32]"
    },
    {
      "name": "vrnda_f64",
      "full name": "float64x1_t vrnda_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinta",
      "function_en": "[vector] frinta [64]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vrndaq_f64",
      "full name": "float64x2_t vrndaq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinta",
      "function_en": "[vector] frinta [64]",
      "function_cn": "[向量] 浮点数四舍五入到最近的值，数字落在中间时远离零舍入 [64]"
    },
    {
      "name": "vrndi_f32",
      "full name": "float32x2_t vrndi_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinti",
      "function_en": "[vector] frinti [32]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [32]"
    },
    {
      "name": "vrndiq_f32",
      "full name": "float32x4_t vrndiq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinti",
      "function_en": "[vector] frinti [32]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [32]"
    },
    {
      "name": "vrndi_f64",
      "full name": "float64x1_t vrndi_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinti",
      "function_en": "[vector] frinti [64]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [64]"
    },
    {
      "name": "vrndiq_f64",
      "full name": "float64x2_t vrndiq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frinti",
      "function_en": "[vector] frinti [64]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [64]"
    },
    {
      "name": "vrndx_f32",
      "full name": "float32x2_t vrndx_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintx",
      "function_en": "[vector] frintx [32]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [32]"
    },
    {
      "name": "vrndxq_f32",
      "full name": "float32x4_t vrndxq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintx",
      "function_en": "[vector] frintx [32]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [32]"
    },
    {
      "name": "vrndx_f64",
      "full name": "float64x1_t vrndx_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintx",
      "function_en": "[vector] frintx [64]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [64]"
    },
    {
      "name": "vrndxq_f64",
      "full name": "float64x2_t vrndxq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frintx",
      "function_en": "[vector] frintx [64]",
      "function_cn": "[向量] 浮点数舍入，使用当前FPCR(浮点控制寄存器)中设置的舍入模式 [64]"
    },
    {
      "name": "vmovn_s16",
      "full name": "int8x8_t vmovn_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn",
      "function_en": "[vector] xtn [16]",
      "function_cn": "[向量] 提取低位部分 [16]"
    },
    {
      "name": "vmovn_s32",
      "full name": "int16x4_t vmovn_s32(int32x4_t a)",
      "Intel name": "_mm_cvtepi32_epi16",
      "Intel Asm": "vpmovd",
      "Arm Asm": "xtn",
      "function_en": "[vector] xtn [32]",
      "function_cn": "[向量] 提取低位部分 [32]"
    },
    {
      "name": "vmovn_s64",
      "full name": "int32x2_t vmovn_s64(int64x2_t a)",
      "Intel name": "_mm_cvtepi64_epi32",
      "Intel Asm": "vpmovqd",
      "Arm Asm": "xtn",
      "function_en": "[vector] xtn [64]",
      "function_cn": "[向量] 提取低位部分 [64]"
    },
    {
      "name": "vmovn_u16",
      "full name": "uint8x8_t vmovn_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn",
      "function_en": "[vector] xtn [16]",
      "function_cn": "[向量] 提取低位部分 [16]"
    },
    {
      "name": "vmovn_u32",
      "full name": "uint16x4_t vmovn_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn",
      "function_en": "[vector] xtn [32]",
      "function_cn": "[向量] 提取低位部分 [32]"
    },
    {
      "name": "vmovn_u64",
      "full name": "uint32x2_t vmovn_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn",
      "function_en": "[vector] xtn [64]",
      "function_cn": "[向量] 提取低位部分 [64]"
    },
    {
      "name": "vmovn_high_s16",
      "full name": "int8x16_t vmovn_high_s16(int8x8_t r, int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn2",
      "function_en": "[vector] xtn2 [16]",
      "function_cn": "[向量] 提取高位部分 [16]"
    },
    {
      "name": "vmovn_high_s32",
      "full name": "int16x8_t vmovn_high_s32(int16x4_t r, int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn2",
      "function_en": "[vector] xtn2 [32]",
      "function_cn": "[向量] 提取高位部分 [32]"
    },
    {
      "name": "vmovn_high_s64",
      "full name": "int32x4_t vmovn_high_s64(int32x2_t r, int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn2",
      "function_en": "[vector] xtn2 [64]",
      "function_cn": "[向量] 提取高位部分 [64]"
    },
    {
      "name": "vmovn_high_u16",
      "full name": "uint8x16_t vmovn_high_u16(uint8x8_t r, uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn2",
      "function_en": "[vector] xtn2 [16]",
      "function_cn": "[向量] 提取高位部分 [16]"
    },
    {
      "name": "vmovn_high_u32",
      "full name": "uint16x8_t vmovn_high_u32(uint16x4_t r, uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn2",
      "function_en": "[vector] xtn2 [32]",
      "function_cn": "[向量] 提取高位部分 [32]"
    },
    {
      "name": "vmovn_high_u64",
      "full name": "uint32x4_t vmovn_high_u64(uint32x2_t r, uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "xtn2",
      "function_en": "[vector] xtn2 [64]",
      "function_cn": "[向量] 提取高位部分 [64]"
    },
    {
      "name": "vmovl_s8",
      "full name": "int16x8_t vmovl_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshll",
      "function_en": "[vector] sshll [8]",
      "function_cn": "[向量] 左移0位 [8]"
    },
    {
      "name": "vmovl_s16",
      "full name": "int32x4_t vmovl_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshll",
      "function_en": "[vector] sshll [16]",
      "function_cn": "[向量] 左移0位 [16]"
    },
    {
      "name": "vmovl_s32",
      "full name": "int64x2_t vmovl_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshll",
      "function_en": "[vector] sshll [32]",
      "function_cn": "[向量] 左移0位 [32]"
    },
    {
      "name": "vmovl_u8",
      "full name": "uint16x8_t vmovl_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushll",
      "function_en": "[vector] ushll [8]",
      "function_cn": "[向量] 左移0位 [8]"
    },
    {
      "name": "vmovl_u16",
      "full name": "uint32x4_t vmovl_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushll",
      "function_en": "[vector] ushll [16]",
      "function_cn": "[向量] 左移0位 [16]"
    },
    {
      "name": "vmovl_u32",
      "full name": "uint64x2_t vmovl_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushll",
      "function_en": "[vector] ushll [32]",
      "function_cn": "[向量] 左移0位 [32]"
    },
    {
      "name": "vmovl_high_s8",
      "full name": "int16x8_t vmovl_high_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshll2",
      "function_en": "[vector] sshll2 [8]",
      "function_cn": "[向量] 高位部分左移0位 [8]"
    },
    {
      "name": "vmovl_high_s16",
      "full name": "int32x4_t vmovl_high_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshll2",
      "function_en": "[vector] sshll2 [16]",
      "function_cn": "[向量] 高位部分左移0位 [16]"
    },
    {
      "name": "vmovl_high_s32",
      "full name": "int64x2_t vmovl_high_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sshll2",
      "function_en": "[vector] sshll2 [32]",
      "function_cn": "[向量] 高位部分左移0位 [32]"
    },
    {
      "name": "vmovl_high_u8",
      "full name": "uint16x8_t vmovl_high_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushll2",
      "function_en": "[vector] ushll2 [8]",
      "function_cn": "[向量] 高位部分左移0位 [8]"
    },
    {
      "name": "vmovl_high_u16",
      "full name": "uint32x4_t vmovl_high_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushll2",
      "function_en": "[vector] ushll2 [16]",
      "function_cn": "[向量] 高位部分左移0位 [16]"
    },
    {
      "name": "vmovl_high_u32",
      "full name": "uint64x2_t vmovl_high_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ushll2",
      "function_en": "[vector] ushll2 [32]",
      "function_cn": "[向量] 高位部分左移0位 [32]"
    },
    {
      "name": "vqmovn_s16",
      "full name": "int8x8_t vqmovn_s16(int16x8_t a)",
      "Intel name": "_mm_cvtsepi16_epi8",
      "Intel Asm": "vpmovswb",
      "Arm Asm": "sqxtn",
      "function_en": "[vector] sqxtn [16]",
      "function_cn": "[向量] 饱和提取每个元素的低位部分 [16]"
    },
    {
      "name": "vqmovn_s32",
      "full name": "int16x4_t vqmovn_s32(int32x4_t a)",
      "Intel name": "_mm_cvtsepi32_epi16",
      "Intel Asm": "vpmovsdw",
      "Arm Asm": "sqxtn",
      "function_en": "[vector] sqxtn [32]",
      "function_cn": "[向量] 饱和提取每个元素的低位部分 [32]"
    },
    {
      "name": "vqmovn_s64",
      "full name": "int32x2_t vqmovn_s64(int64x2_t a)",
      "Intel name": "_mm_cvtsepi64_epi32",
      "Intel Asm": "vpmovsqd",
      "Arm Asm": "sqxtn",
      "function_en": "[vector] sqxtn [64]",
      "function_cn": "[向量] 饱和提取每个元素的低位部分 [64]"
    },
    {
      "name": "vqmovn_u16",
      "full name": "uint8x8_t vqmovn_u16(uint16x8_t a)",
      "Intel name": "_mm_cvtusepi16_epi8",
      "Intel Asm": "vpmovuswb",
      "Arm Asm": "uqxtn",
      "function_en": "[vector] uqxtn [16]",
      "function_cn": "[向量] 饱和提取每个元素的低位部分 [16]"
    },
    {
      "name": "vqmovn_u32",
      "full name": "uint16x4_t vqmovn_u32(uint32x4_t a)",
      "Intel name": "_mm_cvtusepi32_epi16",
      "Intel Asm": "vpmovusdw",
      "Arm Asm": "uqxtn",
      "function_en": "[vector] uqxtn [32]",
      "function_cn": "[向量] 饱和提取每个元素的低位部分 [32]"
    },
    {
      "name": "vqmovn_u64",
      "full name": "uint32x2_t vqmovn_u64(uint64x2_t a)",
      "Intel name": "_mm_cvtusepi64_epi32",
      "Intel Asm": "vpmovusqd",
      "Arm Asm": "uqxtn",
      "function_en": "[vector] uqxtn [64]",
      "function_cn": "[向量] 饱和提取每个元素的低位部分 [64]"
    },
    {
      "name": "vqmovnh_s16",
      "full name": "int8_t vqmovnh_s16(int16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtn",
      "function_en": "[scalar] sqxtn [16]",
      "function_cn": "[标量] 饱和提取每个元素的低位部分 [16]"
    },
    {
      "name": "vqmovns_s32",
      "full name": "int16_t vqmovns_s32(int32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtn",
      "function_en": "[scalar] sqxtn [32]",
      "function_cn": "[标量] 饱和提取每个元素的低位部分 [32]"
    },
    {
      "name": "vqmovnd_s64",
      "full name": "int32_t vqmovnd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtn",
      "function_en": "[scalar] sqxtn [64]",
      "function_cn": "[标量] 饱和提取每个元素的低位部分 [64]"
    },
    {
      "name": "vqmovnh_u16",
      "full name": "uint8_t vqmovnh_u16(uint16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqxtn",
      "function_en": "[scalar] uqxtn [16]",
      "function_cn": "[标量] 饱和提取每个元素的低位部分 [16]"
    },
    {
      "name": "vqmovns_u32",
      "full name": "uint16_t vqmovns_u32(uint32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqxtn",
      "function_en": "[scalar] uqxtn [32]",
      "function_cn": "[标量] 饱和提取每个元素的低位部分 [32]"
    },
    {
      "name": "vqmovnd_u64",
      "full name": "uint32_t vqmovnd_u64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqxtn",
      "function_en": "[scalar] uqxtn [64]",
      "function_cn": "[标量] 饱和提取每个元素的低位部分 [64]"
    },
    {
      "name": "vqmovn_high_s16",
      "full name": "int8x16_t vqmovn_high_s16(int8x8_t r, int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtn2",
      "function_en": "[vector] sqxtn2 [16]",
      "function_cn": "[向量] 饱和提取向量a中每个元素的高位部分，写入目标寄存器的高半部分 [16]"
    },
    {
      "name": "vqmovn_high_s32",
      "full name": "int16x8_t vqmovn_high_s32(int16x4_t r, int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtn2",
      "function_en": "[vector] sqxtn2 [32]",
      "function_cn": "[向量] 饱和提取向量a中每个元素的高位部分，写入目标寄存器的高半部分 [32]"
    },
    {
      "name": "vqmovn_high_s64",
      "full name": "int32x4_t vqmovn_high_s64(int32x2_t r, int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtn2",
      "function_en": "[vector] sqxtn2 [64]",
      "function_cn": "[向量] 饱和提取向量a中每个元素的高位部分，写入目标寄存器的高半部分 [64]"
    },
    {
      "name": "vqmovn_high_u16",
      "full name": "uint8x16_t vqmovn_high_u16(uint8x8_t r, uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqxtn2",
      "function_en": "[vector] uqxtn2 [16]",
      "function_cn": "[向量] 饱和提取向量a中每个元素的高位部分，写入目标寄存器的高半部分 [16]"
    },
    {
      "name": "vqmovn_high_u32",
      "full name": "uint16x8_t vqmovn_high_u32(uint16x4_t r, uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqxtn2",
      "function_en": "[vector] uqxtn2 [32]",
      "function_cn": "[向量] 饱和提取向量a中每个元素的高位部分，写入目标寄存器的高半部分 [32]"
    },
    {
      "name": "vqmovn_high_u64",
      "full name": "uint32x4_t vqmovn_high_u64(uint32x2_t r, uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uqxtn2",
      "function_en": "[vector] uqxtn2 [64]",
      "function_cn": "[向量] 饱和提取向量a中每个元素的高位部分，写入目标寄存器的高半部分 [64]"
    },
    {
      "name": "vqmovun_s16",
      "full name": "uint8x8_t vqmovun_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun",
      "function_en": "[vector] sqxtun [16]",
      "function_cn": "[向量] 有符号整数饱和提取低半部分为无符号整数 [16]"
    },
    {
      "name": "vqmovun_s32",
      "full name": "uint16x4_t vqmovun_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun",
      "function_en": "[vector] sqxtun [32]",
      "function_cn": "[向量] 有符号整数饱和提取低半部分为无符号整数 [32]"
    },
    {
      "name": "vqmovun_s64",
      "full name": "uint32x2_t vqmovun_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun",
      "function_en": "[vector] sqxtun [64]",
      "function_cn": "[向量] 有符号整数饱和提取低半部分为无符号整数 [64]"
    },
    {
      "name": "vqmovunh_s16",
      "full name": "uint8_t vqmovunh_s16(int16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun",
      "function_en": "[scalar] sqxtun [16]",
      "function_cn": "[标量] 有符号整数饱和提取低半部分为无符号整数 [16]"
    },
    {
      "name": "vqmovuns_s32",
      "full name": "uint16_t vqmovuns_s32(int32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun",
      "function_en": "[scalar] sqxtun [32]",
      "function_cn": "[标量] 有符号整数饱和提取低半部分为无符号整数 [32]"
    },
    {
      "name": "vqmovund_s64",
      "full name": "uint32_t vqmovund_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun",
      "function_en": "[scalar] sqxtun [64]",
      "function_cn": "[标量] 有符号整数饱和提取低半部分为无符号整数 [64]"
    },
    {
      "name": "vqmovun_high_s16",
      "full name": "uint8x16_t vqmovun_high_s16(uint8x8_t r, int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun2",
      "function_en": "[vector] sqxtun2 [16]",
      "function_cn": "[向量] 有符号整数饱和提取高半部分为无符号整数，写入目标存储器的高半部分 [16]"
    },
    {
      "name": "vqmovun_high_s32",
      "full name": "uint16x8_t vqmovun_high_s32(uint16x4_t r, int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun2",
      "function_en": "[vector] sqxtun2 [32]",
      "function_cn": "[向量] 有符号整数饱和提取高半部分为无符号整数，写入目标存储器的高半部分 [32]"
    },
    {
      "name": "vqmovun_high_s64",
      "full name": "uint32x4_t vqmovun_high_s64(uint32x2_t r, int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqxtun2",
      "function_en": "[vector] sqxtun2 [64]",
      "function_cn": "[向量] 有符号整数饱和提取高半部分为无符号整数，写入目标存储器的高半部分 [64]"
    },
    {
      "name": "vmla_lane_s16",
      "full name": "int16x4_t vmla_lane_s16(int16x4_t a, int16x4_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlaq_lane_s16",
      "full name": "int16x8_t vmlaq_lane_s16(int16x8_t a, int16x8_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmla_lane_s32",
      "full name": "int32x2_t vmla_lane_s32(int32x2_t a, int32x2_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlaq_lane_s32",
      "full name": "int32x4_t vmlaq_lane_s32(int32x4_t a, int32x4_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmla_lane_u16",
      "full name": "uint16x4_t vmla_lane_u16(uint16x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlaq_lane_u16",
      "full name": "uint16x8_t vmlaq_lane_u16(uint16x8_t a, uint16x8_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmla_lane_u32",
      "full name": "uint32x2_t vmla_lane_u32(uint32x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlaq_lane_u32",
      "full name": "uint32x4_t vmlaq_lane_u32(uint32x4_t a, uint32x4_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmla_lane_f32",
      "full name": "float32x2_t vmla_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlaq_lane_f32",
      "full name": "float32x4_t vmlaq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmla_laneq_s16",
      "full name": "int16x4_t vmla_laneq_s16(int16x4_t a, int16x4_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlaq_laneq_s16",
      "full name": "int16x8_t vmlaq_laneq_s16(int16x8_t a, int16x8_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmla_laneq_s32",
      "full name": "int32x2_t vmla_laneq_s32(int32x2_t a, int32x2_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlaq_laneq_s32",
      "full name": "int32x4_t vmlaq_laneq_s32(int32x4_t a, int32x4_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmla_laneq_u16",
      "full name": "uint16x4_t vmla_laneq_u16(uint16x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlaq_laneq_u16",
      "full name": "uint16x8_t vmlaq_laneq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmla_laneq_u32",
      "full name": "uint32x2_t vmla_laneq_u32(uint32x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlaq_laneq_u32",
      "full name": "uint32x4_t vmlaq_laneq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmla_laneq_f32",
      "full name": "float32x2_t vmla_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlaq_laneq_f32",
      "full name": "float32x4_t vmlaq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_lane_s16",
      "full name": "int32x4_t vmlal_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal",
      "function_en": "[vector] smlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_lane_s32",
      "full name": "int64x2_t vmlal_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal",
      "function_en": "[vector] smlal [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_lane_u16",
      "full name": "uint32x4_t vmlal_lane_u16(uint32x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal",
      "function_en": "[vector] umlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_lane_u32",
      "full name": "uint64x2_t vmlal_lane_u32(uint64x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal",
      "function_en": "[vector] umlal [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_high_lane_s16",
      "full name": "int32x4_t vmlal_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal2",
      "function_en": "[vector] smlal2 [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_high_lane_s32",
      "full name": "int64x2_t vmlal_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal2",
      "function_en": "[vector] smlal2 [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_high_lane_u16",
      "full name": "uint32x4_t vmlal_high_lane_u16(uint32x4_t a, uint16x8_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal2",
      "function_en": "[vector] umlal2 [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_high_lane_u32",
      "full name": "uint64x2_t vmlal_high_lane_u32(uint64x2_t a, uint32x4_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal2",
      "function_en": "[vector] umlal2 [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_laneq_s16",
      "full name": "int32x4_t vmlal_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal",
      "function_en": "[vector] smlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_laneq_s32",
      "full name": "int64x2_t vmlal_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal",
      "function_en": "[vector] smlal [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_laneq_u16",
      "full name": "uint32x4_t vmlal_laneq_u16(uint32x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal",
      "function_en": "[vector] umlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_laneq_u32",
      "full name": "uint64x2_t vmlal_laneq_u32(uint64x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal",
      "function_en": "[vector] umlal [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_high_laneq_s16",
      "full name": "int32x4_t vmlal_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal2",
      "function_en": "[vector] smlal2 [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_high_laneq_s32",
      "full name": "int64x2_t vmlal_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal2",
      "function_en": "[vector] smlal2 [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [32]"
    },
    {
      "name": "vmlal_high_laneq_u16",
      "full name": "uint32x4_t vmlal_high_laneq_u16(uint32x4_t a, uint16x8_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal2",
      "function_en": "[vector] umlal2 [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [16]"
    },
    {
      "name": "vmlal_high_laneq_u32",
      "full name": "uint64x2_t vmlal_high_laneq_u32(uint64x2_t a, uint32x4_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal2",
      "function_en": "[vector] umlal2 [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a [32]"
    },
    {
      "name": "vqdmlal_lane_s16",
      "full name": "int32x4_t vqdmlal_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[vector] sqdmlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中的每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlal_lane_s32",
      "full name": "int64x2_t vqdmlal_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[vector] sqdmlal [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [32]"
    },
    {
      "name": "vqdmlalh_lane_s16",
      "full name": "int32_t vqdmlalh_lane_s16(int32_t a, int16_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[scalar] sqdmlal [16]",
      "function_cn": "[标量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlals_lane_s32",
      "full name": "int64_t vqdmlals_lane_s32(int64_t a, int32_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[scalar] sqdmlal [32]",
      "function_cn": "[标量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [32]"
    },
    {
      "name": "vqdmlal_high_lane_s16",
      "full name": "int32x4_t vqdmlal_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal2",
      "function_en": "[vector] sqdmlal2 [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlal_high_lane_s32",
      "full name": "int64x2_t vqdmlal_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal2",
      "function_en": "[vector] sqdmlal2 [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a(饱和运算) [32]"
    },
    {
      "name": "vqdmlal_laneq_s16",
      "full name": "int32x4_t vqdmlal_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[vector] sqdmlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlal_laneq_s32",
      "full name": "int64x2_t vqdmlal_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[vector] sqdmlal [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlalh_laneq_s16",
      "full name": "int32_t vqdmlalh_laneq_s16(int32_t a, int16_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[scalar] sqdmlal [16]",
      "function_cn": "[标量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlals_laneq_s32",
      "full name": "int64_t vqdmlals_laneq_s32(int64_t a, int32_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[scalar] sqdmlal [32]",
      "function_cn": "[标量] 向量v的第lane个元素分别乘以b中每个元素，再加上a(饱和运算) [32]"
    },
    {
      "name": "vqdmlal_high_laneq_s16",
      "full name": "int32x4_t vqdmlal_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal2",
      "function_en": "[vector] sqdmlal2 [16]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a(饱和运算) [16]"
    },
    {
      "name": "vqdmlal_high_laneq_s32",
      "full name": "int64x2_t vqdmlal_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal2",
      "function_en": "[vector] sqdmlal2 [32]",
      "function_cn": "[向量] 向量v的第lane个元素分别乘以b的高半部分中每个元素，再加上a(饱和运算) [32]"
    },
    {
      "name": "vmls_lane_s16",
      "full name": "int16x4_t vmls_lane_s16(int16x4_t a, int16x4_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsq_lane_s16",
      "full name": "int16x8_t vmlsq_lane_s16(int16x8_t a, int16x8_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmls_lane_s32",
      "full name": "int32x2_t vmls_lane_s32(int32x2_t a, int32x2_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_lane_s32",
      "full name": "int32x4_t vmlsq_lane_s32(int32x4_t a, int32x4_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmls_lane_u16",
      "full name": "uint16x4_t vmls_lane_u16(uint16x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsq_lane_u16",
      "full name": "uint16x8_t vmlsq_lane_u16(uint16x8_t a, uint16x8_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmls_lane_u32",
      "full name": "uint32x2_t vmls_lane_u32(uint32x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_lane_u32",
      "full name": "uint32x4_t vmlsq_lane_u32(uint32x4_t a, uint32x4_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmls_lane_f32",
      "full name": "float32x2_t vmls_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 浮点数乘减 [32]"
    },
    {
      "name": "vmlsq_lane_f32",
      "full name": "float32x4_t vmlsq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 浮点数乘减 [32]"
    },
    {
      "name": "vmls_laneq_s16",
      "full name": "int16x4_t vmls_laneq_s16(int16x4_t a, int16x4_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsq_laneq_s16",
      "full name": "int16x8_t vmlsq_laneq_s16(int16x8_t a, int16x8_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmls_laneq_s32",
      "full name": "int32x2_t vmls_laneq_s32(int32x2_t a, int32x2_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_laneq_s32",
      "full name": "int32x4_t vmlsq_laneq_s32(int32x4_t a, int32x4_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmls_laneq_u16",
      "full name": "uint16x4_t vmls_laneq_u16(uint16x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsq_laneq_u16",
      "full name": "uint16x8_t vmlsq_laneq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmls_laneq_u32",
      "full name": "uint32x2_t vmls_laneq_u32(uint32x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_laneq_u32",
      "full name": "uint32x4_t vmlsq_laneq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmls_laneq_f32",
      "full name": "float32x2_t vmls_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 浮点数乘减 [32]"
    },
    {
      "name": "vmlsq_laneq_f32",
      "full name": "float32x4_t vmlsq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 浮点数乘减 [32]"
    },
    {
      "name": "vmlsl_lane_s16",
      "full name": "int32x4_t vmlsl_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl",
      "function_en": "[vector] smlsl [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsl_lane_s32",
      "full name": "int64x2_t vmlsl_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl",
      "function_en": "[vector] smlsl [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_lane_u16",
      "full name": "uint32x4_t vmlsl_lane_u16(uint32x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl",
      "function_en": "[vector] umlsl [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsl_lane_u32",
      "full name": "uint64x2_t vmlsl_lane_u32(uint64x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl",
      "function_en": "[vector] umlsl [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_high_lane_s16",
      "full name": "int32x4_t vmlsl_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl2",
      "function_en": "[vector] smlsl2 [16]",
      "function_cn": "[向量] 乘减(b选取高半部分) [16]"
    },
    {
      "name": "vmlsl_high_lane_s32",
      "full name": "int64x2_t vmlsl_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl2",
      "function_en": "[vector] smlsl2 [32]",
      "function_cn": "[向量] 乘减(b选取高半部分) [32]"
    },
    {
      "name": "vmlsl_high_lane_u16",
      "full name": "uint32x4_t vmlsl_high_lane_u16(uint32x4_t a, uint16x8_t b, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl2",
      "function_en": "[vector] umlsl2 [16]",
      "function_cn": "[向量] 乘减(b选取高半部分) [16]"
    },
    {
      "name": "vmlsl_high_lane_u32",
      "full name": "uint64x2_t vmlsl_high_lane_u32(uint64x2_t a, uint32x4_t b, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl2",
      "function_en": "[vector] umlsl2 [32]",
      "function_cn": "[向量] 乘减(b选取高半部分) [32]"
    },
    {
      "name": "vmlsl_laneq_s16",
      "full name": "int32x4_t vmlsl_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl",
      "function_en": "[vector] smlsl [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsl_laneq_s32",
      "full name": "int64x2_t vmlsl_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl",
      "function_en": "[vector] smlsl [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_laneq_u16",
      "full name": "uint32x4_t vmlsl_laneq_u16(uint32x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl",
      "function_en": "[vector] umlsl [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsl_laneq_u32",
      "full name": "uint64x2_t vmlsl_laneq_u32(uint64x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl",
      "function_en": "[vector] umlsl [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_high_laneq_s16",
      "full name": "int32x4_t vmlsl_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl2",
      "function_en": "[vector] smlsl2 [16]",
      "function_cn": "[向量] 乘减(b选取高半部分) [16]"
    },
    {
      "name": "vmlsl_high_laneq_s32",
      "full name": "int64x2_t vmlsl_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl2",
      "function_en": "[vector] smlsl2 [32]",
      "function_cn": "[向量] 乘减(b选取高半部分) [32]"
    },
    {
      "name": "vmlsl_high_laneq_u16",
      "full name": "uint32x4_t vmlsl_high_laneq_u16(uint32x4_t a, uint16x8_t b, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl2",
      "function_en": "[vector] umlsl2 [16]",
      "function_cn": "[向量] 乘减(b选取高半部分) [16]"
    },
    {
      "name": "vmlsl_high_laneq_u32",
      "full name": "uint64x2_t vmlsl_high_laneq_u32(uint64x2_t a, uint32x4_t b, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl2",
      "function_en": "[vector] umlsl2 [32]",
      "function_cn": "[向量] 乘减(b选取高半部分) [32]"
    },
    {
      "name": "vqdmlsl_lane_s16",
      "full name": "int32x4_t vqdmlsl_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [16]",
      "function_cn": "[向量] 饱和乘减 [16]"
    },
    {
      "name": "vqdmlsl_lane_s32",
      "full name": "int64x2_t vqdmlsl_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [32]",
      "function_cn": "[向量] 饱和乘减 [32]"
    },
    {
      "name": "vqdmlslh_lane_s16",
      "full name": "int32_t vqdmlslh_lane_s16(int32_t a, int16_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[scalar] sqdmlsl [16]",
      "function_cn": "[标量] 饱和乘减 [16]"
    },
    {
      "name": "vqdmlsls_lane_s32",
      "full name": "int64_t vqdmlsls_lane_s32(int64_t a, int32_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[scalar] sqdmlsl [32]",
      "function_cn": "[标量] 饱和乘减 [32]"
    },
    {
      "name": "vqdmlsl_high_lane_s16",
      "full name": "int32x4_t vqdmlsl_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl2",
      "function_en": "[vector] sqdmlsl2 [16]",
      "function_cn": "[向量] 饱和乘减(b选取高半部分) [16]"
    },
    {
      "name": "vqdmlsl_high_lane_s32",
      "full name": "int64x2_t vqdmlsl_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl2",
      "function_en": "[vector] sqdmlsl2 [32]",
      "function_cn": "[向量] 饱和乘减(b选取高半部分) [32]"
    },
    {
      "name": "vqdmlsl_laneq_s16",
      "full name": "int32x4_t vqdmlsl_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [16]",
      "function_cn": "[向量] 饱和乘减 [16]"
    },
    {
      "name": "vqdmlsl_laneq_s32",
      "full name": "int64x2_t vqdmlsl_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [32]",
      "function_cn": "[向量] 饱和乘减 [32]"
    },
    {
      "name": "vqdmlslh_laneq_s16",
      "full name": "int32_t vqdmlslh_laneq_s16(int32_t a, int16_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [16]",
      "function_cn": "[向量] 饱和乘减 [16]"
    },
    {
      "name": "vqdmlsls_laneq_s32",
      "full name": "int64_t vqdmlsls_laneq_s32(int64_t a, int32_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [32]",
      "function_cn": "[向量] 饱和乘减 [32]"
    },
    {
      "name": "vqdmlsl_high_laneq_s16",
      "full name": "int32x4_t vqdmlsl_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl2",
      "function_en": "[vector] sqdmlsl2 [16]",
      "function_cn": "[向量] 饱和乘减(b选取高半部分) [16]"
    },
    {
      "name": "vqdmlsl_high_laneq_s32",
      "full name": "int64x2_t vqdmlsl_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl2",
      "function_en": "[vector] sqdmlsl2 [32]",
      "function_cn": "[向量] 饱和乘减(b选取高半部分) [32]"
    },
    {
      "name": "vmul_n_s16",
      "full name": "int16x4_t vmul_n_s16(int16x4_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmulq_n_s16",
      "full name": "int16x8_t vmulq_n_s16(int16x8_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmul_n_s32",
      "full name": "int32x2_t vmul_n_s32(int32x2_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmulq_n_s32",
      "full name": "int32x4_t vmulq_n_s32(int32x4_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmul_n_u16",
      "full name": "uint16x4_t vmul_n_u16(uint16x4_t a, uint16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmulq_n_u16",
      "full name": "uint16x8_t vmulq_n_u16(uint16x8_t a, uint16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmul_n_u32",
      "full name": "uint32x2_t vmul_n_u32(uint32x2_t a, uint32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmulq_n_u32",
      "full name": "uint32x4_t vmulq_n_u32(uint32x4_t a, uint32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmul_n_f32",
      "full name": "float32x2_t vmul_n_f32(float32x2_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [32]",
      "function_cn": "[向量] 浮点数乘 [32]"
    },
    {
      "name": "vmulq_n_f32",
      "full name": "float32x4_t vmulq_n_f32(float32x4_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [32]",
      "function_cn": "[向量] 浮点数乘 [32]"
    },
    {
      "name": "vmul_n_f64",
      "full name": "float64x1_t vmul_n_f64(float64x1_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [64]",
      "function_cn": "[向量] 浮点数乘 [64]"
    },
    {
      "name": "vmulq_n_f64",
      "full name": "float64x2_t vmulq_n_f64(float64x2_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [64]",
      "function_cn": "[向量] 浮点数乘 [64]"
    },
    {
      "name": "vmul_lane_s16",
      "full name": "int16x4_t vmul_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmulq_lane_s16",
      "full name": "int16x8_t vmulq_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmul_lane_s32",
      "full name": "int32x2_t vmul_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_lane_s32",
      "full name": "int32x4_t vmulq_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmul_lane_u16",
      "full name": "uint16x4_t vmul_lane_u16(uint16x4_t a, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_lane_u16",
      "full name": "uint16x8_t vmulq_lane_u16(uint16x8_t a, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmul_lane_u32",
      "full name": "uint32x2_t vmul_lane_u32(uint32x2_t a, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_lane_u32",
      "full name": "uint32x4_t vmulq_lane_u32(uint32x4_t a, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmul_lane_f32",
      "full name": "float32x2_t vmul_lane_f32(float32x2_t a, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_lane_f32",
      "full name": "float32x4_t vmulq_lane_f32(float32x4_t a, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmul_lane_f64",
      "full name": "float64x1_t vmul_lane_f64(float64x1_t a, float64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [64]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [64]"
    },
    {
      "name": "vmulq_lane_f64",
      "full name": "float64x2_t vmulq_lane_f64(float64x2_t a, float64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [64]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [64]"
    },
    {
      "name": "vmuls_lane_f32",
      "full name": "float32_t vmuls_lane_f32(float32_t a, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[scalar] fmul [32]",
      "function_cn": "[标量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmuld_lane_f64",
      "full name": "float64_t vmuld_lane_f64(float64_t a, float64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[scalar] fmul [64]",
      "function_cn": "[标量] 向量a中的元素分别乘以向量v的第lane个元素 [64]"
    },
    {
      "name": "vmul_laneq_s16",
      "full name": "int16x4_t vmul_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmulq_laneq_s16",
      "full name": "int16x8_t vmulq_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmul_laneq_s32",
      "full name": "int32x2_t vmul_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_laneq_s32",
      "full name": "int32x4_t vmulq_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmul_laneq_u16",
      "full name": "uint16x4_t vmul_laneq_u16(uint16x4_t a, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmulq_laneq_u16",
      "full name": "uint16x8_t vmulq_laneq_u16(uint16x8_t a, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [16]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [16]"
    },
    {
      "name": "vmul_laneq_u32",
      "full name": "uint32x2_t vmul_laneq_u32(uint32x2_t a, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_laneq_u32",
      "full name": "uint32x4_t vmulq_laneq_u32(uint32x4_t a, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mul",
      "function_en": "[vector] mul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmul_laneq_f32",
      "full name": "float32x2_t vmul_laneq_f32(float32x2_t a, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmulq_laneq_f32",
      "full name": "float32x4_t vmulq_laneq_f32(float32x4_t a, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [32]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmul_laneq_f64",
      "full name": "float64x1_t vmul_laneq_f64(float64x1_t a, float64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [64]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [64]"
    },
    {
      "name": "vmulq_laneq_f64",
      "full name": "float64x2_t vmulq_laneq_f64(float64x2_t a, float64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[vector] fmul [64]",
      "function_cn": "[向量] 向量a中的元素分别乘以向量v的第lane个元素 [64]"
    },
    {
      "name": "vmuls_laneq_f32",
      "full name": "float32_t vmuls_laneq_f32(float32_t a, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[scalar] fmul [32]",
      "function_cn": "[标量] 向量a中的元素分别乘以向量v的第lane个元素 [32]"
    },
    {
      "name": "vmuld_laneq_f64",
      "full name": "float64_t vmuld_laneq_f64(float64_t a, float64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmul",
      "function_en": "[scalar] fmul [64]",
      "function_cn": "[标量] 向量a中的元素分别乘以向量v的第lane个元素 [64]"
    },
    {
      "name": "vmull_n_s16",
      "full name": "int32x4_t vmull_n_s16(int16x4_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull",
      "function_en": "[vector] smull [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmull_n_s32",
      "full name": "int64x2_t vmull_n_s32(int32x2_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull",
      "function_en": "[vector] smull [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmull_n_u16",
      "full name": "uint32x4_t vmull_n_u16(uint16x4_t a, uint16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull",
      "function_en": "[vector] umull [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmull_n_u32",
      "full name": "uint64x2_t vmull_n_u32(uint32x2_t a, uint32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull",
      "function_en": "[vector] umull [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmull_high_n_s16",
      "full name": "int32x4_t vmull_high_n_s16(int16x8_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull2",
      "function_en": "[vector] smull2 [16]",
      "function_cn": "[向量] 乘(a选取高半部分) [16]"
    },
    {
      "name": "vmull_high_n_s32",
      "full name": "int64x2_t vmull_high_n_s32(int32x4_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull2",
      "function_en": "[vector] smull2 [32]",
      "function_cn": "[向量] 乘(a选取高半部分) [32]"
    },
    {
      "name": "vmull_high_n_u16",
      "full name": "uint32x4_t vmull_high_n_u16(uint16x8_t a, uint16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull2",
      "function_en": "[vector] umull2 [16]",
      "function_cn": "[向量] 乘(a选取高半部分) [16]"
    },
    {
      "name": "vmull_high_n_u32",
      "full name": "uint64x2_t vmull_high_n_u32(uint32x4_t a, uint32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull2",
      "function_en": "[vector] umull2 [32]",
      "function_cn": "[向量] 乘(a选取高半部分) [32]"
    },
    {
      "name": "vmull_lane_s16",
      "full name": "int32x4_t vmull_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull",
      "function_en": "[vector] smull [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmull_lane_s32",
      "full name": "int64x2_t vmull_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull",
      "function_en": "[vector] smull [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmull_lane_u16",
      "full name": "uint32x4_t vmull_lane_u16(uint16x4_t a, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull",
      "function_en": "[vector] umull [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmull_lane_u32",
      "full name": "uint64x2_t vmull_lane_u32(uint32x2_t a, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull",
      "function_en": "[vector] umull [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmull_high_lane_s16",
      "full name": "int32x4_t vmull_high_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull2",
      "function_en": "[vector] smull2 [16]",
      "function_cn": "[向量] 乘(a选取高半部分) [16]"
    },
    {
      "name": "vmull_high_lane_s32",
      "full name": "int64x2_t vmull_high_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull2",
      "function_en": "[vector] smull2 [32]",
      "function_cn": "[向量] 乘(a选取高半部分) [32]"
    },
    {
      "name": "vmull_high_lane_u16",
      "full name": "uint32x4_t vmull_high_lane_u16(uint16x8_t a, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull2",
      "function_en": "[vector] umull2 [16]",
      "function_cn": "[向量] 乘(a选取高半部分) [16]"
    },
    {
      "name": "vmull_high_lane_u32",
      "full name": "uint64x2_t vmull_high_lane_u32(uint32x4_t a, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull2",
      "function_en": "[vector] umull2 [32]",
      "function_cn": "[向量] 乘(a选取高半部分) [32]"
    },
    {
      "name": "vmull_laneq_s16",
      "full name": "int32x4_t vmull_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull",
      "function_en": "[vector] smull [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmull_laneq_s32",
      "full name": "int64x2_t vmull_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull",
      "function_en": "[vector] smull [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmull_laneq_u16",
      "full name": "uint32x4_t vmull_laneq_u16(uint16x4_t a, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull",
      "function_en": "[vector] umull [16]",
      "function_cn": "[向量] 乘 [16]"
    },
    {
      "name": "vmull_laneq_u32",
      "full name": "uint64x2_t vmull_laneq_u32(uint32x2_t a, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull",
      "function_en": "[vector] umull [32]",
      "function_cn": "[向量] 乘 [32]"
    },
    {
      "name": "vmull_high_laneq_s16",
      "full name": "int32x4_t vmull_high_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull2",
      "function_en": "[vector] smull2 [16]",
      "function_cn": "[向量] 乘(a选取高半部分) [16]"
    },
    {
      "name": "vmull_high_laneq_s32",
      "full name": "int64x2_t vmull_high_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smull2",
      "function_en": "[vector] smull2 [32]",
      "function_cn": "[向量] 乘(a选取高半部分) [32]"
    },
    {
      "name": "vmull_high_laneq_u16",
      "full name": "uint32x4_t vmull_high_laneq_u16(uint16x8_t a, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull2",
      "function_en": "[vector] umull2 [16]",
      "function_cn": "[向量] 乘(a选取高半部分) [16]"
    },
    {
      "name": "vmull_high_laneq_u32",
      "full name": "uint64x2_t vmull_high_laneq_u32(uint32x4_t a, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umull2",
      "function_en": "[vector] umull2 [32]",
      "function_cn": "[向量] 乘(a选取高半部分) [32]"
    },
    {
      "name": "vqdmull_n_s16",
      "full name": "int32x4_t vqdmull_n_s16(int16x4_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [16]",
      "function_cn": "[向量] 饱和乘 [16]"
    },
    {
      "name": "vqdmull_n_s32",
      "full name": "int64x2_t vqdmull_n_s32(int32x2_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [32]",
      "function_cn": "[向量] 饱和乘 [32]"
    },
    {
      "name": "vqdmull_high_n_s16",
      "full name": "int32x4_t vqdmull_high_n_s16(int16x8_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull2",
      "function_en": "[vector] sqdmull2 [16]",
      "function_cn": "[向量] 饱和乘(a选取高半部分) [16]"
    },
    {
      "name": "vqdmull_high_n_s32",
      "full name": "int64x2_t vqdmull_high_n_s32(int32x4_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull2",
      "function_en": "[vector] sqdmull2 [32]",
      "function_cn": "[向量] 饱和乘(a选取高半部分) [32]"
    },
    {
      "name": "vqdmull_lane_s16",
      "full name": "int32x4_t vqdmull_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [16]",
      "function_cn": "[向量] 饱和乘 [16]"
    },
    {
      "name": "vqdmull_lane_s32",
      "full name": "int64x2_t vqdmull_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [32]",
      "function_cn": "[向量] 饱和乘 [32]"
    },
    {
      "name": "vqdmullh_lane_s16",
      "full name": "int32_t vqdmullh_lane_s16(int16_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [16]",
      "function_cn": "[向量] 饱和乘 [16]"
    },
    {
      "name": "vqdmulls_lane_s32",
      "full name": "int64_t vqdmulls_lane_s32(int32_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [32]",
      "function_cn": "[向量] 饱和乘 [32]"
    },
    {
      "name": "vqdmull_high_lane_s16",
      "full name": "int32x4_t vqdmull_high_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull2",
      "function_en": "[vector] sqdmull2 [16]",
      "function_cn": "[向量] 饱和乘(a选取高半部分) [16]"
    },
    {
      "name": "vqdmull_high_lane_s32",
      "full name": "int64x2_t vqdmull_high_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull2",
      "function_en": "[vector] sqdmull2 [32]",
      "function_cn": "[向量] 饱和乘(a选取高半部分) [32]"
    },
    {
      "name": "vqdmull_laneq_s16",
      "full name": "int32x4_t vqdmull_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [16]",
      "function_cn": "[向量] 饱和乘 [16]"
    },
    {
      "name": "vqdmull_laneq_s32",
      "full name": "int64x2_t vqdmull_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[vector] sqdmull [32]",
      "function_cn": "[向量] 饱和乘 [32]"
    },
    {
      "name": "vqdmullh_laneq_s16",
      "full name": "int32_t vqdmullh_laneq_s16(int16_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[scalar] sqdmull [16]",
      "function_cn": "[标量] 饱和乘 [16]"
    },
    {
      "name": "vqdmulls_laneq_s32",
      "full name": "int64_t vqdmulls_laneq_s32(int32_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull",
      "function_en": "[scalar] sqdmull [32]",
      "function_cn": "[标量] 饱和乘 [32]"
    },
    {
      "name": "vqdmull_high_laneq_s16",
      "full name": "int32x4_t vqdmull_high_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull2",
      "function_en": "[vector] sqdmull2 [16]",
      "function_cn": "[向量] 饱和乘(a选取高半部分) [16]"
    },
    {
      "name": "vqdmull_high_laneq_s32",
      "full name": "int64x2_t vqdmull_high_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmull2",
      "function_en": "[vector] sqdmull2 [32]",
      "function_cn": "[向量] 饱和乘(a选取高半部分) [32]"
    },
    {
      "name": "vqdmulh_n_s16",
      "full name": "int16x4_t vqdmulh_n_s16(int16x4_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulhq_n_s16",
      "full name": "int16x8_t vqdmulhq_n_s16(int16x8_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulh_n_s32",
      "full name": "int32x2_t vqdmulh_n_s32(int32x2_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulhq_n_s32",
      "full name": "int32x4_t vqdmulhq_n_s32(int32x4_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulh_lane_s16",
      "full name": "int16x4_t vqdmulh_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulhq_lane_s16",
      "full name": "int16x8_t vqdmulhq_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulh_lane_s32",
      "full name": "int32x2_t vqdmulh_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulhq_lane_s32",
      "full name": "int32x4_t vqdmulhq_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulhh_lane_s16",
      "full name": "int16_t vqdmulhh_lane_s16(int16_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[scalar] sqdmulh [16]",
      "function_cn": "[标量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulhs_lane_s32",
      "full name": "int32_t vqdmulhs_lane_s32(int32_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[scalar] sqdmulh [32]",
      "function_cn": "[标量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulh_laneq_s16",
      "full name": "int16x4_t vqdmulh_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulhq_laneq_s16",
      "full name": "int16x8_t vqdmulhq_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulh_laneq_s32",
      "full name": "int32x2_t vqdmulh_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulhq_laneq_s32",
      "full name": "int32x4_t vqdmulhq_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[vector] sqdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqdmulhh_laneq_s16",
      "full name": "int16_t vqdmulhh_laneq_s16(int16_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[scalar] sqdmulh [16]",
      "function_cn": "[标量] 相乘再乘以2，结果截断式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqdmulhs_laneq_s32",
      "full name": "int32_t vqdmulhs_laneq_s32(int32_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmulh",
      "function_en": "[scalar] sqdmulh [32]",
      "function_cn": "[标量] 相乘再乘以2，结果截断式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulh_n_s16",
      "full name": "int16x4_t vqrdmulh_n_s16(int16x4_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulhq_n_s16",
      "full name": "int16x8_t vqrdmulhq_n_s16(int16x8_t a, int16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulh_n_s32",
      "full name": "int32x2_t vqrdmulh_n_s32(int32x2_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulhq_n_s32",
      "full name": "int32x4_t vqrdmulhq_n_s32(int32x4_t a, int32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulh_lane_s16",
      "full name": "int16x4_t vqrdmulh_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulhq_lane_s16",
      "full name": "int16x8_t vqrdmulhq_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulh_lane_s32",
      "full name": "int32x2_t vqrdmulh_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulhq_lane_s32",
      "full name": "int32x4_t vqrdmulhq_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulhh_lane_s16",
      "full name": "int16_t vqrdmulhh_lane_s16(int16_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[scalar] sqrdmulh [16]",
      "function_cn": "[标量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulhs_lane_s32",
      "full name": "int32_t vqrdmulhs_lane_s32(int32_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[scalar] sqrdmulh [32]",
      "function_cn": "[标量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulh_laneq_s16",
      "full name": "int16x4_t vqrdmulh_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulhq_laneq_s16",
      "full name": "int16x8_t vqrdmulhq_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [16]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulh_laneq_s32",
      "full name": "int32x2_t vqrdmulh_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulhq_laneq_s32",
      "full name": "int32x4_t vqrdmulhq_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[vector] sqrdmulh [32]",
      "function_cn": "[向量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vqrdmulhh_laneq_s16",
      "full name": "int16_t vqrdmulhh_laneq_s16(int16_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[scalar] sqrdmulh [16]",
      "function_cn": "[标量] 相乘再乘以2，结果舍入式取高16位(饱和运算) [16]"
    },
    {
      "name": "vqrdmulhs_laneq_s32",
      "full name": "int32_t vqrdmulhs_laneq_s32(int32_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqrdmulh",
      "function_en": "[scalar] sqrdmulh [32]",
      "function_cn": "[标量] 相乘再乘以2，结果舍入式取高32位(饱和运算) [32]"
    },
    {
      "name": "vmla_n_s16",
      "full name": "int16x4_t vmla_n_s16(int16x4_t a, int16x4_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 乘加 [16]"
    },
    {
      "name": "vmlaq_n_s16",
      "full name": "int16x8_t vmlaq_n_s16(int16x8_t a, int16x8_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 乘加 [16]"
    },
    {
      "name": "vmla_n_s32",
      "full name": "int32x2_t vmla_n_s32(int32x2_t a, int32x2_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlaq_n_s32",
      "full name": "int32x4_t vmlaq_n_s32(int32x4_t a, int32x4_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmla_n_u16",
      "full name": "uint16x4_t vmla_n_u16(uint16x4_t a, uint16x4_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 乘加 [16]"
    },
    {
      "name": "vmlaq_n_u16",
      "full name": "uint16x8_t vmlaq_n_u16(uint16x8_t a, uint16x8_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [16]",
      "function_cn": "[向量] 乘加 [16]"
    },
    {
      "name": "vmla_n_u32",
      "full name": "uint32x2_t vmla_n_u32(uint32x2_t a, uint32x2_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlaq_n_u32",
      "full name": "uint32x4_t vmlaq_n_u32(uint32x4_t a, uint32x4_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mla",
      "function_en": "[vector] mla [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmla_n_f32",
      "full name": "float32x2_t vmla_n_f32(float32x2_t a, float32x2_t b, float32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlaq_n_f32",
      "full name": "float32x4_t vmlaq_n_f32(float32x4_t a, float32x4_t b, float32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlal_n_s16",
      "full name": "int32x4_t vmlal_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal",
      "function_en": "[vector] smlal [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlal_n_s32",
      "full name": "int64x2_t vmlal_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal",
      "function_en": "[vector] smlal [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlal_n_u16",
      "full name": "uint32x4_t vmlal_n_u16(uint32x4_t a, uint16x4_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal",
      "function_en": "[vector] umlal [16]",
      "function_cn": "[向量] 乘加 [16]"
    },
    {
      "name": "vmlal_n_u32",
      "full name": "uint64x2_t vmlal_n_u32(uint64x2_t a, uint32x2_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal",
      "function_en": "[vector] umlal [32]",
      "function_cn": "[向量] 乘加 [32]"
    },
    {
      "name": "vmlal_high_n_s16",
      "full name": "int32x4_t vmlal_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal2",
      "function_en": "[vector] smlal2 [16]",
      "function_cn": "[向量] 乘加(b选取高半部分) [16]"
    },
    {
      "name": "vmlal_high_n_s32",
      "full name": "int64x2_t vmlal_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlal2",
      "function_en": "[vector] smlal2 [32]",
      "function_cn": "[向量] 乘加(b选取高半部分) [32]"
    },
    {
      "name": "vmlal_high_n_u16",
      "full name": "uint32x4_t vmlal_high_n_u16(uint32x4_t a, uint16x8_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal2",
      "function_en": "[vector] umlal2 [16]",
      "function_cn": "[向量] 乘加(b选取高半部分) [16]"
    },
    {
      "name": "vmlal_high_n_u32",
      "full name": "uint64x2_t vmlal_high_n_u32(uint64x2_t a, uint32x4_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlal2",
      "function_en": "[vector] umlal2 [32]",
      "function_cn": "[向量] 乘加(b选取高半部分) [32]"
    },
    {
      "name": "vqdmlal_n_s16",
      "full name": "int32x4_t vqdmlal_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[vector] sqdmlal [16]",
      "function_cn": "[向量] 饱和乘加 [16]"
    },
    {
      "name": "vqdmlal_n_s32",
      "full name": "int64x2_t vqdmlal_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal",
      "function_en": "[vector] sqdmlal [32]",
      "function_cn": "[向量] 饱和乘加 [32]"
    },
    {
      "name": "vqdmlal_high_n_s16",
      "full name": "int32x4_t vqdmlal_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal2",
      "function_en": "[vector] sqdmlal2 [16]",
      "function_cn": "[向量] 饱和乘加(b选取高半部分) [16]"
    },
    {
      "name": "vqdmlal_high_n_s32",
      "full name": "int64x2_t vqdmlal_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlal2",
      "function_en": "[vector] sqdmlal2 [32]",
      "function_cn": "[向量] 饱和乘加(b选取高半部分) [32]"
    },
    {
      "name": "vmls_n_s16",
      "full name": "int16x4_t vmls_n_s16(int16x4_t a, int16x4_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsq_n_s16",
      "full name": "int16x8_t vmlsq_n_s16(int16x8_t a, int16x8_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmls_n_s32",
      "full name": "int32x2_t vmls_n_s32(int32x2_t a, int32x2_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_n_s32",
      "full name": "int32x4_t vmlsq_n_s32(int32x4_t a, int32x4_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmls_n_u16",
      "full name": "uint16x4_t vmls_n_u16(uint16x4_t a, uint16x4_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsq_n_u16",
      "full name": "uint16x8_t vmlsq_n_u16(uint16x8_t a, uint16x8_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmls_n_u32",
      "full name": "uint32x2_t vmls_n_u32(uint32x2_t a, uint32x2_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_n_u32",
      "full name": "uint32x4_t vmlsq_n_u32(uint32x4_t a, uint32x4_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mls",
      "function_en": "[vector] mls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmls_n_f32",
      "full name": "float32x2_t vmls_n_f32(float32x2_t a, float32x2_t b, float32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsq_n_f32",
      "full name": "float32x4_t vmlsq_n_f32(float32x4_t a, float32x4_t b, float32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_n_s16",
      "full name": "int32x4_t vmlsl_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl",
      "function_en": "[vector] smlsl [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsl_n_s32",
      "full name": "int64x2_t vmlsl_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl",
      "function_en": "[vector] smlsl [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_n_u16",
      "full name": "uint32x4_t vmlsl_n_u16(uint32x4_t a, uint16x4_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl",
      "function_en": "[vector] umlsl [16]",
      "function_cn": "[向量] 乘减 [16]"
    },
    {
      "name": "vmlsl_n_u32",
      "full name": "uint64x2_t vmlsl_n_u32(uint64x2_t a, uint32x2_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl",
      "function_en": "[vector] umlsl [32]",
      "function_cn": "[向量] 乘减 [32]"
    },
    {
      "name": "vmlsl_high_n_s16",
      "full name": "int32x4_t vmlsl_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl2",
      "function_en": "[vector] smlsl2 [16]",
      "function_cn": "[向量] 乘减(b选取高半部分) [16]"
    },
    {
      "name": "vmlsl_high_n_s32",
      "full name": "int64x2_t vmlsl_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smlsl2",
      "function_en": "[vector] smlsl2 [32]",
      "function_cn": "[向量] 乘减(b选取高半部分) [32]"
    },
    {
      "name": "vmlsl_high_n_u16",
      "full name": "uint32x4_t vmlsl_high_n_u16(uint32x4_t a, uint16x8_t b, uint16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl2",
      "function_en": "[vector] umlsl2 [16]",
      "function_cn": "[向量] 乘减(b选取高半部分) [16]"
    },
    {
      "name": "vmlsl_high_n_u32",
      "full name": "uint64x2_t vmlsl_high_n_u32(uint64x2_t a, uint32x4_t b, uint32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umlsl2",
      "function_en": "[vector] umlsl2 [32]",
      "function_cn": "[向量] 乘减(b选取高半部分) [32]"
    },
    {
      "name": "vqdmlsl_n_s16",
      "full name": "int32x4_t vqdmlsl_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [16]",
      "function_cn": "[向量] 饱和乘减 [16]"
    },
    {
      "name": "vqdmlsl_n_s32",
      "full name": "int64x2_t vqdmlsl_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl",
      "function_en": "[vector] sqdmlsl [32]",
      "function_cn": "[向量] 饱和乘减 [32]"
    },
    {
      "name": "vqdmlsl_high_n_s16",
      "full name": "int32x4_t vqdmlsl_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl2",
      "function_en": "[vector] sqdmlsl2 [16]",
      "function_cn": "[向量] 饱和乘减(b选取高半部分) [16]"
    },
    {
      "name": "vqdmlsl_high_n_s32",
      "full name": "int64x2_t vqdmlsl_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqdmlsl2",
      "function_en": "[vector] sqdmlsl2 [32]",
      "function_cn": "[向量] 饱和乘减(b选取高半部分) [32]"
    },
    {
      "name": "vabs_s8",
      "full name": "int8x8_t vabs_s8(int8x8_t a)",
      "Intel name": "_mm_abs_pi8",
      "Intel Asm": "pabsb",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [8]",
      "function_cn": "[向量] 取绝对值 [8]"
    },
    {
      "name": "vabsq_s8",
      "full name": "int8x16_t vabsq_s8(int8x16_t a)",
      "Intel name": "_mm_abs_epi8",
      "Intel Asm": "pabsb",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [8]",
      "function_cn": "[向量] 取绝对值 [8]"
    },
    {
      "name": "vabs_s16",
      "full name": "int16x4_t vabs_s16(int16x4_t a)",
      "Intel name": "_mm_abs_pi16",
      "Intel Asm": "pabsw",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [16]",
      "function_cn": "[向量] 取绝对值 [16]"
    },
    {
      "name": "vabsq_s16",
      "full name": "int16x8_t vabsq_s16(int16x8_t a)",
      "Intel name": "_mm_abs_epi16",
      "Intel Asm": "pabsw",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [16]",
      "function_cn": "[向量] 取绝对值 [16]"
    },
    {
      "name": "vabs_s32",
      "full name": "int32x2_t vabs_s32(int32x2_t a)",
      "Intel name": "_mm_abs_pi32",
      "Intel Asm": "pabsd",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [32]",
      "function_cn": "[向量] 取绝对值 [32]"
    },
    {
      "name": "vabsq_s32",
      "full name": "int32x4_t vabsq_s32(int32x4_t a)",
      "Intel name": "_mm_abs_epi32",
      "Intel Asm": "pabsd",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [32]",
      "function_cn": "[向量] 取绝对值 [32]"
    },
    {
      "name": "vabs_f32",
      "full name": "float32x2_t vabs_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabs",
      "function_en": "[vector] fabs [32]",
      "function_cn": "[向量] 取绝对值 [32]"
    },
    {
      "name": "vabsq_f32",
      "full name": "float32x4_t vabsq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabs",
      "function_en": "[vector] fabs [32]",
      "function_cn": "[向量] 取绝对值 [32]"
    },
    {
      "name": "vabs_s64",
      "full name": "int64x1_t vabs_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [64]",
      "function_cn": "[向量] 取绝对值 [64]"
    },
    {
      "name": "vabsd_s64",
      "full name": "int64_t vabsd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "abs",
      "function_en": "[scalar] abs [64]",
      "function_cn": "[标量] 取绝对值 [64]"
    },
    {
      "name": "vabsq_s64",
      "full name": "int64x2_t vabsq_s64(int64x2_t a)",
      "Intel name": "_mm_abs_epi64",
      "Intel Asm": "vpabsq",
      "Arm Asm": "abs",
      "function_en": "[vector] abs [64]",
      "function_cn": "[向量] 取绝对值 [64]"
    },
    {
      "name": "vabs_f64",
      "full name": "float64x1_t vabs_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabs",
      "function_en": "[vector] fabs [64]",
      "function_cn": "[向量] 取绝对值 [64]"
    },
    {
      "name": "vabsq_f64",
      "full name": "float64x2_t vabsq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fabs",
      "function_en": "[vector] fabs [64]",
      "function_cn": "[向量] 取绝对值 [64]"
    },
    {
      "name": "vqabs_s8",
      "full name": "int8x8_t vqabs_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [8]",
      "function_cn": "[向量] 饱和取绝对值 [8]"
    },
    {
      "name": "vqabsq_s8",
      "full name": "int8x16_t vqabsq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [8]",
      "function_cn": "[向量] 饱和取绝对值 [8]"
    },
    {
      "name": "vqabs_s16",
      "full name": "int16x4_t vqabs_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [16]",
      "function_cn": "[向量] 饱和取绝对值 [16]"
    },
    {
      "name": "vqabsq_s16",
      "full name": "int16x8_t vqabsq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [16]",
      "function_cn": "[向量] 饱和取绝对值 [16]"
    },
    {
      "name": "vqabs_s32",
      "full name": "int32x2_t vqabs_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [32]",
      "function_cn": "[向量] 饱和取绝对值 [32]"
    },
    {
      "name": "vqabsq_s32",
      "full name": "int32x4_t vqabsq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [32]",
      "function_cn": "[向量] 饱和取绝对值 [32]"
    },
    {
      "name": "vqabs_s64",
      "full name": "int64x1_t vqabs_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [64]",
      "function_cn": "[向量] 饱和取绝对值 [64]"
    },
    {
      "name": "vqabsq_s64",
      "full name": "int64x2_t vqabsq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[vector] sqabs [64]",
      "function_cn": "[向量] 饱和取绝对值 [64]"
    },
    {
      "name": "vqabsb_s8",
      "full name": "int8_t vqabsb_s8(int8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[scalar] sqabs [8]",
      "function_cn": "[标量] 饱和取绝对值 [8]"
    },
    {
      "name": "vqabsh_s16",
      "full name": "int16_t vqabsh_s16(int16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[scalar] sqabs [16]",
      "function_cn": "[标量] 饱和取绝对值 [16]"
    },
    {
      "name": "vqabss_s32",
      "full name": "int32_t vqabss_s32(int32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[scalar] sqabs [32]",
      "function_cn": "[标量] 饱和取绝对值 [32]"
    },
    {
      "name": "vqabsd_s64",
      "full name": "int64_t vqabsd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqabs",
      "function_en": "[scalar] sqabs [64]",
      "function_cn": "[标量] 饱和取绝对值 [64]"
    },
    {
      "name": "vneg_s8",
      "full name": "int8x8_t vneg_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [8]",
      "function_cn": "[向量] 符号取反 [8]"
    },
    {
      "name": "vnegq_s8",
      "full name": "int8x16_t vnegq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [8]",
      "function_cn": "[向量] 符号取反 [8]"
    },
    {
      "name": "vneg_s16",
      "full name": "int16x4_t vneg_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [16]",
      "function_cn": "[向量] 符号取反 [16]"
    },
    {
      "name": "vnegq_s16",
      "full name": "int16x8_t vnegq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [16]",
      "function_cn": "[向量] 符号取反 [16]"
    },
    {
      "name": "vneg_s32",
      "full name": "int32x2_t vneg_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [32]",
      "function_cn": "[向量] 符号取反 [32]"
    },
    {
      "name": "vnegq_s32",
      "full name": "int32x4_t vnegq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [32]",
      "function_cn": "[向量] 符号取反 [32]"
    },
    {
      "name": "vneg_f32",
      "full name": "float32x2_t vneg_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fneg",
      "function_en": "[vector] fneg [32]",
      "function_cn": "[向量] 符号取反 [32]"
    },
    {
      "name": "vnegq_f32",
      "full name": "float32x4_t vnegq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fneg",
      "function_en": "[vector] fneg [32]",
      "function_cn": "[向量] 符号取反 [32]"
    },
    {
      "name": "vneg_s64",
      "full name": "int64x1_t vneg_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [64]",
      "function_cn": "[向量] 符号取反 [64]"
    },
    {
      "name": "vnegd_s64",
      "full name": "int64_t vnegd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[scalar] neg [64]",
      "function_cn": "[标量] 符号取反 [64]"
    },
    {
      "name": "vnegq_s64",
      "full name": "int64x2_t vnegq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "neg",
      "function_en": "[vector] neg [64]",
      "function_cn": "[向量] 符号取反 [64]"
    },
    {
      "name": "vneg_f64",
      "full name": "float64x1_t vneg_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fneg",
      "function_en": "[vector] fneg [64]",
      "function_cn": "[向量] 符号取反 [64]"
    },
    {
      "name": "vnegq_f64",
      "full name": "float64x2_t vnegq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fneg",
      "function_en": "[vector] fneg [64]",
      "function_cn": "[向量] 符号取反 [64]"
    },
    {
      "name": "vqneg_s8",
      "full name": "int8x8_t vqneg_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [8]",
      "function_cn": "[向量] 饱和符号取反 [8]"
    },
    {
      "name": "vqnegq_s8",
      "full name": "int8x16_t vqnegq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [8]",
      "function_cn": "[向量] 饱和符号取反 [8]"
    },
    {
      "name": "vqneg_s16",
      "full name": "int16x4_t vqneg_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [16]",
      "function_cn": "[向量] 饱和符号取反 [16]"
    },
    {
      "name": "vqnegq_s16",
      "full name": "int16x8_t vqnegq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [16]",
      "function_cn": "[向量] 饱和符号取反 [16]"
    },
    {
      "name": "vqneg_s32",
      "full name": "int32x2_t vqneg_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [32]",
      "function_cn": "[向量] 饱和符号取反 [32]"
    },
    {
      "name": "vqnegq_s32",
      "full name": "int32x4_t vqnegq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [32]",
      "function_cn": "[向量] 饱和符号取反 [32]"
    },
    {
      "name": "vqneg_s64",
      "full name": "int64x1_t vqneg_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [64]",
      "function_cn": "[向量] 饱和符号取反 [64]"
    },
    {
      "name": "vqnegq_s64",
      "full name": "int64x2_t vqnegq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[vector] sqneg [64]",
      "function_cn": "[向量] 饱和符号取反 [64]"
    },
    {
      "name": "vqnegb_s8",
      "full name": "int8_t vqnegb_s8(int8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[scalar] sqneg [8]",
      "function_cn": "[标量] 饱和符号取反 [8]"
    },
    {
      "name": "vqnegh_s16",
      "full name": "int16_t vqnegh_s16(int16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[scalar] sqneg [16]",
      "function_cn": "[标量] 饱和符号取反 [16]"
    },
    {
      "name": "vqnegs_s32",
      "full name": "int32_t vqnegs_s32(int32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[scalar] sqneg [32]",
      "function_cn": "[标量] 饱和符号取反 [32]"
    },
    {
      "name": "vqnegd_s64",
      "full name": "int64_t vqnegd_s64(int64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sqneg",
      "function_en": "[scalar] sqneg [64]",
      "function_cn": "[标量] 饱和符号取反 [64]"
    },
    {
      "name": "vcls_s8",
      "full name": "int8x8_t vcls_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cls",
      "function_en": "[vector] cls [8]",
      "function_cn": "[向量] 前导符号位计数 [8]"
    },
    {
      "name": "vclsq_s8",
      "full name": "int8x16_t vclsq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cls",
      "function_en": "[vector] cls [8]",
      "function_cn": "[向量] 前导符号位计数 [8]"
    },
    {
      "name": "vcls_s16",
      "full name": "int16x4_t vcls_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cls",
      "function_en": "[vector] cls [16]",
      "function_cn": "[向量] 前导符号位计数 [16]"
    },
    {
      "name": "vclsq_s16",
      "full name": "int16x8_t vclsq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cls",
      "function_en": "[vector] cls [16]",
      "function_cn": "[向量] 前导符号位计数 [16]"
    },
    {
      "name": "vcls_s32",
      "full name": "int32x2_t vcls_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cls",
      "function_en": "[vector] cls [32]",
      "function_cn": "[向量] 前导符号位计数 [32]"
    },
    {
      "name": "vclsq_s32",
      "full name": "int32x4_t vclsq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cls",
      "function_en": "[vector] cls [32]",
      "function_cn": "[向量] 前导符号位计数 [32]"
    },
    {
      "name": "vclz_s8",
      "full name": "int8x8_t vclz_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [8]",
      "function_cn": "[向量] 前导零计数 [8]"
    },
    {
      "name": "vclzq_s8",
      "full name": "int8x16_t vclzq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [8]",
      "function_cn": "[向量] 前导零计数 [8]"
    },
    {
      "name": "vclz_s16",
      "full name": "int16x4_t vclz_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [8]",
      "function_cn": "[向量] 前导零计数 [8]"
    },
    {
      "name": "vclzq_s16",
      "full name": "int16x8_t vclzq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [16]",
      "function_cn": "[向量] 前导零计数 [16]"
    },
    {
      "name": "vclz_s32",
      "full name": "int32x2_t vclz_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [32]",
      "function_cn": "[向量] 前导零计数 [32]"
    },
    {
      "name": "vclzq_s32",
      "full name": "int32x4_t vclzq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [32]",
      "function_cn": "[向量] 前导零计数 [32]"
    },
    {
      "name": "vclz_u8",
      "full name": "uint8x8_t vclz_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [8]",
      "function_cn": "[向量] 前导零计数 [8]"
    },
    {
      "name": "vclzq_u8",
      "full name": "uint8x16_t vclzq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [8]",
      "function_cn": "[向量] 前导零计数 [8]"
    },
    {
      "name": "vclz_u16",
      "full name": "uint16x4_t vclz_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [16]",
      "function_cn": "[向量] 前导零计数 [16]"
    },
    {
      "name": "vclzq_u16",
      "full name": "uint16x8_t vclzq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [16]",
      "function_cn": "[向量] 前导零计数 [16]"
    },
    {
      "name": "vclz_u32",
      "full name": "uint32x2_t vclz_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [32]",
      "function_cn": "[向量] 前导零计数 [32]"
    },
    {
      "name": "vclzq_u32",
      "full name": "uint32x4_t vclzq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "clz",
      "function_en": "[vector] clz [32]",
      "function_cn": "[向量] 前导零计数 [32]"
    },
    {
      "name": "vcnt_s8",
      "full name": "int8x8_t vcnt_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cnt",
      "function_en": "[vector] cnt [8]",
      "function_cn": "[向量] 设置位计数 [8]"
    },
    {
      "name": "vcntq_s8",
      "full name": "int8x16_t vcntq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cnt",
      "function_en": "[vector] cnt [8]",
      "function_cn": "[向量] 设置位计数 [8]"
    },
    {
      "name": "vcnt_u8",
      "full name": "uint8x8_t vcnt_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cnt",
      "function_en": "[vector] cnt [8]",
      "function_cn": "[向量] 设置位计数 [8]"
    },
    {
      "name": "vcntq_u8",
      "full name": "uint8x16_t vcntq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cnt",
      "function_en": "[vector] cnt [8]",
      "function_cn": "[向量] 设置位计数 [8]"
    },
    {
      "name": "vcnt_p8",
      "full name": "poly8x8_t vcnt_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cnt",
      "function_en": "[vector] cnt [8]",
      "function_cn": "[向量] 设置位计数 [8]"
    },
    {
      "name": "vcntq_p8",
      "full name": "poly8x16_t vcntq_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "cnt",
      "function_en": "[vector] cnt [8]",
      "function_cn": "[向量] 设置位计数 [8]"
    },
    {
      "name": "vrecpe_u32",
      "full name": "uint32x2_t vrecpe_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urecpe",
      "function_en": "[vector] urecpe [32]",
      "function_cn": "[向量] 求近似逆 [32]"
    },
    {
      "name": "vrecpeq_u32",
      "full name": "uint32x4_t vrecpeq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "urecpe",
      "function_en": "[vector] urecpe [32]",
      "function_cn": "[向量] 求近似逆 [32]"
    },
    {
      "name": "vrecpe_f32",
      "full name": "float32x2_t vrecpe_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecpe",
      "function_en": "[vector] frecpe [32]",
      "function_cn": "[向量] 求近似逆 [32]"
    },
    {
      "name": "vrecpeq_f32",
      "full name": "float32x4_t vrecpeq_f32(float32x4_t a)",
      "Intel name": "_mm_rcp_ps",
      "Intel Asm": "rcpps",
      "Arm Asm": "frecpe",
      "function_en": "[vector] frecpe [32]",
      "function_cn": "[向量] 求近似逆 [32]"
    },
    {
      "name": "vrecpe_f64",
      "full name": "float64x1_t vrecpe_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecpe",
      "function_en": "[vector] frecpe [64]",
      "function_cn": "[向量] 求近似逆 [64]"
    },
    {
      "name": "vrecpeq_f64",
      "full name": "float64x2_t vrecpeq_f64(float64x2_t a)",
      "Intel name": "_mm_rcp14_pd",
      "Intel Asm": "vrcp14pd",
      "Arm Asm": "frecpe",
      "function_en": "[vector] frecpe [64]",
      "function_cn": "[向量] 求近似逆 [64]"
    },
    {
      "name": "vrecpes_f32",
      "full name": "float32_t vrecpes_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecpe",
      "function_en": "[scalar] frecpe [32]",
      "function_cn": "[标量] 求近似逆 [32]"
    },
    {
      "name": "vrecped_f64",
      "full name": "float64_t vrecped_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecpe",
      "function_en": "[scalar] frecpe [64]",
      "function_cn": "[标量] 求近似逆 [64]"
    },
    {
      "name": "vrecps_f32",
      "full name": "float32x2_t vrecps_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecps",
      "function_en": "[vector] frecps [32]",
      "function_cn": "[向量] 2.0减去对应元素的乘积 [32]"
    },
    {
      "name": "vrecpsq_f32",
      "full name": "float32x4_t vrecpsq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecps",
      "function_en": "[vector] frecps [32]",
      "function_cn": "[向量] 2.0减去对应元素的乘积 [32]"
    },
    {
      "name": "vrecps_f64",
      "full name": "float64x1_t vrecps_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecps",
      "function_en": "[vector] frecps [64]",
      "function_cn": "[向量] 2.0减去对应元素的乘积 [64]"
    },
    {
      "name": "vrecpsq_f64",
      "full name": "float64x2_t vrecpsq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecps",
      "function_en": "[vector] frecps [64]",
      "function_cn": "[向量] 2.0减去对应元素的乘积 [64]"
    },
    {
      "name": "vrecpss_f32",
      "full name": "float32_t vrecpss_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecps",
      "function_en": "[scalar] frecps [32]",
      "function_cn": "[标量] 2.0减去对应元素的乘积 [32]"
    },
    {
      "name": "vrecpsd_f64",
      "full name": "float64_t vrecpsd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecps",
      "function_en": "[scalar] frecps [64]",
      "function_cn": "[标量] 2.0减去对应元素的乘积 [64]"
    },
    {
      "name": "vsqrt_f32",
      "full name": "float32x2_t vsqrt_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fsqrt",
      "function_en": "[vector] fsqrt [32]",
      "function_cn": "[向量] 计算平方根 [32]"
    },
    {
      "name": "vsqrtq_f32",
      "full name": "float32x4_t vsqrtq_f32(float32x4_t a)",
      "Intel name": "_mm_sqrt_ps",
      "Intel Asm": "sqrtps",
      "Arm Asm": "fsqrt",
      "function_en": "[vector] fsqrt [32]",
      "function_cn": "[向量] 计算平方根 [32]"
    },
    {
      "name": "vsqrt_f64",
      "full name": "float64x1_t vsqrt_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fsqrt",
      "function_en": "[vector] fsqrt [64]",
      "function_cn": "[向量] 计算平方根 [64]"
    },
    {
      "name": "vsqrtq_f64",
      "full name": "float64x2_t vsqrtq_f64(float64x2_t a)",
      "Intel name": "_mm_sqrt_pd",
      "Intel Asm": "sqrtpd",
      "Arm Asm": "fsqrt",
      "function_en": "[vector] fsqrt [64]",
      "function_cn": "[向量] 计算平方根 [64]"
    },
    {
      "name": "vrsqrte_u32",
      "full name": "uint32x2_t vrsqrte_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursqrte",
      "function_en": "[vector] ursqrte [32]",
      "function_cn": "[向量] 计算平方根倒数 [32]"
    },
    {
      "name": "vrsqrteq_u32",
      "full name": "uint32x4_t vrsqrteq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ursqrte",
      "function_en": "[vector] ursqrte [32]",
      "function_cn": "[向量] 计算平方根倒数 [32]"
    },
    {
      "name": "vrsqrte_f32",
      "full name": "float32x2_t vrsqrte_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrte",
      "function_en": "[vector] frsqrte [32]",
      "function_cn": "[向量] 计算平方根倒数 [32]"
    },
    {
      "name": "vrsqrteq_f32",
      "full name": "float32x4_t vrsqrteq_f32(float32x4_t a)",
      "Intel name": "_mm_rsqrt_ps",
      "Intel Asm": "rsqrtps",
      "Arm Asm": "frsqrte",
      "function_en": "[vector] frsqrte [32]",
      "function_cn": "[向量] 计算平方根倒数 [32]"
    },
    {
      "name": "vrsqrte_f64",
      "full name": "float64x1_t vrsqrte_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrte",
      "function_en": "[vector] frsqrte [64]",
      "function_cn": "[向量] 计算平方根倒数 [64]"
    },
    {
      "name": "vrsqrteq_f64",
      "full name": "float64x2_t vrsqrteq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrte",
      "function_en": "[vector] frsqrte [64]",
      "function_cn": "[向量] 计算平方根倒数 [64]"
    },
    {
      "name": "vrsqrtes_f32",
      "full name": "float32_t vrsqrtes_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrte",
      "function_en": "[scalar] frsqrte [32]",
      "function_cn": "[标量] 计算平方根倒数 [32]"
    },
    {
      "name": "vrsqrted_f64",
      "full name": "float64_t vrsqrted_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrte",
      "function_en": "[scalar] frsqrte [64]",
      "function_cn": "[标量] 计算平方根倒数 [64]"
    },
    {
      "name": "vrsqrts_f32",
      "full name": "float32x2_t vrsqrts_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrts",
      "function_en": "[vector] frsqrts [32]",
      "function_cn": "[向量] 3.0减去对应元素的乘积再除以2.0 [32]"
    },
    {
      "name": "vrsqrtsq_f32",
      "full name": "float32x4_t vrsqrtsq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrts",
      "function_en": "[vector] frsqrts [32]",
      "function_cn": "[向量] 3.0减去对应元素的乘积再除以2.0 [32]"
    },
    {
      "name": "vrsqrts_f64",
      "full name": "float64x1_t vrsqrts_f64(float64x1_t a, float64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrts",
      "function_en": "[vector] frsqrts [64]",
      "function_cn": "[向量] 3.0减去对应元素的乘积再除以2.0 [64]"
    },
    {
      "name": "vrsqrtsq_f64",
      "full name": "float64x2_t vrsqrtsq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrts",
      "function_en": "[vector] frsqrts [64]",
      "function_cn": "[向量] 3.0减去对应元素的乘积再除以2.0 [64]"
    },
    {
      "name": "vrsqrtss_f32",
      "full name": "float32_t vrsqrtss_f32(float32_t a, float32_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrts",
      "function_en": "[scalar] frsqrts [32]",
      "function_cn": "[标量] 3.0减去对应元素的乘积再除以2.0 [32]"
    },
    {
      "name": "vrsqrtsd_f64",
      "full name": "float64_t vrsqrtsd_f64(float64_t a, float64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frsqrts",
      "function_en": "[scalar] frsqrts [32]",
      "function_cn": "[标量] 3.0减去对应元素的乘积再除以2.0 [32]"
    },
    {
      "name": "vmvn_s8",
      "full name": "int8x8_t vmvn_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [8]",
      "function_cn": "[向量] 按位取反 [8]"
    },
    {
      "name": "vmvnq_s8",
      "full name": "int8x16_t vmvnq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [8]",
      "function_cn": "[向量] 按位取反 [8]"
    },
    {
      "name": "vmvn_s16",
      "full name": "int16x4_t vmvn_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [16]",
      "function_cn": "[向量] 按位取反 [16]"
    },
    {
      "name": "vmvnq_s16",
      "full name": "int16x8_t vmvnq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [16]",
      "function_cn": "[向量] 按位取反 [16]"
    },
    {
      "name": "vmvn_s32",
      "full name": "int32x2_t vmvn_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [32]",
      "function_cn": "[向量] 按位取反 [32]"
    },
    {
      "name": "vmvnq_s32",
      "full name": "int32x4_t vmvnq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [32]",
      "function_cn": "[向量] 按位取反 [32]"
    },
    {
      "name": "vmvn_u8",
      "full name": "uint8x8_t vmvn_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [8]",
      "function_cn": "[向量] 按位取反 [8]"
    },
    {
      "name": "vmvnq_u8",
      "full name": "uint8x16_t vmvnq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [8]",
      "function_cn": "[向量] 按位取反 [8]"
    },
    {
      "name": "vmvn_u16",
      "full name": "uint16x4_t vmvn_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [16]",
      "function_cn": "[向量] 按位取反 [16]"
    },
    {
      "name": "vmvnq_u16",
      "full name": "uint16x8_t vmvnq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [16]",
      "function_cn": "[向量] 按位取反 [16]"
    },
    {
      "name": "vmvn_u32",
      "full name": "uint32x2_t vmvn_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [32]",
      "function_cn": "[向量] 按位取反 [32]"
    },
    {
      "name": "vmvnq_u32",
      "full name": "uint32x4_t vmvnq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [32]",
      "function_cn": "[向量] 按位取反 [32]"
    },
    {
      "name": "vmvn_p8",
      "full name": "poly8x8_t vmvn_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [8]",
      "function_cn": "[向量] 按位取反 [8]"
    },
    {
      "name": "vmvnq_p8",
      "full name": "poly8x16_t vmvnq_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "mvn",
      "function_en": "[vector] mvn [8]",
      "function_cn": "[向量] 按位取反 [8]"
    },
    {
      "name": "vand_s8",
      "full name": "int8x8_t vand_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [8]",
      "function_cn": "[向量] 按位与 [8]"
    },
    {
      "name": "vandq_s8",
      "full name": "int8x16_t vandq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [8]",
      "function_cn": "[向量] 按位与 [8]"
    },
    {
      "name": "vand_s16",
      "full name": "int16x4_t vand_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [16]",
      "function_cn": "[向量] 按位与 [16]"
    },
    {
      "name": "vandq_s16",
      "full name": "int16x8_t vandq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [16]",
      "function_cn": "[向量] 按位与 [16]"
    },
    {
      "name": "vand_s32",
      "full name": "int32x2_t vand_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [32]",
      "function_cn": "[向量] 按位与 [32]"
    },
    {
      "name": "vandq_s32",
      "full name": "int32x4_t vandq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm512_and_epi32",
      "Intel Asm": "vpandd",
      "Arm Asm": "and",
      "function_en": "[vector] and [32]",
      "function_cn": "[向量] 按位与 [32]"
    },
    {
      "name": "vand_s64",
      "full name": "int64x1_t vand_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "_mm_and_si64",
      "Intel Asm": "pand",
      "Arm Asm": "and",
      "function_en": "[vector] and [64]",
      "function_cn": "[向量] 按位与 [64]"
    },
    {
      "name": "vandq_s64",
      "full name": "int64x2_t vandq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm512_and_epi64",
      "Intel Asm": "vpandq",
      "Arm Asm": "and",
      "function_en": "[vector] and [64]",
      "function_cn": "[向量] 按位与 [64]"
    },
    {
      "name": "vand_u8",
      "full name": "uint8x8_t vand_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [8]",
      "function_cn": "[向量] 按位与 [8]"
    },
    {
      "name": "vandq_u8",
      "full name": "uint8x16_t vandq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [8]",
      "function_cn": "[向量] 按位与 [8]"
    },
    {
      "name": "vand_u16",
      "full name": "uint16x4_t vand_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [16]",
      "function_cn": "[向量] 按位与 [16]"
    },
    {
      "name": "vandq_u16",
      "full name": "uint16x8_t vandq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [16]",
      "function_cn": "[向量] 按位与 [16]"
    },
    {
      "name": "vand_u32",
      "full name": "uint32x2_t vand_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [32]",
      "function_cn": "[向量] 按位与 [32]"
    },
    {
      "name": "vandq_u32",
      "full name": "uint32x4_t vandq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [32]",
      "function_cn": "[向量] 按位与 [32]"
    },
    {
      "name": "vand_u64",
      "full name": "uint64x1_t vand_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [64]",
      "function_cn": "[向量] 按位与 [64]"
    },
    {
      "name": "vandq_u64",
      "full name": "uint64x2_t vandq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "and",
      "function_en": "[vector] and [64]",
      "function_cn": "[向量] 按位与 [64]"
    },
    {
      "name": "vorr_s8",
      "full name": "int8x8_t vorr_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [8]",
      "function_cn": "[向量] 按位或 [8]"
    },
    {
      "name": "vorrq_s8",
      "full name": "int8x16_t vorrq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [8]",
      "function_cn": "[向量] 按位或 [8]"
    },
    {
      "name": "vorr_s16",
      "full name": "int16x4_t vorr_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [16]",
      "function_cn": "[向量] 按位或 [16]"
    },
    {
      "name": "vorrq_s16",
      "full name": "int16x8_t vorrq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [16]",
      "function_cn": "[向量] 按位或 [16]"
    },
    {
      "name": "vorr_s32",
      "full name": "int32x2_t vorr_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [32]",
      "function_cn": "[向量] 按位或 [32]"
    },
    {
      "name": "vorrq_s32",
      "full name": "int32x4_t vorrq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_or_epi32",
      "Intel Asm": "vpord",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [32]",
      "function_cn": "[向量] 按位或 [32]"
    },
    {
      "name": "vorr_s64",
      "full name": "int64x1_t vorr_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "_mm_or_si64",
      "Intel Asm": "por",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [64]",
      "function_cn": "[向量] 按位或 [64]"
    },
    {
      "name": "vorrq_s64",
      "full name": "int64x2_t vorrq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_or_epi64",
      "Intel Asm": "vporq",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [64]",
      "function_cn": "[向量] 按位或 [64]"
    },
    {
      "name": "vorr_u8",
      "full name": "uint8x8_t vorr_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [8]",
      "function_cn": "[向量] 按位或 [8]"
    },
    {
      "name": "vorrq_u8",
      "full name": "uint8x16_t vorrq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [8]",
      "function_cn": "[向量] 按位或 [8]"
    },
    {
      "name": "vorr_u16",
      "full name": "uint16x4_t vorr_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [16]",
      "function_cn": "[向量] 按位或 [16]"
    },
    {
      "name": "vorrq_u16",
      "full name": "uint16x8_t vorrq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [16]",
      "function_cn": "[向量] 按位或 [16]"
    },
    {
      "name": "vorr_u32",
      "full name": "uint32x2_t vorr_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [32]",
      "function_cn": "[向量] 按位或 [32]"
    },
    {
      "name": "vorrq_u32",
      "full name": "uint32x4_t vorrq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [32]",
      "function_cn": "[向量] 按位或 [32]"
    },
    {
      "name": "vorr_u64",
      "full name": "uint64x1_t vorr_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [64]",
      "function_cn": "[向量] 按位或 [64]"
    },
    {
      "name": "vorrq_u64",
      "full name": "uint64x2_t vorrq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orr",
      "function_en": "[vector] orr [64]",
      "function_cn": "[向量] 按位或 [64]"
    },
    {
      "name": "veor_s8",
      "full name": "int8x8_t veor_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [8]",
      "function_cn": "[向量] 按位异或 [8]"
    },
    {
      "name": "veorq_s8",
      "full name": "int8x16_t veorq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [8]",
      "function_cn": "[向量] 按位异或 [8]"
    },
    {
      "name": "veor_s16",
      "full name": "int16x4_t veor_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [16]",
      "function_cn": "[向量] 按位异或 [16]"
    },
    {
      "name": "veorq_s16",
      "full name": "int16x8_t veorq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [16]",
      "function_cn": "[向量] 按位异或 [16]"
    },
    {
      "name": "veor_s32",
      "full name": "int32x2_t veor_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [32]",
      "function_cn": "[向量] 按位异或 [32]"
    },
    {
      "name": "veorq_s32",
      "full name": "int32x4_t veorq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_xor_epi32",
      "Intel Asm": "vpxord",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [32]",
      "function_cn": "[向量] 按位异或 [32]"
    },
    {
      "name": "veor_s64",
      "full name": "int64x1_t veor_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "_mm_xor_si64",
      "Intel Asm": "pxor",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [64]",
      "function_cn": "[向量] 按位异或 [64]"
    },
    {
      "name": "veorq_s64",
      "full name": "int64x2_t veorq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_xor_epi64",
      "Intel Asm": "vpxorq",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [64]",
      "function_cn": "[向量] 按位异或 [64]"
    },
    {
      "name": "veor_u8",
      "full name": "uint8x8_t veor_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [8]",
      "function_cn": "[向量] 按位异或 [8]"
    },
    {
      "name": "veorq_u8",
      "full name": "uint8x16_t veorq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [8]",
      "function_cn": "[向量] 按位异或 [8]"
    },
    {
      "name": "veor_u16",
      "full name": "uint16x4_t veor_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [16]",
      "function_cn": "[向量] 按位异或 [16]"
    },
    {
      "name": "veorq_u16",
      "full name": "uint16x8_t veorq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [16]",
      "function_cn": "[向量] 按位异或 [16]"
    },
    {
      "name": "veor_u32",
      "full name": "uint32x2_t veor_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [32]",
      "function_cn": "[向量] 按位异或 [32]"
    },
    {
      "name": "veorq_u32",
      "full name": "uint32x4_t veorq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [32]",
      "function_cn": "[向量] 按位异或 [32]"
    },
    {
      "name": "veor_u64",
      "full name": "uint64x1_t veor_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [64]",
      "function_cn": "[向量] 按位异或 [64]"
    },
    {
      "name": "veorq_u64",
      "full name": "uint64x2_t veorq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "eor",
      "function_en": "[vector] eor [64]",
      "function_cn": "[向量] 按位异或 [64]"
    },
    {
      "name": "vbic_s8",
      "full name": "int8x8_t vbic_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [8]"
    },
    {
      "name": "vbicq_s8",
      "full name": "int8x16_t vbicq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [8]"
    },
    {
      "name": "vbic_s16",
      "full name": "int16x4_t vbic_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [8]"
    },
    {
      "name": "vbicq_s16",
      "full name": "int16x8_t vbicq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [16]"
    },
    {
      "name": "vbic_s32",
      "full name": "int32x2_t vbic_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [32]"
    },
    {
      "name": "vbicq_s32",
      "full name": "int32x4_t vbicq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm512_andnot_epi32",
      "Intel Asm": "vpandnd",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [32]"
    },
    {
      "name": "vbic_s64",
      "full name": "int64x1_t vbic_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "_mm_andnot_si64",
      "Intel Asm": "pandn",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [64]"
    },
    {
      "name": "vbicq_s64",
      "full name": "int64x2_t vbicq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm512_andnot_epi64",
      "Intel Asm": "vpandnq",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [64]"
    },
    {
      "name": "vbic_u8",
      "full name": "uint8x8_t vbic_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [8]"
    },
    {
      "name": "vbicq_u8",
      "full name": "uint8x16_t vbicq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [8]"
    },
    {
      "name": "vbic_u16",
      "full name": "uint16x4_t vbic_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [16]"
    },
    {
      "name": "vbicq_u16",
      "full name": "uint16x8_t vbicq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [16]"
    },
    {
      "name": "vbic_u32",
      "full name": "uint32x2_t vbic_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [32]"
    },
    {
      "name": "vbicq_u32",
      "full name": "uint32x4_t vbicq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [32]"
    },
    {
      "name": "vbic_u64",
      "full name": "uint64x1_t vbic_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [64]"
    },
    {
      "name": "vbicq_u64",
      "full name": "uint64x2_t vbicq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bic",
      "function_en": "[vector] bic [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位与 [64]"
    },
    {
      "name": "vorn_s8",
      "full name": "int8x8_t vorn_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [8]"
    },
    {
      "name": "vornq_s8",
      "full name": "int8x16_t vornq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [8]"
    },
    {
      "name": "vorn_s16",
      "full name": "int16x4_t vorn_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [16]"
    },
    {
      "name": "vornq_s16",
      "full name": "int16x8_t vornq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [16]"
    },
    {
      "name": "vorn_s32",
      "full name": "int32x2_t vorn_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [32]"
    },
    {
      "name": "vornq_s32",
      "full name": "int32x4_t vornq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [32]"
    },
    {
      "name": "vorn_s64",
      "full name": "int64x1_t vorn_s64(int64x1_t a, int64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [64]"
    },
    {
      "name": "vornq_s64",
      "full name": "int64x2_t vornq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [64]"
    },
    {
      "name": "vorn_u8",
      "full name": "uint8x8_t vorn_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [8]"
    },
    {
      "name": "vornq_u8",
      "full name": "uint8x16_t vornq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [8]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [8]"
    },
    {
      "name": "vorn_u16",
      "full name": "uint16x4_t vorn_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [16]"
    },
    {
      "name": "vornq_u16",
      "full name": "uint16x8_t vornq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [16]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [16]"
    },
    {
      "name": "vorn_u32",
      "full name": "uint32x2_t vorn_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [32]"
    },
    {
      "name": "vornq_u32",
      "full name": "uint32x4_t vornq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [32]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [32]"
    },
    {
      "name": "vorn_u64",
      "full name": "uint64x1_t vorn_u64(uint64x1_t a, uint64x1_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [64]"
    },
    {
      "name": "vornq_u64",
      "full name": "uint64x2_t vornq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "orn",
      "function_en": "[vector] orn [64]",
      "function_cn": "[向量] 向量b中每个元素按位取反后和a中对应元素按位或 [64]"
    },
    {
      "name": "vbsl_s8",
      "full name": "int8x8_t vbsl_s8(uint8x8_t a, int8x8_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [8]",
      "function_cn": "[向量] 按位选择 [8]"
    },
    {
      "name": "vbslq_s8",
      "full name": "int8x16_t vbslq_s8(uint8x16_t a, int8x16_t b, int8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [8]",
      "function_cn": "[向量] 按位选择 [8]"
    },
    {
      "name": "vbsl_s16",
      "full name": "int16x4_t vbsl_s16(uint16x4_t a, int16x4_t b, int16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [16]",
      "function_cn": "[向量] 按位选择 [16]"
    },
    {
      "name": "vbslq_s16",
      "full name": "int16x8_t vbslq_s16(uint16x8_t a, int16x8_t b, int16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [16]",
      "function_cn": "[向量] 按位选择 [16]"
    },
    {
      "name": "vbsl_s32",
      "full name": "int32x2_t vbsl_s32(uint32x2_t a, int32x2_t b, int32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [32]",
      "function_cn": "[向量] 按位选择 [32]"
    },
    {
      "name": "vbslq_s32",
      "full name": "int32x4_t vbslq_s32(uint32x4_t a, int32x4_t b, int32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [32]",
      "function_cn": "[向量] 按位选择 [32]"
    },
    {
      "name": "vbsl_s64",
      "full name": "int64x1_t vbsl_s64(uint64x1_t a, int64x1_t b, int64x1_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbslq_s64",
      "full name": "int64x2_t vbslq_s64(uint64x2_t a, int64x2_t b, int64x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbsl_u8",
      "full name": "uint8x8_t vbsl_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [8]",
      "function_cn": "[向量] 按位选择 [8]"
    },
    {
      "name": "vbslq_u8",
      "full name": "uint8x16_t vbslq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [8]",
      "function_cn": "[向量] 按位选择 [8]"
    },
    {
      "name": "vbsl_u16",
      "full name": "uint16x4_t vbsl_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [16]",
      "function_cn": "[向量] 按位选择 [16]"
    },
    {
      "name": "vbslq_u16",
      "full name": "uint16x8_t vbslq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [16]",
      "function_cn": "[向量] 按位选择 [16]"
    },
    {
      "name": "vbsl_u32",
      "full name": "uint32x2_t vbsl_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [32]",
      "function_cn": "[向量] 按位选择 [32]"
    },
    {
      "name": "vbslq_u32",
      "full name": "uint32x4_t vbslq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [32]",
      "function_cn": "[向量] 按位选择 [32]"
    },
    {
      "name": "vbsl_u64",
      "full name": "uint64x1_t vbsl_u64(uint64x1_t a, uint64x1_t b, uint64x1_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbslq_u64",
      "full name": "uint64x2_t vbslq_u64(uint64x2_t a, uint64x2_t b, uint64x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbsl_p64",
      "full name": "poly64x1_t vbsl_p64(poly64x1_t a, poly64x1_t b, poly64x1_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbslq_p64",
      "full name": "poly64x2_t vbslq_p64(poly64x2_t a, poly64x2_t b, poly64x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbsl_f32",
      "full name": "float32x2_t vbsl_f32(uint32x2_t a, float32x2_t b, float32x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [32]",
      "function_cn": "[向量] 按位选择 [32]"
    },
    {
      "name": "vbslq_f32",
      "full name": "float32x4_t vbslq_f32(uint32x4_t a, float32x4_t b, float32x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [32]",
      "function_cn": "[向量] 按位选择 [32]"
    },
    {
      "name": "vbsl_p8",
      "full name": "poly8x8_t vbsl_p8(uint8x8_t a, poly8x8_t b, poly8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [8]",
      "function_cn": "[向量] 按位选择 [8]"
    },
    {
      "name": "vbslq_p8",
      "full name": "poly8x16_t vbslq_p8(uint8x16_t a, poly8x16_t b, poly8x16_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [8]",
      "function_cn": "[向量] 按位选择 [8]"
    },
    {
      "name": "vbsl_p16",
      "full name": "poly16x4_t vbsl_p16(uint16x4_t a, poly16x4_t b, poly16x4_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [16]",
      "function_cn": "[向量] 按位选择 [16]"
    },
    {
      "name": "vbslq_p16",
      "full name": "poly16x8_t vbslq_p16(uint16x8_t a, poly16x8_t b, poly16x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [16]",
      "function_cn": "[向量] 按位选择 [16]"
    },
    {
      "name": "vbsl_f64",
      "full name": "float64x1_t vbsl_f64(uint64x1_t a, float64x1_t b, float64x1_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vbslq_f64",
      "full name": "float64x2_t vbslq_f64(uint64x2_t a, float64x2_t b, float64x2_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "bsl",
      "function_en": "[vector] bsl [64]",
      "function_cn": "[向量] 按位选择 [64]"
    },
    {
      "name": "vcopy_lane_s8",
      "full name": "int8x8_t vcopy_lane_s8(int8x8_t a, const int lane1, int8x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopyq_lane_s8",
      "full name": "int8x16_t vcopyq_lane_s8(int8x16_t a, const int lane1, int8x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopy_lane_s16",
      "full name": "int16x4_t vcopy_lane_s16(int16x4_t a, const int lane1, int16x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopyq_lane_s16",
      "full name": "int16x8_t vcopyq_lane_s16(int16x8_t a, const int lane1, int16x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopy_lane_s32",
      "full name": "int32x2_t vcopy_lane_s32(int32x2_t a, const int lane1, int32x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopyq_lane_s32",
      "full name": "int32x4_t vcopyq_lane_s32(int32x4_t a, const int lane1, int32x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopy_lane_s64",
      "full name": "int64x1_t vcopy_lane_s64(int64x1_t a, const int lane1, int64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_lane_s64",
      "full name": "int64x2_t vcopyq_lane_s64(int64x2_t a, const int lane1, int64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_lane_u8",
      "full name": "uint8x8_t vcopy_lane_u8(uint8x8_t a, const int lane1, uint8x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopyq_lane_u8",
      "full name": "uint8x16_t vcopyq_lane_u8(uint8x16_t a, const int lane1, uint8x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopy_lane_u16",
      "full name": "uint16x4_t vcopy_lane_u16(uint16x4_t a, const int lane1, uint16x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopyq_lane_u16",
      "full name": "uint16x8_t vcopyq_lane_u16(uint16x8_t a, const int lane1, uint16x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopy_lane_u32",
      "full name": "uint32x2_t vcopy_lane_u32(uint32x2_t a, const int lane1, uint32x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopyq_lane_u32",
      "full name": "uint32x4_t vcopyq_lane_u32(uint32x4_t a, const int lane1, uint32x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopy_lane_u64",
      "full name": "uint64x1_t vcopy_lane_u64(uint64x1_t a, const int lane1, uint64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_lane_u64",
      "full name": "uint64x2_t vcopyq_lane_u64(uint64x2_t a, const int lane1, uint64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_lane_p64",
      "full name": "poly64x1_t vcopy_lane_p64(poly64x1_t a, const int lane1, poly64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_lane_p64",
      "full name": "poly64x2_t vcopyq_lane_p64(poly64x2_t a, const int lane1, poly64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_lane_f32",
      "full name": "float32x2_t vcopy_lane_f32(float32x2_t a, const int lane1, float32x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopyq_lane_f32",
      "full name": "float32x4_t vcopyq_lane_f32(float32x4_t a, const int lane1, float32x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopy_lane_f64",
      "full name": "float64x1_t vcopy_lane_f64(float64x1_t a, const int lane1, float64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_lane_f64",
      "full name": "float64x2_t vcopyq_lane_f64(float64x2_t a, const int lane1, float64x1_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_lane_p8",
      "full name": "poly8x8_t vcopy_lane_p8(poly8x8_t a, const int lane1, poly8x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopyq_lane_p8",
      "full name": "poly8x16_t vcopyq_lane_p8(poly8x16_t a, const int lane1, poly8x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopy_lane_p16",
      "full name": "poly16x4_t vcopy_lane_p16(poly16x4_t a, const int lane1, poly16x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopyq_lane_p16",
      "full name": "poly16x8_t vcopyq_lane_p16(poly16x8_t a, const int lane1, poly16x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopy_laneq_s8",
      "full name": "int8x8_t vcopy_laneq_s8(int8x8_t a, const int lane1, int8x16_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopyq_laneq_s8",
      "full name": "int8x16_t vcopyq_laneq_s8(int8x16_t a, const int lane1, int8x16_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopy_laneq_s16",
      "full name": "int16x4_t vcopy_laneq_s16(int16x4_t a, const int lane1, int16x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopyq_laneq_s16",
      "full name": "int16x8_t vcopyq_laneq_s16(int16x8_t a, const int lane1, int16x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopy_laneq_s32",
      "full name": "int32x2_t vcopy_laneq_s32(int32x2_t a, const int lane1, int32x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopyq_laneq_s32",
      "full name": "int32x4_t vcopyq_laneq_s32(int32x4_t a, const int lane1, int32x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopy_laneq_s64",
      "full name": "int64x1_t vcopy_laneq_s64(int64x1_t a, const int lane1, int64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_laneq_s64",
      "full name": "int64x2_t vcopyq_laneq_s64(int64x2_t a, const int lane1, int64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_laneq_u8",
      "full name": "uint8x8_t vcopy_laneq_u8(uint8x8_t a, const int lane1, uint8x16_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopyq_laneq_u8",
      "full name": "uint8x16_t vcopyq_laneq_u8(uint8x16_t a, const int lane1, uint8x16_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopy_laneq_u16",
      "full name": "uint16x4_t vcopy_laneq_u16(uint16x4_t a, const int lane1, uint16x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopyq_laneq_u16",
      "full name": "uint16x8_t vcopyq_laneq_u16(uint16x8_t a, const int lane1, uint16x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopy_laneq_u32",
      "full name": "uint32x2_t vcopy_laneq_u32(uint32x2_t a, const int lane1, uint32x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopyq_laneq_u32",
      "full name": "uint32x4_t vcopyq_laneq_u32(uint32x4_t a, const int lane1, uint32x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopy_laneq_u64",
      "full name": "uint64x1_t vcopy_laneq_u64(uint64x1_t a, const int lane1, uint64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_laneq_u64",
      "full name": "uint64x2_t vcopyq_laneq_u64(uint64x2_t a, const int lane1, uint64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_laneq_p64",
      "full name": "poly64x1_t vcopy_laneq_p64(poly64x1_t a, const int lane1, poly64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_laneq_p64",
      "full name": "poly64x2_t vcopyq_laneq_p64(poly64x2_t a, const int lane1, poly64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_laneq_f32",
      "full name": "float32x2_t vcopy_laneq_f32(float32x2_t a, const int lane1, float32x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopyq_laneq_f32",
      "full name": "float32x4_t vcopyq_laneq_f32(float32x4_t a, const int lane1, float32x4_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 向量拷贝 [32]"
    },
    {
      "name": "vcopy_laneq_f64",
      "full name": "float64x1_t vcopy_laneq_f64(float64x1_t a, const int lane1, float64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopyq_laneq_f64",
      "full name": "float64x2_t vcopyq_laneq_f64(float64x2_t a, const int lane1, float64x2_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 向量拷贝 [64]"
    },
    {
      "name": "vcopy_laneq_p8",
      "full name": "poly8x8_t vcopy_laneq_p8(poly8x8_t a, const int lane1, poly8x16_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopyq_laneq_p8",
      "full name": "poly8x16_t vcopyq_laneq_p8(poly8x16_t a, const int lane1, poly8x16_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 向量拷贝 [8]"
    },
    {
      "name": "vcopy_laneq_p16",
      "full name": "poly16x4_t vcopy_laneq_p16(poly16x4_t a, const int lane1, poly16x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vcopyq_laneq_p16",
      "full name": "poly16x8_t vcopyq_laneq_p16(poly16x8_t a, const int lane1, poly16x8_t b, const int lane2)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 向量拷贝 [16]"
    },
    {
      "name": "vrbit_s8",
      "full name": "int8x8_t vrbit_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rbit",
      "function_en": "[vector] rbit [8]",
      "function_cn": "[向量] 反转元素的位 [8]"
    },
    {
      "name": "vrbitq_s8",
      "full name": "int8x16_t vrbitq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rbit",
      "function_en": "[vector] rbit [8]",
      "function_cn": "[向量] 反转元素的位 [8]"
    },
    {
      "name": "vrbit_u8",
      "full name": "uint8x8_t vrbit_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rbit",
      "function_en": "[vector] rbit [8]",
      "function_cn": "[向量] 反转元素的位 [8]"
    },
    {
      "name": "vrbitq_u8",
      "full name": "uint8x16_t vrbitq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rbit",
      "function_en": "[vector] rbit [8]",
      "function_cn": "[向量] 反转元素的位 [8]"
    },
    {
      "name": "vrbit_p8",
      "full name": "poly8x8_t vrbit_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rbit",
      "function_en": "[vector] rbit [8]",
      "function_cn": "[向量] 反转元素的位 [8]"
    },
    {
      "name": "vrbitq_p8",
      "full name": "poly8x16_t vrbitq_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rbit",
      "function_en": "[vector] rbit [8]",
      "function_cn": "[向量] 反转元素的位 [8]"
    },
    {
      "name": "vcreate_s8",
      "full name": "int8x8_t vcreate_s8(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [8]"
    },
    {
      "name": "vcreate_s16",
      "full name": "int16x4_t vcreate_s16(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [16]"
    },
    {
      "name": "vcreate_s32",
      "full name": "int32x2_t vcreate_s32(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [32]"
    },
    {
      "name": "vcreate_s64",
      "full name": "int64x1_t vcreate_s64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [64]"
    },
    {
      "name": "vcreate_u8",
      "full name": "uint8x8_t vcreate_u8(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [8]"
    },
    {
      "name": "vcreate_u16",
      "full name": "uint16x4_t vcreate_u16(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [16]"
    },
    {
      "name": "vcreate_u32",
      "full name": "uint32x2_t vcreate_u32(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [32]"
    },
    {
      "name": "vcreate_u64",
      "full name": "uint64x1_t vcreate_u64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [64]"
    },
    {
      "name": "vcreate_p64",
      "full name": "poly64x1_t vcreate_p64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [64]"
    },
    {
      "name": "vcreate_f16",
      "full name": "float16x4_t vcreate_f16(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [16]"
    },
    {
      "name": "vcreate_f32",
      "full name": "float32x2_t vcreate_f32(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [32]"
    },
    {
      "name": "vcreate_p8",
      "full name": "poly8x8_t vcreate_p8(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [8]"
    },
    {
      "name": "vcreate_p16",
      "full name": "poly16x4_t vcreate_p16(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [16]"
    },
    {
      "name": "vcreate_f64",
      "full name": "float64x1_t vcreate_f64(uint64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 标量拷贝到向量寄存器 [64]"
    },
    {
      "name": "vdup_n_s8",
      "full name": "int8x8_t vdup_n_s8(int8_t value)",
      "Intel name": "_mm_set1_pi8",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_n_s8",
      "full name": "int8x16_t vdupq_n_s8(int8_t value)",
      "Intel name": "_mm_set1_epi8",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vdup_n_s16",
      "full name": "int16x4_t vdup_n_s16(int16_t value)",
      "Intel name": "_mm_set1_pi16",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_n_s16",
      "full name": "int16x8_t vdupq_n_s16(int16_t value)",
      "Intel name": "_mm_set1_epi16",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vdup_n_s32",
      "full name": "int32x2_t vdup_n_s32(int32_t value)",
      "Intel name": "_mm_set1_pi32",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_n_s32",
      "full name": "int32x4_t vdupq_n_s32(int32_t value)",
      "Intel name": "_mm_set1_epi32",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [3232]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vdup_n_s64",
      "full name": "int64x1_t vdup_n_s64(int64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_n_s64",
      "full name": "int64x2_t vdupq_n_s64(int64_t value)",
      "Intel name": "_mm_set1_epi64",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdup_n_u8",
      "full name": "uint8x8_t vdup_n_u8(uint8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_n_u8",
      "full name": "uint8x16_t vdupq_n_u8(uint8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vdup_n_u16",
      "full name": "uint16x4_t vdup_n_u16(uint16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_n_u16",
      "full name": "uint16x8_t vdupq_n_u16(uint16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vdup_n_u32",
      "full name": "uint32x2_t vdup_n_u32(uint32_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_n_u32",
      "full name": "uint32x4_t vdupq_n_u32(uint32_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vdup_n_u64",
      "full name": "uint64x1_t vdup_n_u64(uint64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_n_u64",
      "full name": "uint64x2_t vdupq_n_u64(uint64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdup_n_p64",
      "full name": "poly64x1_t vdup_n_p64(poly64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_n_p64",
      "full name": "poly64x2_t vdupq_n_p64(poly64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdup_n_f32",
      "full name": "float32x2_t vdup_n_f32(float32_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_n_f32",
      "full name": "float32x4_t vdupq_n_f32(float32_t value)",
      "Intel name": "_mm_set1_ps",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vdup_n_p8",
      "full name": "poly8x8_t vdup_n_p8(poly8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_n_p8",
      "full name": "poly8x16_t vdupq_n_p8(poly8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vdup_n_p16",
      "full name": "poly16x4_t vdup_n_p16(poly16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_n_p16",
      "full name": "poly16x8_t vdupq_n_p16(poly16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vdup_n_f64",
      "full name": "float64x1_t vdup_n_f64(float64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_n_f64",
      "full name": "float64x2_t vdupq_n_f64(float64_t value)",
      "Intel name": "_mm_set1_pd",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vmov_n_s8",
      "full name": "int8x8_t vmov_n_s8(int8_t value)",
      "Intel name": "_mm_set1_pi8",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vmovq_n_s8",
      "full name": "int8x16_t vmovq_n_s8(int8_t value)",
      "Intel name": "_mm_set1_epi8",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vmov_n_s16",
      "full name": "int16x4_t vmov_n_s16(int16_t value)",
      "Intel name": "_mm_set1_pi16",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vmovq_n_s16",
      "full name": "int16x8_t vmovq_n_s16(int16_t value)",
      "Intel name": "_mm_set1_epi16",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vmov_n_s32",
      "full name": "int32x2_t vmov_n_s32(int32_t value)",
      "Intel name": "_mm_set1_pi32",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vmovq_n_s32",
      "full name": "int32x4_t vmovq_n_s32(int32_t value)",
      "Intel name": "_mm_set1_epi32",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vmov_n_s64",
      "full name": "int64x1_t vmov_n_s64(int64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vmovq_n_s64",
      "full name": "int64x2_t vmovq_n_s64(int64_t value)",
      "Intel name": "_mm_set1_epi64",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vmov_n_u8",
      "full name": "uint8x8_t vmov_n_u8(uint8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vmovq_n_u8",
      "full name": "uint8x16_t vmovq_n_u8(uint8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vmov_n_u16",
      "full name": "uint16x4_t vmov_n_u16(uint16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vmovq_n_u16",
      "full name": "uint16x8_t vmovq_n_u16(uint16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vmov_n_u32",
      "full name": "uint32x2_t vmov_n_u32(uint32_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vmovq_n_u32",
      "full name": "uint32x4_t vmovq_n_u32(uint32_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vmov_n_u64",
      "full name": "uint64x1_t vmov_n_u64(uint64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vmovq_n_u64",
      "full name": "uint64x2_t vmovq_n_u64(uint64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vmov_n_f32",
      "full name": "float32x2_t vmov_n_f32(float32_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vmovq_n_f32",
      "full name": "float32x4_t vmovq_n_f32(float32_t value)",
      "Intel name": "_mm_set1_ps",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [32]"
    },
    {
      "name": "vmov_n_p8",
      "full name": "poly8x8_t vmov_n_p8(poly8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vmovq_n_p8",
      "full name": "poly8x16_t vmovq_n_p8(poly8_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [8]"
    },
    {
      "name": "vmov_n_p16",
      "full name": "poly16x4_t vmov_n_p16(poly16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vmovq_n_p16",
      "full name": "poly16x8_t vmovq_n_p16(poly16_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [16]"
    },
    {
      "name": "vmov_n_f64",
      "full name": "float64x1_t vmov_n_f64(float64_t value)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vmovq_n_f64",
      "full name": "float64x2_t vmovq_n_f64(float64_t value)",
      "Intel name": "_mm_set1_pd",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制一个标量值到向量中的每个元素 [64]"
    },
    {
      "name": "vdup_lane_s8",
      "full name": "int8x8_t vdup_lane_s8(int8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_lane_s8",
      "full name": "int8x16_t vdupq_lane_s8(int8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdup_lane_s16",
      "full name": "int16x4_t vdup_lane_s16(int16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_lane_s16",
      "full name": "int16x8_t vdupq_lane_s16(int16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdup_lane_s32",
      "full name": "int32x2_t vdup_lane_s32(int32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_lane_s32",
      "full name": "int32x4_t vdupq_lane_s32(int32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdup_lane_s64",
      "full name": "int64x1_t vdup_lane_s64(int64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_lane_s64",
      "full name": "int64x2_t vdupq_lane_s64(int64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_lane_u8",
      "full name": "uint8x8_t vdup_lane_u8(uint8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_lane_u8",
      "full name": "uint8x16_t vdupq_lane_u8(uint8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdup_lane_u16",
      "full name": "uint16x4_t vdup_lane_u16(uint16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_lane_u16",
      "full name": "uint16x8_t vdupq_lane_u16(uint16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdup_lane_u32",
      "full name": "uint32x2_t vdup_lane_u32(uint32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_lane_u32",
      "full name": "uint32x4_t vdupq_lane_u32(uint32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdup_lane_u64",
      "full name": "uint64x1_t vdup_lane_u64(uint64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_lane_u64",
      "full name": "uint64x2_t vdupq_lane_u64(uint64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_lane_p64",
      "full name": "poly64x1_t vdup_lane_p64(poly64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_lane_p64",
      "full name": "poly64x2_t vdupq_lane_p64(poly64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_lane_f32",
      "full name": "float32x2_t vdup_lane_f32(float32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_lane_f32",
      "full name": "float32x4_t vdupq_lane_f32(float32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdup_lane_p8",
      "full name": "poly8x8_t vdup_lane_p8(poly8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_lane_p8",
      "full name": "poly8x16_t vdupq_lane_p8(poly8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdup_lane_p16",
      "full name": "poly16x4_t vdup_lane_p16(poly16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_lane_p16",
      "full name": "poly16x8_t vdupq_lane_p16(poly16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdup_lane_f64",
      "full name": "float64x1_t vdup_lane_f64(float64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_lane_f64",
      "full name": "float64x2_t vdupq_lane_f64(float64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_laneq_s8",
      "full name": "int8x8_t vdup_laneq_s8(int8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_laneq_s8",
      "full name": "int8x16_t vdupq_laneq_s8(int8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdup_laneq_s16",
      "full name": "int16x4_t vdup_laneq_s16(int16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_laneq_s16",
      "full name": "int16x8_t vdupq_laneq_s16(int16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdup_laneq_s32",
      "full name": "int32x2_t vdup_laneq_s32(int32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_laneq_s32",
      "full name": "int32x4_t vdupq_laneq_s32(int32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdup_laneq_s64",
      "full name": "int64x1_t vdup_laneq_s64(int64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_laneq_s64",
      "full name": "int64x2_t vdupq_laneq_s64(int64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_laneq_u8",
      "full name": "uint8x8_t vdup_laneq_u8(uint8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_laneq_u8",
      "full name": "uint8x16_t vdupq_laneq_u8(uint8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdup_laneq_u16",
      "full name": "uint16x4_t vdup_laneq_u16(uint16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_laneq_u16",
      "full name": "uint16x8_t vdupq_laneq_u16(uint16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdup_laneq_u32",
      "full name": "uint32x2_t vdup_laneq_u32(uint32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_laneq_u32",
      "full name": "uint32x4_t vdupq_laneq_u32(uint32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdup_laneq_u64",
      "full name": "uint64x1_t vdup_laneq_u64(uint64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_laneq_u64",
      "full name": "uint64x2_t vdupq_laneq_u64(uint64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_laneq_p64",
      "full name": "poly64x1_t vdup_laneq_p64(poly64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_laneq_p64",
      "full name": "poly64x2_t vdupq_laneq_p64(poly64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdup_laneq_f32",
      "full name": "float32x2_t vdup_laneq_f32(float32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdupq_laneq_f32",
      "full name": "float32x4_t vdupq_laneq_f32(float32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [32]"
    },
    {
      "name": "vdup_laneq_p8",
      "full name": "poly8x8_t vdup_laneq_p8(poly8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdupq_laneq_p8",
      "full name": "poly8x16_t vdupq_laneq_p8(poly8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [8]"
    },
    {
      "name": "vdup_laneq_p16",
      "full name": "poly16x4_t vdup_laneq_p16(poly16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdupq_laneq_p16",
      "full name": "poly16x8_t vdupq_laneq_p16(poly16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [16]"
    },
    {
      "name": "vdup_laneq_f64",
      "full name": "float64x1_t vdup_laneq_f64(float64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vdupq_laneq_f64",
      "full name": "float64x2_t vdupq_laneq_f64(float64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制指定的向量元素到目标向量中的每个元素 [64]"
    },
    {
      "name": "vcombine_s8",
      "full name": "int8x16_t vcombine_s8(int8x8_t low, int8x8_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [8]",
      "function_cn": "[向量] 向量元素组合 [8]"
    },
    {
      "name": "vcombine_s16",
      "full name": "int16x8_t vcombine_s16(int16x4_t low, int16x4_t high)",
      "Intel name": "_mm_packs_epi16",
      "Intel Asm": "packsswb",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [16]",
      "function_cn": "[向量] 向量元素组合 [16]"
    },
    {
      "name": "vcombine_s32",
      "full name": "int32x4_t vcombine_s32(int32x2_t low, int32x2_t high)",
      "Intel name": "_mm_packs_epi32",
      "Intel Asm": "packssdw",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [32]",
      "function_cn": "[向量] 向量元素组合 [32]"
    },
    {
      "name": "vcombine_s64",
      "full name": "int64x2_t vcombine_s64(int64x1_t low, int64x1_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [64]",
      "function_cn": "[向量] 向量元素组合 [64]"
    },
    {
      "name": "vcombine_u8",
      "full name": "uint8x16_t vcombine_u8(uint8x8_t low, uint8x8_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [8]",
      "function_cn": "[向量] 向量元素组合 [8]"
    },
    {
      "name": "vcombine_u16",
      "full name": "uint16x8_t vcombine_u16(uint16x4_t low, uint16x4_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [16]",
      "function_cn": "[向量] 向量元素组合 [16]"
    },
    {
      "name": "vcombine_u32",
      "full name": "uint32x4_t vcombine_u32(uint32x2_t low, uint32x2_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [32]",
      "function_cn": "[向量] 向量元素组合 [32]"
    },
    {
      "name": "vcombine_u64",
      "full name": "uint64x2_t vcombine_u64(uint64x1_t low, uint64x1_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [64]",
      "function_cn": "[向量] 向量元素组合 [64]"
    },
    {
      "name": "vcombine_p64",
      "full name": "poly64x2_t vcombine_p64(poly64x1_t low, poly64x1_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [64]",
      "function_cn": "[向量] 向量元素组合 [64]"
    },
    {
      "name": "vcombine_f16",
      "full name": "float16x8_t vcombine_f16(float16x4_t low, float16x4_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [16]",
      "function_cn": "[向量] 向量元素组合 [16]"
    },
    {
      "name": "vcombine_f32",
      "full name": "float32x4_t vcombine_f32(float32x2_t low, float32x2_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [32]",
      "function_cn": "[向量] 向量元素组合 [32]"
    },
    {
      "name": "vcombine_p8",
      "full name": "poly8x16_t vcombine_p8(poly8x8_t low, poly8x8_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [8]",
      "function_cn": "[向量] 向量元素组合 [8]"
    },
    {
      "name": "vcombine_p16",
      "full name": "poly16x8_t vcombine_p16(poly16x4_t low, poly16x4_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [16]",
      "function_cn": "[向量] 向量元素组合 [16]"
    },
    {
      "name": "vcombine_f64",
      "full name": "float64x2_t vcombine_f64(float64x1_t low, float64x1_t high)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup ins",
      "function_en": "[vector] dup ins [64]",
      "function_cn": "[向量] 向量元素组合 [64]"
    },
    {
      "name": "vget_high_s8",
      "full name": "int8x8_t vget_high_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 获取向量的高半部分元素 [8]"
    },
    {
      "name": "vget_high_s16",
      "full name": "int16x4_t vget_high_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的高半部分元素 [16]"
    },
    {
      "name": "vget_high_s32",
      "full name": "int32x2_t vget_high_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 获取向量的高半部分元素 [32]"
    },
    {
      "name": "vget_high_s64",
      "full name": "int64x1_t vget_high_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的高半部分元素 [64]"
    },
    {
      "name": "vget_high_u8",
      "full name": "uint8x8_t vget_high_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 获取向量的高半部分元素 [8]"
    },
    {
      "name": "vget_high_u16",
      "full name": "uint16x4_t vget_high_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的高半部分元素 [16]"
    },
    {
      "name": "vget_high_u32",
      "full name": "uint32x2_t vget_high_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 获取向量的高半部分元素 [32]"
    },
    {
      "name": "vget_high_u64",
      "full name": "uint64x1_t vget_high_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的高半部分元素 [64]"
    },
    {
      "name": "vget_high_p64",
      "full name": "poly64x1_t vget_high_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的高半部分元素 [64]"
    },
    {
      "name": "vget_high_f16",
      "full name": "float16x4_t vget_high_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的高半部分元素 [16]"
    },
    {
      "name": "vget_high_f32",
      "full name": "float32x2_t vget_high_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 获取向量的高半部分元素 [32]"
    },
    {
      "name": "vget_high_p8",
      "full name": "poly8x8_t vget_high_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 获取向量的高半部分元素 [8]"
    },
    {
      "name": "vget_high_p16",
      "full name": "poly16x4_t vget_high_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的高半部分元素 [16]"
    },
    {
      "name": "vget_high_f64",
      "full name": "float64x1_t vget_high_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的高半部分元素 [64]"
    },
    {
      "name": "vget_low_s8",
      "full name": "int8x8_t vget_low_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 获取向量的低半部分元素 [8]"
    },
    {
      "name": "vget_low_s16",
      "full name": "int16x4_t vget_low_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的低半部分元素 [16]"
    },
    {
      "name": "vget_low_s32",
      "full name": "int32x2_t vget_low_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 获取向量的低半部分元素 [32]"
    },
    {
      "name": "vget_low_s64",
      "full name": "int64x1_t vget_low_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的低半部分元素 [64]"
    },
    {
      "name": "vget_low_u8",
      "full name": "uint8x8_t vget_low_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 获取向量的低半部分元素 [8]"
    },
    {
      "name": "vget_low_u16",
      "full name": "uint16x4_t vget_low_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的低半部分元素 [16]"
    },
    {
      "name": "vget_low_u32",
      "full name": "uint32x2_t vget_low_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 获取向量的低半部分元素 [32]"
    },
    {
      "name": "vget_low_u64",
      "full name": "uint64x1_t vget_low_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的低半部分元素 [64]"
    },
    {
      "name": "vget_low_p64",
      "full name": "poly64x1_t vget_low_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的低半部分元素 [64]"
    },
    {
      "name": "vget_low_f16",
      "full name": "float16x4_t vget_low_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的低半部分元素 [16]"
    },
    {
      "name": "vget_low_f32",
      "full name": "float32x2_t vget_low_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 获取向量的低半部分元素 [32]"
    },
    {
      "name": "vget_low_p8",
      "full name": "poly8x8_t vget_low_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 获取向量的低半部分元素 [8]"
    },
    {
      "name": "vget_low_p16",
      "full name": "poly16x4_t vget_low_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 获取向量的低半部分元素 [16]"
    },
    {
      "name": "vget_low_f64",
      "full name": "float64x1_t vget_low_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 获取向量的低半部分元素 [64]"
    },
    {
      "name": "vdupb_lane_s8",
      "full name": "int8_t vdupb_lane_s8(int8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [8]"
    },
    {
      "name": "vduph_lane_s16",
      "full name": "int16_t vduph_lane_s16(int16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [16]"
    },
    {
      "name": "vdups_lane_s32",
      "full name": "int32_t vdups_lane_s32(int32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [32]"
    },
    {
      "name": "vdupd_lane_s64",
      "full name": "int64_t vdupd_lane_s64(int64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [64]"
    },
    {
      "name": "vdupb_lane_u8",
      "full name": "uint8_t vdupb_lane_u8(uint8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [8]"
    },
    {
      "name": "vduph_lane_u16",
      "full name": "uint16_t vduph_lane_u16(uint16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [16]"
    },
    {
      "name": "vdups_lane_u32",
      "full name": "uint32_t vdups_lane_u32(uint32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [32]"
    },
    {
      "name": "vdupd_lane_u64",
      "full name": "uint64_t vdupd_lane_u64(uint64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [64]"
    },
    {
      "name": "vdups_lane_f32",
      "full name": "float32_t vdups_lane_f32(float32x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [32]"
    },
    {
      "name": "vdupd_lane_f64",
      "full name": "float64_t vdupd_lane_f64(float64x1_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [64]"
    },
    {
      "name": "vdupb_lane_p8",
      "full name": "poly8_t vdupb_lane_p8(poly8x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [8]"
    },
    {
      "name": "vduph_lane_p16",
      "full name": "poly16_t vduph_lane_p16(poly16x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [16]"
    },
    {
      "name": "vdupb_laneq_s8",
      "full name": "int8_t vdupb_laneq_s8(int8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [8]"
    },
    {
      "name": "vduph_laneq_s16",
      "full name": "int16_t vduph_laneq_s16(int16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [16]"
    },
    {
      "name": "vdups_laneq_s32",
      "full name": "int32_t vdups_laneq_s32(int32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [32]"
    },
    {
      "name": "vdupd_laneq_s64",
      "full name": "int64_t vdupd_laneq_s64(int64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [64]"
    },
    {
      "name": "vdupb_laneq_u8",
      "full name": "uint8_t vdupb_laneq_u8(uint8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [8]"
    },
    {
      "name": "vduph_laneq_u16",
      "full name": "uint16_t vduph_laneq_u16(uint16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [16]"
    },
    {
      "name": "vdups_laneq_u32",
      "full name": "uint32_t vdups_laneq_u32(uint32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [32]"
    },
    {
      "name": "vdupd_laneq_u64",
      "full name": "uint64_t vdupd_laneq_u64(uint64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [64]"
    },
    {
      "name": "vdups_laneq_f32",
      "full name": "float32_t vdups_laneq_f32(float32x4_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [32]"
    },
    {
      "name": "vdupd_laneq_f64",
      "full name": "float64_t vdupd_laneq_f64(float64x2_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [64]"
    },
    {
      "name": "vdupb_laneq_p8",
      "full name": "poly8_t vdupb_laneq_p8(poly8x16_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [8]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [8]"
    },
    {
      "name": "vduph_laneq_p16",
      "full name": "poly16_t vduph_laneq_p16(poly16x8_t vec, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 复制向量中指定的一个元素到目标寄存器 [16]"
    },
    {
      "name": "vld1_s8",
      "full name": "int8x8_t vld1_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [8]"
    },
    {
      "name": "vld1q_s8",
      "full name": "int8x16_t vld1q_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [8]"
    },
    {
      "name": "vld1_s16",
      "full name": "int16x4_t vld1_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1q_s16",
      "full name": "int16x8_t vld1q_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1_s32",
      "full name": "int32x2_t vld1_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [32]"
    },
    {
      "name": "vld1q_s32",
      "full name": "int32x4_t vld1q_s32(int32_t const * ptr)",
      "Intel name": "_mm_load_epi32",
      "Intel Asm": "vmovdqa32",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [32]"
    },
    {
      "name": "vld1_s64",
      "full name": "int64x1_t vld1_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1q_s64",
      "full name": "int64x2_t vld1q_s64(int64_t const * ptr)",
      "Intel name": "_mm_load_epi64",
      "Intel Asm": "vmovdqa64",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1_u8",
      "full name": "uint8x8_t vld1_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [8]"
    },
    {
      "name": "vld1q_u8",
      "full name": "uint8x16_t vld1q_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [8]"
    },
    {
      "name": "vld1_u16",
      "full name": "uint16x4_t vld1_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1q_u16",
      "full name": "uint16x8_t vld1q_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1_u32",
      "full name": "uint32x2_t vld1_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [32]"
    },
    {
      "name": "vld1q_u32",
      "full name": "uint32x4_t vld1q_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [32]"
    },
    {
      "name": "vld1_u64",
      "full name": "uint64x1_t vld1_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1q_u64",
      "full name": "uint64x2_t vld1q_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1_p64",
      "full name": "poly64x1_t vld1_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1q_p64",
      "full name": "poly64x2_t vld1q_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1_f16",
      "full name": "float16x4_t vld1_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1q_f16",
      "full name": "float16x8_t vld1q_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1_f32",
      "full name": "float32x2_t vld1_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [32]"
    },
    {
      "name": "vld1q_f32",
      "full name": "float32x4_t vld1q_f32(float32_t const * ptr)",
      "Intel name": "_mm_load_ps",
      "Intel Asm": "movaps",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [32]"
    },
    {
      "name": "vld1_p8",
      "full name": "poly8x8_t vld1_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [8]"
    },
    {
      "name": "vld1q_p8",
      "full name": "poly8x16_t vld1q_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [8]"
    },
    {
      "name": "vld1_p16",
      "full name": "poly16x4_t vld1_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1q_p16",
      "full name": "poly16x8_t vld1q_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [16]"
    },
    {
      "name": "vld1_f64",
      "full name": "float64x1_t vld1_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1q_f64",
      "full name": "float64x2_t vld1q_f64(float64_t const * ptr)",
      "Intel name": "_mm_load_pd",
      "Intel Asm": "movapd",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入向量寄存器 [64]"
    },
    {
      "name": "vld1_lane_s8",
      "full name": "int8x8_t vld1_lane_s8(int8_t const * ptr, int8x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [8]"
    },
    {
      "name": "vld1q_lane_s8",
      "full name": "int8x16_t vld1q_lane_s8(int8_t const * ptr, int8x16_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [8]"
    },
    {
      "name": "vld1_lane_s16",
      "full name": "int16x4_t vld1_lane_s16(int16_t const * ptr, int16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1q_lane_s16",
      "full name": "int16x8_t vld1q_lane_s16(int16_t const * ptr, int16x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1_lane_s32",
      "full name": "int32x2_t vld1_lane_s32(int32_t const * ptr, int32x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [32]"
    },
    {
      "name": "vld1q_lane_s32",
      "full name": "int32x4_t vld1q_lane_s32(int32_t const * ptr, int32x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [32]"
    },
    {
      "name": "vld1_lane_s64",
      "full name": "int64x1_t vld1_lane_s64(int64_t const * ptr, int64x1_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1q_lane_s64",
      "full name": "int64x2_t vld1q_lane_s64(int64_t const * ptr, int64x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1_lane_u8",
      "full name": "uint8x8_t vld1_lane_u8(uint8_t const * ptr, uint8x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [8]"
    },
    {
      "name": "vld1q_lane_u8",
      "full name": "uint8x16_t vld1q_lane_u8(uint8_t const * ptr, uint8x16_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [8]"
    },
    {
      "name": "vld1_lane_u16",
      "full name": "uint16x4_t vld1_lane_u16(uint16_t const * ptr, uint16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1q_lane_u16",
      "full name": "uint16x8_t vld1q_lane_u16(uint16_t const * ptr, uint16x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1_lane_u32",
      "full name": "uint32x2_t vld1_lane_u32(uint32_t const * ptr, uint32x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [32]"
    },
    {
      "name": "vld1q_lane_u32",
      "full name": "uint32x4_t vld1q_lane_u32(uint32_t const * ptr, uint32x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [32]"
    },
    {
      "name": "vld1_lane_u64",
      "full name": "uint64x1_t vld1_lane_u64(uint64_t const * ptr, uint64x1_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1q_lane_u64",
      "full name": "uint64x2_t vld1q_lane_u64(uint64_t const * ptr, uint64x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1_lane_p64",
      "full name": "poly64x1_t vld1_lane_p64(poly64_t const * ptr, poly64x1_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1q_lane_p64",
      "full name": "poly64x2_t vld1q_lane_p64(poly64_t const * ptr, poly64x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1_lane_f16",
      "full name": "float16x4_t vld1_lane_f16(float16_t const * ptr, float16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1q_lane_f16",
      "full name": "float16x8_t vld1q_lane_f16(float16_t const * ptr, float16x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1_lane_f32",
      "full name": "float32x2_t vld1_lane_f32(float32_t const * ptr, float32x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [32]"
    },
    {
      "name": "vld1q_lane_f32",
      "full name": "float32x4_t vld1q_lane_f32(float32_t const * ptr, float32x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [32]"
    },
    {
      "name": "vld1_lane_p8",
      "full name": "poly8x8_t vld1_lane_p8(poly8_t const * ptr, poly8x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [8]"
    },
    {
      "name": "vld1q_lane_p8",
      "full name": "poly8x16_t vld1q_lane_p8(poly8_t const * ptr, poly8x16_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [8]"
    },
    {
      "name": "vld1_lane_p16",
      "full name": "poly16x4_t vld1_lane_p16(poly16_t const * ptr, poly16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1q_lane_p16",
      "full name": "poly16x8_t vld1q_lane_p16(poly16_t const * ptr, poly16x8_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [16]"
    },
    {
      "name": "vld1_lane_f64",
      "full name": "float64x1_t vld1_lane_f64(float64_t const * ptr, float64x1_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1q_lane_f64",
      "full name": "float64x2_t vld1q_lane_f64(float64_t const * ptr, float64x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将数组中的数据写入指定的向量元素 [64]"
    },
    {
      "name": "vld1_dup_s8",
      "full name": "int8x8_t vld1_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [8]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [8]"
    },
    {
      "name": "vld1q_dup_s8",
      "full name": "int8x16_t vld1q_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [8]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [8]"
    },
    {
      "name": "vld1_dup_s16",
      "full name": "int16x4_t vld1_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1q_dup_s16",
      "full name": "int16x8_t vld1q_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1_dup_s32",
      "full name": "int32x2_t vld1_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [32]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [32]"
    },
    {
      "name": "vld1q_dup_s32",
      "full name": "int32x4_t vld1q_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [32]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [32]"
    },
    {
      "name": "vld1_dup_s64",
      "full name": "int64x1_t vld1_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1q_dup_s64",
      "full name": "int64x2_t vld1q_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1_dup_u8",
      "full name": "uint8x8_t vld1_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [8]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [8]"
    },
    {
      "name": "vld1q_dup_u8",
      "full name": "uint8x16_t vld1q_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [8]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [8]"
    },
    {
      "name": "vld1_dup_u16",
      "full name": "uint16x4_t vld1_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1q_dup_u16",
      "full name": "uint16x8_t vld1q_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1_dup_u32",
      "full name": "uint32x2_t vld1_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [32]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [32]"
    },
    {
      "name": "vld1q_dup_u32",
      "full name": "uint32x4_t vld1q_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [32]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [32]"
    },
    {
      "name": "vld1_dup_u64",
      "full name": "uint64x1_t vld1_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1q_dup_u64",
      "full name": "uint64x2_t vld1q_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1_dup_p64",
      "full name": "poly64x1_t vld1_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1q_dup_p64",
      "full name": "poly64x2_t vld1q_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1_dup_f16",
      "full name": "float16x4_t vld1_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1q_dup_f16",
      "full name": "float16x8_t vld1q_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1_dup_f32",
      "full name": "float32x2_t vld1_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [32]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [32]"
    },
    {
      "name": "vld1q_dup_f32",
      "full name": "float32x4_t vld1q_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [32]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [32]"
    },
    {
      "name": "vld1_dup_p8",
      "full name": "poly8x8_t vld1_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [8]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [8]"
    },
    {
      "name": "vld1q_dup_p8",
      "full name": "poly8x16_t vld1q_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [8]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [8]"
    },
    {
      "name": "vld1_dup_p16",
      "full name": "poly16x4_t vld1_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1q_dup_p16",
      "full name": "poly16x8_t vld1q_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [16]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [16]"
    },
    {
      "name": "vld1_dup_f64",
      "full name": "float64x1_t vld1_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vld1q_dup_f64",
      "full name": "float64x2_t vld1q_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1r",
      "function_en": "[vector] ld1r [64]",
      "function_cn": "[向量] 加载指针中的数据并复制到目标向量寄存器 [64]"
    },
    {
      "name": "vst1_s8",
      "full name": "void vst1_s8(int8_t * ptr, int8x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1q_s8",
      "full name": "void vst1q_s8(int8_t * ptr, int8x16_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1_s16",
      "full name": "void vst1_s16(int16_t * ptr, int16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_s16",
      "full name": "void vst1q_s16(int16_t * ptr, int16x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_s32",
      "full name": "void vst1_s32(int32_t * ptr, int32x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1q_s32",
      "full name": "void vst1q_s32(int32_t * ptr, int32x4_t val)",
      "Intel name": "_mm_store_epi32",
      "Intel Asm": "vmovdqa32",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1_s64",
      "full name": "void vst1_s64(int64_t * ptr, int64x1_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_s64",
      "full name": "void vst1q_s64(int64_t * ptr, int64x2_t val)",
      "Intel name": "_mm_store_epi64",
      "Intel Asm": "vmovdqa64",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_u8",
      "full name": "void vst1_u8(uint8_t * ptr, uint8x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1q_u8",
      "full name": "void vst1q_u8(uint8_t * ptr, uint8x16_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1_u16",
      "full name": "void vst1_u16(uint16_t * ptr, uint16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_u16",
      "full name": "void vst1q_u16(uint16_t * ptr, uint16x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_u32",
      "full name": "void vst1_u32(uint32_t * ptr, uint32x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1q_u32",
      "full name": "void vst1q_u32(uint32_t * ptr, uint32x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1_u64",
      "full name": "void vst1_u64(uint64_t * ptr, uint64x1_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_u64",
      "full name": "void vst1q_u64(uint64_t * ptr, uint64x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_p64",
      "full name": "void vst1_p64(poly64_t * ptr, poly64x1_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_p64",
      "full name": "void vst1q_p64(poly64_t * ptr, poly64x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_f16",
      "full name": "void vst1_f16(float16_t * ptr, float16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_f16",
      "full name": "void vst1q_f16(float16_t * ptr, float16x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_f32",
      "full name": "void vst1_f32(float32_t * ptr, float32x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1q_f32",
      "full name": "void vst1q_f32(float32_t * ptr, float32x4_t val)",
      "Intel name": "_mm_store_ps",
      "Intel Asm": "movaps",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1_p8",
      "full name": "void vst1_p8(poly8_t * ptr, poly8x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1q_p8",
      "full name": "void vst1q_p8(poly8_t * ptr, poly8x16_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1_p16",
      "full name": "void vst1_p16(poly16_t * ptr, poly16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_p16",
      "full name": "void vst1q_p16(poly16_t * ptr, poly16x8_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_f64",
      "full name": "void vst1_f64(float64_t * ptr, float64x1_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_f64",
      "full name": "void vst1q_f64(float64_t * ptr, float64x2_t val)",
      "Intel name": "_mm_store_pd",
      "Intel Asm": "movapd",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的数据写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_lane_s8",
      "full name": "void vst1_lane_s8(int8_t * ptr, int8x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1q_lane_s8",
      "full name": "void vst1q_lane_s8(int8_t * ptr, int8x16_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1_lane_s16",
      "full name": "void vst1_lane_s16(int16_t * ptr, int16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_lane_s16",
      "full name": "void vst1q_lane_s16(int16_t * ptr, int16x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_lane_s32",
      "full name": "void vst1_lane_s32(int32_t * ptr, int32x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1q_lane_s32",
      "full name": "void vst1q_lane_s32(int32_t * ptr, int32x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1_lane_s64",
      "full name": "void vst1_lane_s64(int64_t * ptr, int64x1_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_lane_s64",
      "full name": "void vst1q_lane_s64(int64_t * ptr, int64x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_lane_u8",
      "full name": "void vst1_lane_u8(uint8_t * ptr, uint8x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1q_lane_u8",
      "full name": "void vst1q_lane_u8(uint8_t * ptr, uint8x16_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1_lane_u16",
      "full name": "void vst1_lane_u16(uint16_t * ptr, uint16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_lane_u16",
      "full name": "void vst1q_lane_u16(uint16_t * ptr, uint16x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_lane_u32",
      "full name": "void vst1_lane_u32(uint32_t * ptr, uint32x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1q_lane_u32",
      "full name": "void vst1q_lane_u32(uint32_t * ptr, uint32x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1_lane_u64",
      "full name": "void vst1_lane_u64(uint64_t * ptr, uint64x1_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_lane_u64",
      "full name": "void vst1q_lane_u64(uint64_t * ptr, uint64x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_lane_p64",
      "full name": "void vst1_lane_p64(poly64_t * ptr, poly64x1_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_lane_p64",
      "full name": "void vst1q_lane_p64(poly64_t * ptr, poly64x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1_lane_f16",
      "full name": "void vst1_lane_f16(float16_t * ptr, float16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_lane_f16",
      "full name": "void vst1q_lane_f16(float16_t * ptr, float16x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_lane_f32",
      "full name": "void vst1_lane_f32(float32_t * ptr, float32x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1q_lane_f32",
      "full name": "void vst1q_lane_f32(float32_t * ptr, float32x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [32]"
    },
    {
      "name": "vst1_lane_p8",
      "full name": "void vst1_lane_p8(poly8_t * ptr, poly8x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1q_lane_p8",
      "full name": "void vst1q_lane_p8(poly8_t * ptr, poly8x16_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [8]"
    },
    {
      "name": "vst1_lane_p16",
      "full name": "void vst1_lane_p16(poly16_t * ptr, poly16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1q_lane_p16",
      "full name": "void vst1q_lane_p16(poly16_t * ptr, poly16x8_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [16]"
    },
    {
      "name": "vst1_lane_f64",
      "full name": "void vst1_lane_f64(float64_t * ptr, float64x1_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vst1q_lane_f64",
      "full name": "void vst1q_lane_f64(float64_t * ptr, float64x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量中指定元素的内容写入指针所指向的内存 [64]"
    },
    {
      "name": "vld2_s8",
      "full name": "int8x8x2_t vld2_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [8]"
    },
    {
      "name": "vld2q_s8",
      "full name": "int8x16x2_t vld2q_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [8]"
    },
    {
      "name": "vld2_s16",
      "full name": "int16x4x2_t vld2_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2q_s16",
      "full name": "int16x8x2_t vld2q_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2_s32",
      "full name": "int32x2x2_t vld2_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [32]"
    },
    {
      "name": "vld2q_s32",
      "full name": "int32x4x2_t vld2q_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [32]"
    },
    {
      "name": "vld2_u8",
      "full name": "uint8x8x2_t vld2_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [8]"
    },
    {
      "name": "vld2q_u8",
      "full name": "uint8x16x2_t vld2q_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [8]"
    },
    {
      "name": "vld2_u16",
      "full name": "uint16x4x2_t vld2_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2q_u16",
      "full name": "uint16x8x2_t vld2q_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2_u32",
      "full name": "uint32x2x2_t vld2_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [32]"
    },
    {
      "name": "vld2q_u32",
      "full name": "uint32x4x2_t vld2q_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [32]"
    },
    {
      "name": "vld2_f16",
      "full name": "float16x4x2_t vld2_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2q_f16",
      "full name": "float16x8x2_t vld2q_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2_f32",
      "full name": "float32x2x2_t vld2_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [32]"
    },
    {
      "name": "vld2q_f32",
      "full name": "float32x4x2_t vld2q_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [32]"
    },
    {
      "name": "vld2_p8",
      "full name": "poly8x8x2_t vld2_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [8]"
    },
    {
      "name": "vld2q_p8",
      "full name": "poly8x16x2_t vld2q_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [8]"
    },
    {
      "name": "vld2_p16",
      "full name": "poly16x4x2_t vld2_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2q_p16",
      "full name": "poly16x8x2_t vld2q_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [16]"
    },
    {
      "name": "vld2_s64",
      "full name": "int64x1x2_t vld2_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2_u64",
      "full name": "uint64x1x2_t vld2_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2_p64",
      "full name": "poly64x1x2_t vld2_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2q_s64",
      "full name": "int64x2x2_t vld2q_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2q_u64",
      "full name": "uint64x2x2_t vld2q_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2q_p64",
      "full name": "poly64x2x2_t vld2q_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2_f64",
      "full name": "float64x1x2_t vld2_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld2q_f64",
      "full name": "float64x2x2_t vld2q_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入2个向量寄存器 [64]"
    },
    {
      "name": "vld3_s8",
      "full name": "int8x8x3_t vld3_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [8]"
    },
    {
      "name": "vld3q_s8",
      "full name": "int8x16x3_t vld3q_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [8]"
    },
    {
      "name": "vld3_s16",
      "full name": "int16x4x3_t vld3_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3q_s16",
      "full name": "int16x8x3_t vld3q_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3_s32",
      "full name": "int32x2x3_t vld3_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [32]"
    },
    {
      "name": "vld3q_s32",
      "full name": "int32x4x3_t vld3q_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [32]"
    },
    {
      "name": "vld3_u8",
      "full name": "uint8x8x3_t vld3_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [8]"
    },
    {
      "name": "vld3q_u8",
      "full name": "uint8x16x3_t vld3q_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [8]"
    },
    {
      "name": "vld3_u16",
      "full name": "uint16x4x3_t vld3_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3q_u16",
      "full name": "uint16x8x3_t vld3q_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3_u32",
      "full name": "uint32x2x3_t vld3_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [32]"
    },
    {
      "name": "vld3q_u32",
      "full name": "uint32x4x3_t vld3q_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [32]"
    },
    {
      "name": "vld3_f16",
      "full name": "float16x4x3_t vld3_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3q_f16",
      "full name": "float16x8x3_t vld3q_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3_f32",
      "full name": "float32x2x3_t vld3_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [32]"
    },
    {
      "name": "vld3q_f32",
      "full name": "float32x4x3_t vld3q_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [32]"
    },
    {
      "name": "vld3_p8",
      "full name": "poly8x8x3_t vld3_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [8]"
    },
    {
      "name": "vld3q_p8",
      "full name": "poly8x16x3_t vld3q_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [8]"
    },
    {
      "name": "vld3_p16",
      "full name": "poly16x4x3_t vld3_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3q_p16",
      "full name": "poly16x8x3_t vld3q_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [16]"
    },
    {
      "name": "vld3_s64",
      "full name": "int64x1x3_t vld3_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3_u64",
      "full name": "uint64x1x3_t vld3_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3_p64",
      "full name": "poly64x1x3_t vld3_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3q_s64",
      "full name": "int64x2x3_t vld3q_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3q_u64",
      "full name": "uint64x2x3_t vld3q_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3q_p64",
      "full name": "poly64x2x3_t vld3q_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3_f64",
      "full name": "float64x1x3_t vld3_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld3q_f64",
      "full name": "float64x2x3_t vld3q_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入3个向量寄存器 [64]"
    },
    {
      "name": "vld4_s8",
      "full name": "int8x8x4_t vld4_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [8]"
    },
    {
      "name": "vld4q_s8",
      "full name": "int8x16x4_t vld4q_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [8]"
    },
    {
      "name": "vld4_s16",
      "full name": "int16x4x4_t vld4_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4q_s16",
      "full name": "int16x8x4_t vld4q_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4_s32",
      "full name": "int32x2x4_t vld4_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [32]"
    },
    {
      "name": "vld4q_s32",
      "full name": "int32x4x4_t vld4q_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [32]"
    },
    {
      "name": "vld4_u8",
      "full name": "uint8x8x4_t vld4_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [8]"
    },
    {
      "name": "vld4q_u8",
      "full name": "uint8x16x4_t vld4q_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [8]"
    },
    {
      "name": "vld4_u16",
      "full name": "uint16x4x4_t vld4_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4q_u16",
      "full name": "uint16x8x4_t vld4q_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4_u32",
      "full name": "uint32x2x4_t vld4_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [32]"
    },
    {
      "name": "vld4q_u32",
      "full name": "uint32x4x4_t vld4q_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [32]"
    },
    {
      "name": "vld4_f16",
      "full name": "float16x4x4_t vld4_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4q_f16",
      "full name": "float16x8x4_t vld4q_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4_f32",
      "full name": "float32x2x4_t vld4_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [32]"
    },
    {
      "name": "vld4q_f32",
      "full name": "float32x4x4_t vld4q_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [32]"
    },
    {
      "name": "vld4_p8",
      "full name": "poly8x8x4_t vld4_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [8]"
    },
    {
      "name": "vld4q_p8",
      "full name": "poly8x16x4_t vld4q_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [8]"
    },
    {
      "name": "vld4_p16",
      "full name": "poly16x4x4_t vld4_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4q_p16",
      "full name": "poly16x8x4_t vld4q_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [16]"
    },
    {
      "name": "vld4_s64",
      "full name": "int64x1x4_t vld4_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4_u64",
      "full name": "uint64x1x4_t vld4_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4_p64",
      "full name": "poly64x1x4_t vld4_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4q_s64",
      "full name": "int64x2x4_t vld4q_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4q_u64",
      "full name": "uint64x2x4_t vld4q_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4q_p64",
      "full name": "poly64x2x4_t vld4q_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4_f64",
      "full name": "float64x1x4_t vld4_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld4q_f64",
      "full name": "float64x2x4_t vld4q_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针所指向的内存中的内容写入4个向量寄存器 [64]"
    },
    {
      "name": "vld2_dup_s8",
      "full name": "int8x8x2_t vld2_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [8]"
    },
    {
      "name": "vld2q_dup_s8",
      "full name": "int8x16x2_t vld2q_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [8]"
    },
    {
      "name": "vld2_dup_s16",
      "full name": "int16x4x2_t vld2_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2q_dup_s16",
      "full name": "int16x8x2_t vld2q_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2_dup_s32",
      "full name": "int32x2x2_t vld2_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [32]"
    },
    {
      "name": "vld2q_dup_s32",
      "full name": "int32x4x2_t vld2q_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [32]"
    },
    {
      "name": "vld2_dup_u8",
      "full name": "uint8x8x2_t vld2_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [8]"
    },
    {
      "name": "vld2q_dup_u8",
      "full name": "uint8x16x2_t vld2q_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [8]"
    },
    {
      "name": "vld2_dup_u16",
      "full name": "uint16x4x2_t vld2_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2q_dup_u16",
      "full name": "uint16x8x2_t vld2q_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2_dup_u32",
      "full name": "uint32x2x2_t vld2_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [32]"
    },
    {
      "name": "vld2q_dup_u32",
      "full name": "uint32x4x2_t vld2q_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [32]"
    },
    {
      "name": "vld2_dup_f16",
      "full name": "float16x4x2_t vld2_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2q_dup_f16",
      "full name": "float16x8x2_t vld2q_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2_dup_f32",
      "full name": "float32x2x2_t vld2_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [32]"
    },
    {
      "name": "vld2q_dup_f32",
      "full name": "float32x4x2_t vld2q_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [32]"
    },
    {
      "name": "vld2_dup_p8",
      "full name": "poly8x8x2_t vld2_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [8]"
    },
    {
      "name": "vld2q_dup_p8",
      "full name": "poly8x16x2_t vld2q_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [8]"
    },
    {
      "name": "vld2_dup_p16",
      "full name": "poly16x4x2_t vld2_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2q_dup_p16",
      "full name": "poly16x8x2_t vld2q_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [16]"
    },
    {
      "name": "vld2_dup_s64",
      "full name": "int64x1x2_t vld2_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2_dup_u64",
      "full name": "uint64x1x2_t vld2_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2_dup_p64",
      "full name": "poly64x1x2_t vld2_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2q_dup_s64",
      "full name": "int64x2x2_t vld2q_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2q_dup_u64",
      "full name": "uint64x2x2_t vld2q_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2q_dup_p64",
      "full name": "poly64x2x2_t vld2q_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2_dup_f64",
      "full name": "float64x1x2_t vld2_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld2q_dup_f64",
      "full name": "float64x2x2_t vld2q_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2r",
      "function_en": "[vector] ld2r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到2个向量中的每个元素 [64]"
    },
    {
      "name": "vld3_dup_s8",
      "full name": "int8x8x3_t vld3_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [8]"
    },
    {
      "name": "vld3q_dup_s8",
      "full name": "int8x16x3_t vld3q_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [8]"
    },
    {
      "name": "vld3_dup_s16",
      "full name": "int16x4x3_t vld3_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3q_dup_s16",
      "full name": "int16x8x3_t vld3q_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3_dup_s32",
      "full name": "int32x2x3_t vld3_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [32]"
    },
    {
      "name": "vld3q_dup_s32",
      "full name": "int32x4x3_t vld3q_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [32]"
    },
    {
      "name": "vld3_dup_u8",
      "full name": "uint8x8x3_t vld3_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [8]"
    },
    {
      "name": "vld3q_dup_u8",
      "full name": "uint8x16x3_t vld3q_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [8]"
    },
    {
      "name": "vld3_dup_u16",
      "full name": "uint16x4x3_t vld3_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3q_dup_u16",
      "full name": "uint16x8x3_t vld3q_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3_dup_u32",
      "full name": "uint32x2x3_t vld3_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [32]"
    },
    {
      "name": "vld3q_dup_u32",
      "full name": "uint32x4x3_t vld3q_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [32]"
    },
    {
      "name": "vld3_dup_f16",
      "full name": "float16x4x3_t vld3_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3q_dup_f16",
      "full name": "float16x8x3_t vld3q_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3_dup_f32",
      "full name": "float32x2x3_t vld3_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [32]"
    },
    {
      "name": "vld3q_dup_f32",
      "full name": "float32x4x3_t vld3q_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [32]"
    },
    {
      "name": "vld3_dup_p8",
      "full name": "poly8x8x3_t vld3_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [8]"
    },
    {
      "name": "vld3q_dup_p8",
      "full name": "poly8x16x3_t vld3q_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [8]"
    },
    {
      "name": "vld3_dup_p16",
      "full name": "poly16x4x3_t vld3_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3q_dup_p16",
      "full name": "poly16x8x3_t vld3q_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [16]"
    },
    {
      "name": "vld3_dup_s64",
      "full name": "int64x1x3_t vld3_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3_dup_u64",
      "full name": "uint64x1x3_t vld3_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3_dup_p64",
      "full name": "poly64x1x3_t vld3_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3q_dup_s64",
      "full name": "int64x2x3_t vld3q_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3q_dup_u64",
      "full name": "uint64x2x3_t vld3q_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3q_dup_p64",
      "full name": "poly64x2x3_t vld3q_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3_dup_f64",
      "full name": "float64x1x3_t vld3_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld3q_dup_f64",
      "full name": "float64x2x3_t vld3q_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3r",
      "function_en": "[vector] ld3r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到3个向量中的每个元素 [64]"
    },
    {
      "name": "vld4_dup_s8",
      "full name": "int8x8x4_t vld4_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [8]"
    },
    {
      "name": "vld4q_dup_s8",
      "full name": "int8x16x4_t vld4q_dup_s8(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [8]"
    },
    {
      "name": "vld4_dup_s16",
      "full name": "int16x4x4_t vld4_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4q_dup_s16",
      "full name": "int16x8x4_t vld4q_dup_s16(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4_dup_s32",
      "full name": "int32x2x4_t vld4_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [32]"
    },
    {
      "name": "vld4q_dup_s32",
      "full name": "int32x4x4_t vld4q_dup_s32(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [32]"
    },
    {
      "name": "vld4_dup_u8",
      "full name": "uint8x8x4_t vld4_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [8]"
    },
    {
      "name": "vld4q_dup_u8",
      "full name": "uint8x16x4_t vld4q_dup_u8(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [8]"
    },
    {
      "name": "vld4_dup_u16",
      "full name": "uint16x4x4_t vld4_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4q_dup_u16",
      "full name": "uint16x8x4_t vld4q_dup_u16(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4_dup_u32",
      "full name": "uint32x2x4_t vld4_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [32]"
    },
    {
      "name": "vld4q_dup_u32",
      "full name": "uint32x4x4_t vld4q_dup_u32(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [32]"
    },
    {
      "name": "vld4_dup_f16",
      "full name": "float16x4x4_t vld4_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4q_dup_f16",
      "full name": "float16x8x4_t vld4q_dup_f16(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4_dup_f32",
      "full name": "float32x2x4_t vld4_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [32]"
    },
    {
      "name": "vld4q_dup_f32",
      "full name": "float32x4x4_t vld4q_dup_f32(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [32]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [32]"
    },
    {
      "name": "vld4_dup_p8",
      "full name": "poly8x8x4_t vld4_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [8]"
    },
    {
      "name": "vld4q_dup_p8",
      "full name": "poly8x16x4_t vld4q_dup_p8(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [8]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [8]"
    },
    {
      "name": "vld4_dup_p16",
      "full name": "poly16x4x4_t vld4_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4q_dup_p16",
      "full name": "poly16x8x4_t vld4q_dup_p16(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [16]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [16]"
    },
    {
      "name": "vld4_dup_s64",
      "full name": "int64x1x4_t vld4_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4_dup_u64",
      "full name": "uint64x1x4_t vld4_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4_dup_p64",
      "full name": "poly64x1x4_t vld4_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4q_dup_s64",
      "full name": "int64x2x4_t vld4q_dup_s64(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4q_dup_u64",
      "full name": "uint64x2x4_t vld4q_dup_u64(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4q_dup_p64",
      "full name": "poly64x2x4_t vld4q_dup_p64(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4_dup_f64",
      "full name": "float64x1x4_t vld4_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vld4q_dup_f64",
      "full name": "float64x2x4_t vld4q_dup_f64(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4r",
      "function_en": "[vector] ld4r [64]",
      "function_cn": "[向量] 将指针指向的内容复制到4个向量中的每个元素 [64]"
    },
    {
      "name": "vst2_s8",
      "full name": "void vst2_s8(int8_t * ptr, int8x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst2q_s8",
      "full name": "void vst2q_s8(int8_t * ptr, int8x16x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst2_s16",
      "full name": "void vst2_s16(int16_t * ptr, int16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2q_s16",
      "full name": "void vst2q_s16(int16_t * ptr, int16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2_s32",
      "full name": "void vst2_s32(int32_t * ptr, int32x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst2q_s32",
      "full name": "void vst2q_s32(int32_t * ptr, int32x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst2_u8",
      "full name": "void vst2_u8(uint8_t * ptr, uint8x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst2q_u8",
      "full name": "void vst2q_u8(uint8_t * ptr, uint8x16x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst2_u16",
      "full name": "void vst2_u16(uint16_t * ptr, uint16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2q_u16",
      "full name": "void vst2q_u16(uint16_t * ptr, uint16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2_u32",
      "full name": "void vst2_u32(uint32_t * ptr, uint32x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst2q_u32",
      "full name": "void vst2q_u32(uint32_t * ptr, uint32x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst2_f16",
      "full name": "void vst2_f16(float16_t * ptr, float16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2q_f16",
      "full name": "void vst2q_f16(float16_t * ptr, float16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2_f32",
      "full name": "void vst2_f32(float32_t * ptr, float32x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst2q_f32",
      "full name": "void vst2q_f32(float32_t * ptr, float32x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst2_p8",
      "full name": "void vst2_p8(poly8_t * ptr, poly8x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst2q_p8",
      "full name": "void vst2q_p8(poly8_t * ptr, poly8x16x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst2_p16",
      "full name": "void vst2_p16(poly16_t * ptr, poly16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2q_p16",
      "full name": "void vst2q_p16(poly16_t * ptr, poly16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst2_s64",
      "full name": "void vst2_s64(int64_t * ptr, int64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2_u64",
      "full name": "void vst2_u64(uint64_t * ptr, uint64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2_p64",
      "full name": "void vst2_p64(poly64_t * ptr, poly64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2q_s64",
      "full name": "void vst2q_s64(int64_t * ptr, int64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2q_u64",
      "full name": "void vst2q_u64(uint64_t * ptr, uint64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2q_p64",
      "full name": "void vst2q_p64(poly64_t * ptr, poly64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2_f64",
      "full name": "void vst2_f64(float64_t * ptr, float64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst2q_f64",
      "full name": "void vst2q_f64(float64_t * ptr, float64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3_s8",
      "full name": "void vst3_s8(int8_t * ptr, int8x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst3q_s8",
      "full name": "void vst3q_s8(int8_t * ptr, int8x16x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst3_s16",
      "full name": "void vst3_s16(int16_t * ptr, int16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3q_s16",
      "full name": "void vst3q_s16(int16_t * ptr, int16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3_s32",
      "full name": "void vst3_s32(int32_t * ptr, int32x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst3q_s32",
      "full name": "void vst3q_s32(int32_t * ptr, int32x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst3_u8",
      "full name": "void vst3_u8(uint8_t * ptr, uint8x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst3q_u8",
      "full name": "void vst3q_u8(uint8_t * ptr, uint8x16x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst3_u16",
      "full name": "void vst3_u16(uint16_t * ptr, uint16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3q_u16",
      "full name": "void vst3q_u16(uint16_t * ptr, uint16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3_u32",
      "full name": "void vst3_u32(uint32_t * ptr, uint32x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst3q_u32",
      "full name": "void vst3q_u32(uint32_t * ptr, uint32x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst3_f16",
      "full name": "void vst3_f16(float16_t * ptr, float16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3q_f16",
      "full name": "void vst3q_f16(float16_t * ptr, float16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3_f32",
      "full name": "void vst3_f32(float32_t * ptr, float32x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst3q_f32",
      "full name": "void vst3q_f32(float32_t * ptr, float32x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst3_p8",
      "full name": "void vst3_p8(poly8_t * ptr, poly8x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst3q_p8",
      "full name": "void vst3q_p8(poly8_t * ptr, poly8x16x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst3_p16",
      "full name": "void vst3_p16(poly16_t * ptr, poly16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3q_p16",
      "full name": "void vst3q_p16(poly16_t * ptr, poly16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst3_s64",
      "full name": "void vst3_s64(int64_t * ptr, int64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3_u64",
      "full name": "void vst3_u64(uint64_t * ptr, uint64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3_p64",
      "full name": "void vst3_p64(poly64_t * ptr, poly64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3q_s64",
      "full name": "void vst3q_s64(int64_t * ptr, int64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3q_u64",
      "full name": "void vst3q_u64(uint64_t * ptr, uint64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3q_p64",
      "full name": "void vst3q_p64(poly64_t * ptr, poly64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3_f64",
      "full name": "void vst3_f64(float64_t * ptr, float64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst3q_f64",
      "full name": "void vst3q_f64(float64_t * ptr, float64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4_s8",
      "full name": "void vst4_s8(int8_t * ptr, int8x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst4q_s8",
      "full name": "void vst4q_s8(int8_t * ptr, int8x16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst4_s16",
      "full name": "void vst4_s16(int16_t * ptr, int16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4q_s16",
      "full name": "void vst4q_s16(int16_t * ptr, int16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4_s32",
      "full name": "void vst4_s32(int32_t * ptr, int32x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst4q_s32",
      "full name": "void vst4q_s32(int32_t * ptr, int32x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst4_u8",
      "full name": "void vst4_u8(uint8_t * ptr, uint8x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst4q_u8",
      "full name": "void vst4q_u8(uint8_t * ptr, uint8x16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst4_u16",
      "full name": "void vst4_u16(uint16_t * ptr, uint16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4q_u16",
      "full name": "void vst4q_u16(uint16_t * ptr, uint16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4_u32",
      "full name": "void vst4_u32(uint32_t * ptr, uint32x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst4q_u32",
      "full name": "void vst4q_u32(uint32_t * ptr, uint32x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst4_f16",
      "full name": "void vst4_f16(float16_t * ptr, float16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4q_f16",
      "full name": "void vst4q_f16(float16_t * ptr, float16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4_f32",
      "full name": "void vst4_f32(float32_t * ptr, float32x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst4q_f32",
      "full name": "void vst4q_f32(float32_t * ptr, float32x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [32]"
    },
    {
      "name": "vst4_p8",
      "full name": "void vst4_p8(poly8_t * ptr, poly8x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst4q_p8",
      "full name": "void vst4q_p8(poly8_t * ptr, poly8x16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [8]"
    },
    {
      "name": "vst4_p16",
      "full name": "void vst4_p16(poly16_t * ptr, poly16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4q_p16",
      "full name": "void vst4q_p16(poly16_t * ptr, poly16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [16]"
    },
    {
      "name": "vst4_s64",
      "full name": "void vst4_s64(int64_t * ptr, int64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4_u64",
      "full name": "void vst4_u64(uint64_t * ptr, uint64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4_p64",
      "full name": "void vst4_p64(poly64_t * ptr, poly64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4q_s64",
      "full name": "void vst4q_s64(int64_t * ptr, int64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4q_u64",
      "full name": "void vst4q_u64(uint64_t * ptr, uint64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4q_p64",
      "full name": "void vst4q_p64(poly64_t * ptr, poly64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4_f64",
      "full name": "void vst4_f64(float64_t * ptr, float64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vst4q_f64",
      "full name": "void vst4q_f64(float64_t * ptr, float64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中的内容写入指针指向的内存 [64]"
    },
    {
      "name": "vld2_lane_s16",
      "full name": "int16x4x2_t vld2_lane_s16(int16_t const * ptr, int16x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2q_lane_s16",
      "full name": "int16x8x2_t vld2q_lane_s16(int16_t const * ptr, int16x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2_lane_s32",
      "full name": "int32x2x2_t vld2_lane_s32(int32_t const * ptr, int32x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [32]"
    },
    {
      "name": "vld2q_lane_s32",
      "full name": "int32x4x2_t vld2q_lane_s32(int32_t const * ptr, int32x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [32]"
    },
    {
      "name": "vld2_lane_u16",
      "full name": "uint16x4x2_t vld2_lane_u16(uint16_t const * ptr, uint16x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2q_lane_u16",
      "full name": "uint16x8x2_t vld2q_lane_u16(uint16_t const * ptr, uint16x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2_lane_u32",
      "full name": "uint32x2x2_t vld2_lane_u32(uint32_t const * ptr, uint32x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [32]"
    },
    {
      "name": "vld2q_lane_u32",
      "full name": "uint32x4x2_t vld2q_lane_u32(uint32_t const * ptr, uint32x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [32]"
    },
    {
      "name": "vld2_lane_f16",
      "full name": "float16x4x2_t vld2_lane_f16(float16_t const * ptr, float16x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2q_lane_f16",
      "full name": "float16x8x2_t vld2q_lane_f16(float16_t const * ptr, float16x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2_lane_f32",
      "full name": "float32x2x2_t vld2_lane_f32(float32_t const * ptr, float32x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [32]"
    },
    {
      "name": "vld2q_lane_f32",
      "full name": "float32x4x2_t vld2q_lane_f32(float32_t const * ptr, float32x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [32]"
    },
    {
      "name": "vld2_lane_p16",
      "full name": "poly16x4x2_t vld2_lane_p16(poly16_t const * ptr, poly16x4x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2q_lane_p16",
      "full name": "poly16x8x2_t vld2q_lane_p16(poly16_t const * ptr, poly16x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [16]"
    },
    {
      "name": "vld2_lane_s8",
      "full name": "int8x8x2_t vld2_lane_s8(int8_t const * ptr, int8x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [8]"
    },
    {
      "name": "vld2_lane_u8",
      "full name": "uint8x8x2_t vld2_lane_u8(uint8_t const * ptr, uint8x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [8]"
    },
    {
      "name": "vld2_lane_p8",
      "full name": "poly8x8x2_t vld2_lane_p8(poly8_t const * ptr, poly8x8x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [8]"
    },
    {
      "name": "vld2q_lane_s8",
      "full name": "int8x16x2_t vld2q_lane_s8(int8_t const * ptr, int8x16x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [8]"
    },
    {
      "name": "vld2q_lane_u8",
      "full name": "uint8x16x2_t vld2q_lane_u8(uint8_t const * ptr, uint8x16x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [8]"
    },
    {
      "name": "vld2q_lane_p8",
      "full name": "poly8x16x2_t vld2q_lane_p8(poly8_t const * ptr, poly8x16x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [8]"
    },
    {
      "name": "vld2_lane_s64",
      "full name": "int64x1x2_t vld2_lane_s64(int64_t const * ptr, int64x1x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2q_lane_s64",
      "full name": "int64x2x2_t vld2q_lane_s64(int64_t const * ptr, int64x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2_lane_u64",
      "full name": "uint64x1x2_t vld2_lane_u64(uint64_t const * ptr, uint64x1x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2q_lane_u64",
      "full name": "uint64x2x2_t vld2q_lane_u64(uint64_t const * ptr, uint64x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2_lane_p64",
      "full name": "poly64x1x2_t vld2_lane_p64(poly64_t const * ptr, poly64x1x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2q_lane_p64",
      "full name": "poly64x2x2_t vld2q_lane_p64(poly64_t const * ptr, poly64x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2_lane_f64",
      "full name": "float64x1x2_t vld2_lane_f64(float64_t const * ptr, float64x1x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld2q_lane_f64",
      "full name": "float64x2x2_t vld2q_lane_f64(float64_t const * ptr, float64x2x2_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld2",
      "function_en": "[vector] ld2 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入2个向量中指定的元素 [64]"
    },
    {
      "name": "vld3_lane_s16",
      "full name": "int16x4x3_t vld3_lane_s16(int16_t const * ptr, int16x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3q_lane_s16",
      "full name": "int16x8x3_t vld3q_lane_s16(int16_t const * ptr, int16x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3_lane_s32",
      "full name": "int32x2x3_t vld3_lane_s32(int32_t const * ptr, int32x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [32]"
    },
    {
      "name": "vld3q_lane_s32",
      "full name": "int32x4x3_t vld3q_lane_s32(int32_t const * ptr, int32x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [32]"
    },
    {
      "name": "vld3_lane_u16",
      "full name": "uint16x4x3_t vld3_lane_u16(uint16_t const * ptr, uint16x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3q_lane_u16",
      "full name": "uint16x8x3_t vld3q_lane_u16(uint16_t const * ptr, uint16x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3_lane_u32",
      "full name": "uint32x2x3_t vld3_lane_u32(uint32_t const * ptr, uint32x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [32]"
    },
    {
      "name": "vld3q_lane_u32",
      "full name": "uint32x4x3_t vld3q_lane_u32(uint32_t const * ptr, uint32x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [32]"
    },
    {
      "name": "vld3_lane_f16",
      "full name": "float16x4x3_t vld3_lane_f16(float16_t const * ptr, float16x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3q_lane_f16",
      "full name": "float16x8x3_t vld3q_lane_f16(float16_t const * ptr, float16x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3_lane_f32",
      "full name": "float32x2x3_t vld3_lane_f32(float32_t const * ptr, float32x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [32]"
    },
    {
      "name": "vld3q_lane_f32",
      "full name": "float32x4x3_t vld3q_lane_f32(float32_t const * ptr, float32x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [32]"
    },
    {
      "name": "vld3_lane_p16",
      "full name": "poly16x4x3_t vld3_lane_p16(poly16_t const * ptr, poly16x4x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3q_lane_p16",
      "full name": "poly16x8x3_t vld3q_lane_p16(poly16_t const * ptr, poly16x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [16]"
    },
    {
      "name": "vld3_lane_s8",
      "full name": "int8x8x3_t vld3_lane_s8(int8_t const * ptr, int8x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [8]"
    },
    {
      "name": "vld3_lane_u8",
      "full name": "uint8x8x3_t vld3_lane_u8(uint8_t const * ptr, uint8x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [8]"
    },
    {
      "name": "vld3_lane_p8",
      "full name": "poly8x8x3_t vld3_lane_p8(poly8_t const * ptr, poly8x8x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [8]"
    },
    {
      "name": "vld3q_lane_s8",
      "full name": "int8x16x3_t vld3q_lane_s8(int8_t const * ptr, int8x16x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [8]"
    },
    {
      "name": "vld3q_lane_u8",
      "full name": "uint8x16x3_t vld3q_lane_u8(uint8_t const * ptr, uint8x16x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [8]"
    },
    {
      "name": "vld3q_lane_p8",
      "full name": "poly8x16x3_t vld3q_lane_p8(poly8_t const * ptr, poly8x16x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [8]"
    },
    {
      "name": "vld3_lane_s64",
      "full name": "int64x1x3_t vld3_lane_s64(int64_t const * ptr, int64x1x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3q_lane_s64",
      "full name": "int64x2x3_t vld3q_lane_s64(int64_t const * ptr, int64x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3_lane_u64",
      "full name": "uint64x1x3_t vld3_lane_u64(uint64_t const * ptr, uint64x1x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3q_lane_u64",
      "full name": "uint64x2x3_t vld3q_lane_u64(uint64_t const * ptr, uint64x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3_lane_p64",
      "full name": "poly64x1x3_t vld3_lane_p64(poly64_t const * ptr, poly64x1x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3q_lane_p64",
      "full name": "poly64x2x3_t vld3q_lane_p64(poly64_t const * ptr, poly64x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3_lane_f64",
      "full name": "float64x1x3_t vld3_lane_f64(float64_t const * ptr, float64x1x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld3q_lane_f64",
      "full name": "float64x2x3_t vld3q_lane_f64(float64_t const * ptr, float64x2x3_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld3",
      "function_en": "[vector] ld3 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入3个向量中指定的元素 [64]"
    },
    {
      "name": "vld4_lane_s16",
      "full name": "int16x4x4_t vld4_lane_s16(int16_t const * ptr, int16x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4q_lane_s16",
      "full name": "int16x8x4_t vld4q_lane_s16(int16_t const * ptr, int16x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4_lane_s32",
      "full name": "int32x2x4_t vld4_lane_s32(int32_t const * ptr, int32x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [32]"
    },
    {
      "name": "vld4q_lane_s32",
      "full name": "int32x4x4_t vld4q_lane_s32(int32_t const * ptr, int32x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [32]"
    },
    {
      "name": "vld4_lane_u16",
      "full name": "uint16x4x4_t vld4_lane_u16(uint16_t const * ptr, uint16x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4q_lane_u16",
      "full name": "uint16x8x4_t vld4q_lane_u16(uint16_t const * ptr, uint16x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4_lane_u32",
      "full name": "uint32x2x4_t vld4_lane_u32(uint32_t const * ptr, uint32x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [32]"
    },
    {
      "name": "vld4q_lane_u32",
      "full name": "uint32x4x4_t vld4q_lane_u32(uint32_t const * ptr, uint32x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [32]"
    },
    {
      "name": "vld4_lane_f16",
      "full name": "float16x4x4_t vld4_lane_f16(float16_t const * ptr, float16x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4q_lane_f16",
      "full name": "float16x8x4_t vld4q_lane_f16(float16_t const * ptr, float16x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4_lane_f32",
      "full name": "float32x2x4_t vld4_lane_f32(float32_t const * ptr, float32x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [32]"
    },
    {
      "name": "vld4q_lane_f32",
      "full name": "float32x4x4_t vld4q_lane_f32(float32_t const * ptr, float32x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [32]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [32]"
    },
    {
      "name": "vld4_lane_p16",
      "full name": "poly16x4x4_t vld4_lane_p16(poly16_t const * ptr, poly16x4x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4q_lane_p16",
      "full name": "poly16x8x4_t vld4q_lane_p16(poly16_t const * ptr, poly16x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [16]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [16]"
    },
    {
      "name": "vld4_lane_s8",
      "full name": "int8x8x4_t vld4_lane_s8(int8_t const * ptr, int8x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [8]"
    },
    {
      "name": "vld4_lane_u8",
      "full name": "uint8x8x4_t vld4_lane_u8(uint8_t const * ptr, uint8x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [8]"
    },
    {
      "name": "vld4_lane_p8",
      "full name": "poly8x8x4_t vld4_lane_p8(poly8_t const * ptr, poly8x8x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [8]"
    },
    {
      "name": "vld4q_lane_s8",
      "full name": "int8x16x4_t vld4q_lane_s8(int8_t const * ptr, int8x16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [8]"
    },
    {
      "name": "vld4q_lane_u8",
      "full name": "uint8x16x4_t vld4q_lane_u8(uint8_t const * ptr, uint8x16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [8]"
    },
    {
      "name": "vld4q_lane_p8",
      "full name": "poly8x16x4_t vld4q_lane_p8(poly8_t const * ptr, poly8x16x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [8]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [8]"
    },
    {
      "name": "vld4_lane_s64",
      "full name": "int64x1x4_t vld4_lane_s64(int64_t const * ptr, int64x1x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4q_lane_s64",
      "full name": "int64x2x4_t vld4q_lane_s64(int64_t const * ptr, int64x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4_lane_u64",
      "full name": "uint64x1x4_t vld4_lane_u64(uint64_t const * ptr, uint64x1x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4q_lane_u64",
      "full name": "uint64x2x4_t vld4q_lane_u64(uint64_t const * ptr, uint64x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4_lane_p64",
      "full name": "poly64x1x4_t vld4_lane_p64(poly64_t const * ptr, poly64x1x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4q_lane_p64",
      "full name": "poly64x2x4_t vld4q_lane_p64(poly64_t const * ptr, poly64x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4_lane_f64",
      "full name": "float64x1x4_t vld4_lane_f64(float64_t const * ptr, float64x1x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vld4q_lane_f64",
      "full name": "float64x2x4_t vld4q_lane_f64(float64_t const * ptr, float64x2x4_t src, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld4",
      "function_en": "[vector] ld4 [64]",
      "function_cn": "[向量] 将指针指向的内存中的数据写入4个向量中指定的元素 [64]"
    },
    {
      "name": "vst2_lane_s8",
      "full name": "void vst2_lane_s8(int8_t * ptr, int8x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst2_lane_u8",
      "full name": "void vst2_lane_u8(uint8_t * ptr, uint8x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst2_lane_p8",
      "full name": "void vst2_lane_p8(poly8_t * ptr, poly8x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst3_lane_s8",
      "full name": "void vst3_lane_s8(int8_t * ptr, int8x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst3_lane_u8",
      "full name": "void vst3_lane_u8(uint8_t * ptr, uint8x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst3_lane_p8",
      "full name": "void vst3_lane_p8(poly8_t * ptr, poly8x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst4_lane_s8",
      "full name": "void vst4_lane_s8(int8_t * ptr, int8x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst4_lane_u8",
      "full name": "void vst4_lane_u8(uint8_t * ptr, uint8x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst4_lane_p8",
      "full name": "void vst4_lane_p8(poly8_t * ptr, poly8x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst2_lane_s16",
      "full name": "void vst2_lane_s16(int16_t * ptr, int16x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2q_lane_s16",
      "full name": "void vst2q_lane_s16(int16_t * ptr, int16x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2_lane_s32",
      "full name": "void vst2_lane_s32(int32_t * ptr, int32x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst2q_lane_s32",
      "full name": "void vst2q_lane_s32(int32_t * ptr, int32x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst2_lane_u16",
      "full name": "void vst2_lane_u16(uint16_t * ptr, uint16x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2q_lane_u16",
      "full name": "void vst2q_lane_u16(uint16_t * ptr, uint16x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2_lane_u32",
      "full name": "void vst2_lane_u32(uint32_t * ptr, uint32x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst2q_lane_u32",
      "full name": "void vst2q_lane_u32(uint32_t * ptr, uint32x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst2_lane_f16",
      "full name": "void vst2_lane_f16(float16_t * ptr, float16x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2q_lane_f16",
      "full name": "void vst2q_lane_f16(float16_t * ptr, float16x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2_lane_f32",
      "full name": "void vst2_lane_f32(float32_t * ptr, float32x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst2q_lane_f32",
      "full name": "void vst2q_lane_f32(float32_t * ptr, float32x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [32]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst2_lane_p16",
      "full name": "void vst2_lane_p16(poly16_t * ptr, poly16x4x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2q_lane_p16",
      "full name": "void vst2q_lane_p16(poly16_t * ptr, poly16x8x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [16]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst2q_lane_s8",
      "full name": "void vst2q_lane_s8(int8_t * ptr, int8x16x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst2q_lane_u8",
      "full name": "void vst2q_lane_u8(uint8_t * ptr, uint8x16x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst2q_lane_p8",
      "full name": "void vst2q_lane_p8(poly8_t * ptr, poly8x16x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [8]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst2_lane_s64",
      "full name": "void vst2_lane_s64(int64_t * ptr, int64x1x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2q_lane_s64",
      "full name": "void vst2q_lane_s64(int64_t * ptr, int64x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2_lane_u64",
      "full name": "void vst2_lane_u64(uint64_t * ptr, uint64x1x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2q_lane_u64",
      "full name": "void vst2q_lane_u64(uint64_t * ptr, uint64x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2_lane_p64",
      "full name": "void vst2_lane_p64(poly64_t * ptr, poly64x1x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2q_lane_p64",
      "full name": "void vst2q_lane_p64(poly64_t * ptr, poly64x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2_lane_f64",
      "full name": "void vst2_lane_f64(float64_t * ptr, float64x1x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst2q_lane_f64",
      "full name": "void vst2q_lane_f64(float64_t * ptr, float64x2x2_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st2",
      "function_en": "[vector] st2 [64]",
      "function_cn": "[向量] 将2个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3_lane_s16",
      "full name": "void vst3_lane_s16(int16_t * ptr, int16x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3q_lane_s16",
      "full name": "void vst3q_lane_s16(int16_t * ptr, int16x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3_lane_s32",
      "full name": "void vst3_lane_s32(int32_t * ptr, int32x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst3q_lane_s32",
      "full name": "void vst3q_lane_s32(int32_t * ptr, int32x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst3_lane_u16",
      "full name": "void vst3_lane_u16(uint16_t * ptr, uint16x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3q_lane_u16",
      "full name": "void vst3q_lane_u16(uint16_t * ptr, uint16x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3_lane_u32",
      "full name": "void vst3_lane_u32(uint32_t * ptr, uint32x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst3q_lane_u32",
      "full name": "void vst3q_lane_u32(uint32_t * ptr, uint32x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst3_lane_f16",
      "full name": "void vst3_lane_f16(float16_t * ptr, float16x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3q_lane_f16",
      "full name": "void vst3q_lane_f16(float16_t * ptr, float16x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3_lane_f32",
      "full name": "void vst3_lane_f32(float32_t * ptr, float32x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst3q_lane_f32",
      "full name": "void vst3q_lane_f32(float32_t * ptr, float32x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [32]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst3_lane_p16",
      "full name": "void vst3_lane_p16(poly16_t * ptr, poly16x4x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3q_lane_p16",
      "full name": "void vst3q_lane_p16(poly16_t * ptr, poly16x8x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [16]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst3q_lane_s8",
      "full name": "void vst3q_lane_s8(int8_t * ptr, int8x16x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst3q_lane_u8",
      "full name": "void vst3q_lane_u8(uint8_t * ptr, uint8x16x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst3q_lane_p8",
      "full name": "void vst3q_lane_p8(poly8_t * ptr, poly8x16x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [8]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst3_lane_s64",
      "full name": "void vst3_lane_s64(int64_t * ptr, int64x1x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3q_lane_s64",
      "full name": "void vst3q_lane_s64(int64_t * ptr, int64x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3_lane_u64",
      "full name": "void vst3_lane_u64(uint64_t * ptr, uint64x1x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3q_lane_u64",
      "full name": "void vst3q_lane_u64(uint64_t * ptr, uint64x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3_lane_p64",
      "full name": "void vst3_lane_p64(poly64_t * ptr, poly64x1x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3q_lane_p64",
      "full name": "void vst3q_lane_p64(poly64_t * ptr, poly64x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3_lane_f64",
      "full name": "void vst3_lane_f64(float64_t * ptr, float64x1x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst3q_lane_f64",
      "full name": "void vst3q_lane_f64(float64_t * ptr, float64x2x3_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st3",
      "function_en": "[vector] st3 [64]",
      "function_cn": "[向量] 将3个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4_lane_s16",
      "full name": "void vst4_lane_s16(int16_t * ptr, int16x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4q_lane_s16",
      "full name": "void vst4q_lane_s16(int16_t * ptr, int16x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4_lane_s32",
      "full name": "void vst4_lane_s32(int32_t * ptr, int32x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst4q_lane_s32",
      "full name": "void vst4q_lane_s32(int32_t * ptr, int32x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst4_lane_u16",
      "full name": "void vst4_lane_u16(uint16_t * ptr, uint16x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4q_lane_u16",
      "full name": "void vst4q_lane_u16(uint16_t * ptr, uint16x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4_lane_u32",
      "full name": "void vst4_lane_u32(uint32_t * ptr, uint32x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst4q_lane_u32",
      "full name": "void vst4q_lane_u32(uint32_t * ptr, uint32x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst4_lane_f16",
      "full name": "void vst4_lane_f16(float16_t * ptr, float16x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4q_lane_f16",
      "full name": "void vst4q_lane_f16(float16_t * ptr, float16x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4_lane_f32",
      "full name": "void vst4_lane_f32(float32_t * ptr, float32x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst4q_lane_f32",
      "full name": "void vst4q_lane_f32(float32_t * ptr, float32x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [32]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [32]"
    },
    {
      "name": "vst4_lane_p16",
      "full name": "void vst4_lane_p16(poly16_t * ptr, poly16x4x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4q_lane_p16",
      "full name": "void vst4q_lane_p16(poly16_t * ptr, poly16x8x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [16]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [16]"
    },
    {
      "name": "vst4q_lane_s8",
      "full name": "void vst4q_lane_s8(int8_t * ptr, int8x16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst4q_lane_u8",
      "full name": "void vst4q_lane_u8(uint8_t * ptr, uint8x16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst4q_lane_p8",
      "full name": "void vst4q_lane_p8(poly8_t * ptr, poly8x16x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [8]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [8]"
    },
    {
      "name": "vst4_lane_s64",
      "full name": "void vst4_lane_s64(int64_t * ptr, int64x1x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4q_lane_s64",
      "full name": "void vst4q_lane_s64(int64_t * ptr, int64x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4_lane_u64",
      "full name": "void vst4_lane_u64(uint64_t * ptr, uint64x1x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4q_lane_u64",
      "full name": "void vst4q_lane_u64(uint64_t * ptr, uint64x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4_lane_p64",
      "full name": "void vst4_lane_p64(poly64_t * ptr, poly64x1x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4q_lane_p64",
      "full name": "void vst4q_lane_p64(poly64_t * ptr, poly64x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4_lane_f64",
      "full name": "void vst4_lane_f64(float64_t * ptr, float64x1x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst4q_lane_f64",
      "full name": "void vst4q_lane_f64(float64_t * ptr, float64x2x4_t val, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st4",
      "function_en": "[vector] st4 [64]",
      "function_cn": "[向量] 将4个向量寄存器中指定的元素内容写入指针指向的内存中 [64]"
    },
    {
      "name": "vst1_s8_x2",
      "full name": "void vst1_s8_x2(int8_t * ptr, int8x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_s8_x2",
      "full name": "void vst1q_s8_x2(int8_t * ptr, int8x16x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_s16_x2",
      "full name": "void vst1_s16_x2(int16_t * ptr, int16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_s16_x2",
      "full name": "void vst1q_s16_x2(int16_t * ptr, int16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_s32_x2",
      "full name": "void vst1_s32_x2(int32_t * ptr, int32x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_s32_x2",
      "full name": "void vst1q_s32_x2(int32_t * ptr, int32x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_u8_x2",
      "full name": "void vst1_u8_x2(uint8_t * ptr, uint8x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_u8_x2",
      "full name": "void vst1q_u8_x2(uint8_t * ptr, uint8x16x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_u16_x2",
      "full name": "void vst1_u16_x2(uint16_t * ptr, uint16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_u16_x2",
      "full name": "void vst1q_u16_x2(uint16_t * ptr, uint16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_u32_x2",
      "full name": "void vst1_u32_x2(uint32_t * ptr, uint32x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_u32_x2",
      "full name": "void vst1q_u32_x2(uint32_t * ptr, uint32x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_f16_x2",
      "full name": "void vst1_f16_x2(float16_t * ptr, float16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_f16_x2",
      "full name": "void vst1q_f16_x2(float16_t * ptr, float16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_f32_x2",
      "full name": "void vst1_f32_x2(float32_t * ptr, float32x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_f32_x2",
      "full name": "void vst1q_f32_x2(float32_t * ptr, float32x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_p8_x2",
      "full name": "void vst1_p8_x2(poly8_t * ptr, poly8x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_p8_x2",
      "full name": "void vst1q_p8_x2(poly8_t * ptr, poly8x16x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_p16_x2",
      "full name": "void vst1_p16_x2(poly16_t * ptr, poly16x4x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_p16_x2",
      "full name": "void vst1q_p16_x2(poly16_t * ptr, poly16x8x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_s64_x2",
      "full name": "void vst1_s64_x2(int64_t * ptr, int64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_u64_x2",
      "full name": "void vst1_u64_x2(uint64_t * ptr, uint64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_p64_x2",
      "full name": "void vst1_p64_x2(poly64_t * ptr, poly64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_s64_x2",
      "full name": "void vst1q_s64_x2(int64_t * ptr, int64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_u64_x2",
      "full name": "void vst1q_u64_x2(uint64_t * ptr, uint64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_p64_x2",
      "full name": "void vst1q_p64_x2(poly64_t * ptr, poly64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_f64_x2",
      "full name": "void vst1_f64_x2(float64_t * ptr, float64x1x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_f64_x2",
      "full name": "void vst1q_f64_x2(float64_t * ptr, float64x2x2_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_s8_x3",
      "full name": "void vst1_s8_x3(int8_t * ptr, int8x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_s8_x3",
      "full name": "void vst1q_s8_x3(int8_t * ptr, int8x16x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_s16_x3",
      "full name": "void vst1_s16_x3(int16_t * ptr, int16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_s16_x3",
      "full name": "void vst1q_s16_x3(int16_t * ptr, int16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_s32_x3",
      "full name": "void vst1_s32_x3(int32_t * ptr, int32x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_s32_x3",
      "full name": "void vst1q_s32_x3(int32_t * ptr, int32x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_u8_x3",
      "full name": "void vst1_u8_x3(uint8_t * ptr, uint8x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_u8_x3",
      "full name": "void vst1q_u8_x3(uint8_t * ptr, uint8x16x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_u16_x3",
      "full name": "void vst1_u16_x3(uint16_t * ptr, uint16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_u16_x3",
      "full name": "void vst1q_u16_x3(uint16_t * ptr, uint16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_u32_x3",
      "full name": "void vst1_u32_x3(uint32_t * ptr, uint32x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_u32_x3",
      "full name": "void vst1q_u32_x3(uint32_t * ptr, uint32x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_f16_x3",
      "full name": "void vst1_f16_x3(float16_t * ptr, float16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_f16_x3",
      "full name": "void vst1q_f16_x3(float16_t * ptr, float16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_f32_x3",
      "full name": "void vst1_f32_x3(float32_t * ptr, float32x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_f32_x3",
      "full name": "void vst1q_f32_x3(float32_t * ptr, float32x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_p8_x3",
      "full name": "void vst1_p8_x3(poly8_t * ptr, poly8x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_p8_x3",
      "full name": "void vst1q_p8_x3(poly8_t * ptr, poly8x16x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_p16_x3",
      "full name": "void vst1_p16_x3(poly16_t * ptr, poly16x4x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_p16_x3",
      "full name": "void vst1q_p16_x3(poly16_t * ptr, poly16x8x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_s64_x3",
      "full name": "void vst1_s64_x3(int64_t * ptr, int64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_u64_x3",
      "full name": "void vst1_u64_x3(uint64_t * ptr, uint64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_p64_x3",
      "full name": "void vst1_p64_x3(poly64_t * ptr, poly64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_s64_x3",
      "full name": "void vst1q_s64_x3(int64_t * ptr, int64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_u64_x3",
      "full name": "void vst1q_u64_x3(uint64_t * ptr, uint64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_p64_x3",
      "full name": "void vst1q_p64_x3(poly64_t * ptr, poly64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_f64_x3",
      "full name": "void vst1_f64_x3(float64_t * ptr, float64x1x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_f64_x3",
      "full name": "void vst1q_f64_x3(float64_t * ptr, float64x2x3_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_s8_x4",
      "full name": "void vst1_s8_x4(int8_t * ptr, int8x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_s8_x4",
      "full name": "void vst1q_s8_x4(int8_t * ptr, int8x16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_s16_x4",
      "full name": "void vst1_s16_x4(int16_t * ptr, int16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_s16_x4",
      "full name": "void vst1q_s16_x4(int16_t * ptr, int16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_s32_x4",
      "full name": "void vst1_s32_x4(int32_t * ptr, int32x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_s32_x4",
      "full name": "void vst1q_s32_x4(int32_t * ptr, int32x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_u8_x4",
      "full name": "void vst1_u8_x4(uint8_t * ptr, uint8x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_u8_x4",
      "full name": "void vst1q_u8_x4(uint8_t * ptr, uint8x16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_u16_x4",
      "full name": "void vst1_u16_x4(uint16_t * ptr, uint16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_u16_x4",
      "full name": "void vst1q_u16_x4(uint16_t * ptr, uint16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_u32_x4",
      "full name": "void vst1_u32_x4(uint32_t * ptr, uint32x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_u32_x4",
      "full name": "void vst1q_u32_x4(uint32_t * ptr, uint32x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_f16_x4",
      "full name": "void vst1_f16_x4(float16_t * ptr, float16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_f16_x4",
      "full name": "void vst1q_f16_x4(float16_t * ptr, float16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_f32_x4",
      "full name": "void vst1_f32_x4(float32_t * ptr, float32x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1q_f32_x4",
      "full name": "void vst1q_f32_x4(float32_t * ptr, float32x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [32]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [32]"
    },
    {
      "name": "vst1_p8_x4",
      "full name": "void vst1_p8_x4(poly8_t * ptr, poly8x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1q_p8_x4",
      "full name": "void vst1q_p8_x4(poly8_t * ptr, poly8x16x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [8]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [8]"
    },
    {
      "name": "vst1_p16_x4",
      "full name": "void vst1_p16_x4(poly16_t * ptr, poly16x4x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1q_p16_x4",
      "full name": "void vst1q_p16_x4(poly16_t * ptr, poly16x8x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [16]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [16]"
    },
    {
      "name": "vst1_s64_x4",
      "full name": "void vst1_s64_x4(int64_t * ptr, int64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_u64_x4",
      "full name": "void vst1_u64_x4(uint64_t * ptr, uint64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_p64_x4",
      "full name": "void vst1_p64_x4(poly64_t * ptr, poly64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_s64_x4",
      "full name": "void vst1q_s64_x4(int64_t * ptr, int64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_u64_x4",
      "full name": "void vst1q_u64_x4(uint64_t * ptr, uint64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_p64_x4",
      "full name": "void vst1q_p64_x4(poly64_t * ptr, poly64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1_f64_x4",
      "full name": "void vst1_f64_x4(float64_t * ptr, float64x1x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vst1q_f64_x4",
      "full name": "void vst1q_f64_x4(float64_t * ptr, float64x2x4_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "st1",
      "function_en": "[vector] st1 [64]",
      "function_cn": "[向量] 将向量寄存器中的内容存储到指针指向的内存 [64]"
    },
    {
      "name": "vld1_s8_x2",
      "full name": "int8x8x2_t vld1_s8_x2(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_s8_x2",
      "full name": "int8x16x2_t vld1q_s8_x2(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_s16_x2",
      "full name": "int16x4x2_t vld1_s16_x2(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_s16_x2",
      "full name": "int16x8x2_t vld1q_s16_x2(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_s32_x2",
      "full name": "int32x2x2_t vld1_s32_x2(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_s32_x2",
      "full name": "int32x4x2_t vld1q_s32_x2(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_u8_x2",
      "full name": "uint8x8x2_t vld1_u8_x2(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_u8_x2",
      "full name": "uint8x16x2_t vld1q_u8_x2(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_u16_x2",
      "full name": "uint16x4x2_t vld1_u16_x2(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_u16_x2",
      "full name": "uint16x8x2_t vld1q_u16_x2(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_u32_x2",
      "full name": "uint32x2x2_t vld1_u32_x2(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_u32_x2",
      "full name": "uint32x4x2_t vld1q_u32_x2(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_f16_x2",
      "full name": "float16x4x2_t vld1_f16_x2(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_f16_x2",
      "full name": "float16x8x2_t vld1q_f16_x2(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_f32_x2",
      "full name": "float32x2x2_t vld1_f32_x2(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_f32_x2",
      "full name": "float32x4x2_t vld1q_f32_x2(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_p8_x2",
      "full name": "poly8x8x2_t vld1_p8_x2(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_p8_x2",
      "full name": "poly8x16x2_t vld1q_p8_x2(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_p16_x2",
      "full name": "poly16x4x2_t vld1_p16_x2(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_p16_x2",
      "full name": "poly16x8x2_t vld1q_p16_x2(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_s64_x2",
      "full name": "int64x1x2_t vld1_s64_x2(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_u64_x2",
      "full name": "uint64x1x2_t vld1_u64_x2(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_p64_x2",
      "full name": "poly64x1x2_t vld1_p64_x2(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_s64_x2",
      "full name": "int64x2x2_t vld1q_s64_x2(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_u64_x2",
      "full name": "uint64x2x2_t vld1q_u64_x2(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_p64_x2",
      "full name": "poly64x2x2_t vld1q_p64_x2(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_f64_x2",
      "full name": "float64x1x2_t vld1_f64_x2(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_f64_x2",
      "full name": "float64x2x2_t vld1q_f64_x2(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_s8_x3",
      "full name": "int8x8x3_t vld1_s8_x3(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_s8_x3",
      "full name": "int8x16x3_t vld1q_s8_x3(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_s16_x3",
      "full name": "int16x4x3_t vld1_s16_x3(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_s16_x3",
      "full name": "int16x8x3_t vld1q_s16_x3(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_s32_x3",
      "full name": "int32x2x3_t vld1_s32_x3(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_s32_x3",
      "full name": "int32x4x3_t vld1q_s32_x3(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_u8_x3",
      "full name": "uint8x8x3_t vld1_u8_x3(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_u8_x3",
      "full name": "uint8x16x3_t vld1q_u8_x3(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_u16_x3",
      "full name": "uint16x4x3_t vld1_u16_x3(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_u16_x3",
      "full name": "uint16x8x3_t vld1q_u16_x3(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_u32_x3",
      "full name": "uint32x2x3_t vld1_u32_x3(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_u32_x3",
      "full name": "uint32x4x3_t vld1q_u32_x3(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_f16_x3",
      "full name": "float16x4x3_t vld1_f16_x3(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_f16_x3",
      "full name": "float16x8x3_t vld1q_f16_x3(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_f32_x3",
      "full name": "float32x2x3_t vld1_f32_x3(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_f32_x3",
      "full name": "float32x4x3_t vld1q_f32_x3(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_p8_x3",
      "full name": "poly8x8x3_t vld1_p8_x3(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_p8_x3",
      "full name": "poly8x16x3_t vld1q_p8_x3(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_p16_x3",
      "full name": "poly16x4x3_t vld1_p16_x3(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_p16_x3",
      "full name": "poly16x8x3_t vld1q_p16_x3(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_s64_x3",
      "full name": "int64x1x3_t vld1_s64_x3(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_u64_x3",
      "full name": "uint64x1x3_t vld1_u64_x3(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_p64_x3",
      "full name": "poly64x1x3_t vld1_p64_x3(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_s64_x3",
      "full name": "int64x2x3_t vld1q_s64_x3(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_u64_x3",
      "full name": "uint64x2x3_t vld1q_u64_x3(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_p64_x3",
      "full name": "poly64x2x3_t vld1q_p64_x3(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_f64_x3",
      "full name": "float64x1x3_t vld1_f64_x3(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_f64_x3",
      "full name": "float64x2x3_t vld1q_f64_x3(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_s8_x4",
      "full name": "int8x8x4_t vld1_s8_x4(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_s8_x4",
      "full name": "int8x16x4_t vld1q_s8_x4(int8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_s16_x4",
      "full name": "int16x4x4_t vld1_s16_x4(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_s16_x4",
      "full name": "int16x8x4_t vld1q_s16_x4(int16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_s32_x4",
      "full name": "int32x2x4_t vld1_s32_x4(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_s32_x4",
      "full name": "int32x4x4_t vld1q_s32_x4(int32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_u8_x4",
      "full name": "uint8x8x4_t vld1_u8_x4(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_u8_x4",
      "full name": "uint8x16x4_t vld1q_u8_x4(uint8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_u16_x4",
      "full name": "uint16x4x4_t vld1_u16_x4(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_u16_x4",
      "full name": "uint16x8x4_t vld1q_u16_x4(uint16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_u32_x4",
      "full name": "uint32x2x4_t vld1_u32_x4(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_u32_x4",
      "full name": "uint32x4x4_t vld1q_u32_x4(uint32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_f16_x4",
      "full name": "float16x4x4_t vld1_f16_x4(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_f16_x4",
      "full name": "float16x8x4_t vld1q_f16_x4(float16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_f32_x4",
      "full name": "float32x2x4_t vld1_f32_x4(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1q_f32_x4",
      "full name": "float32x4x4_t vld1q_f32_x4(float32_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [32]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [32]"
    },
    {
      "name": "vld1_p8_x4",
      "full name": "poly8x8x4_t vld1_p8_x4(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1q_p8_x4",
      "full name": "poly8x16x4_t vld1q_p8_x4(poly8_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [8]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [8]"
    },
    {
      "name": "vld1_p16_x4",
      "full name": "poly16x4x4_t vld1_p16_x4(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1q_p16_x4",
      "full name": "poly16x8x4_t vld1q_p16_x4(poly16_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [16]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [16]"
    },
    {
      "name": "vld1_s64_x4",
      "full name": "int64x1x4_t vld1_s64_x4(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_u64_x4",
      "full name": "uint64x1x4_t vld1_u64_x4(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_p64_x4",
      "full name": "poly64x1x4_t vld1_p64_x4(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_s64_x4",
      "full name": "int64x2x4_t vld1q_s64_x4(int64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_u64_x4",
      "full name": "uint64x2x4_t vld1q_u64_x4(uint64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_p64_x4",
      "full name": "poly64x2x4_t vld1q_p64_x4(poly64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1_f64_x4",
      "full name": "float64x1x4_t vld1_f64_x4(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vld1q_f64_x4",
      "full name": "float64x2x4_t vld1q_f64_x4(float64_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ld1",
      "function_en": "[vector] ld1 [64]",
      "function_cn": "[向量] 将指针指向的内存中的内容加载到向量寄存器 [64]"
    },
    {
      "name": "vpadd_s8",
      "full name": "int8x8_t vpadd_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [8]",
      "function_cn": "[向量] 相邻元素相加 [8]"
    },
    {
      "name": "vpadd_s16",
      "full name": "int16x4_t vpadd_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [16]",
      "function_cn": "[向量] 相邻元素相加 [16]"
    },
    {
      "name": "vpadd_s32",
      "full name": "int32x2_t vpadd_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [32]",
      "function_cn": "[向量] 相邻元素相加 [32]"
    },
    {
      "name": "vpadd_u8",
      "full name": "uint8x8_t vpadd_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [8]",
      "function_cn": "[向量] 相邻元素相加 [8]"
    },
    {
      "name": "vpadd_u16",
      "full name": "uint16x4_t vpadd_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [16]",
      "function_cn": "[向量] 相邻元素相加 [16]"
    },
    {
      "name": "vpadd_u32",
      "full name": "uint32x2_t vpadd_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [32]",
      "function_cn": "[向量] 相邻元素相加 [32]"
    },
    {
      "name": "vpadd_f32",
      "full name": "float32x2_t vpadd_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [32]",
      "function_cn": "[向量] 浮点类型相邻元素相加 [32]"
    },
    {
      "name": "vpaddq_s8",
      "full name": "int8x16_t vpaddq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [8]",
      "function_cn": "[向量] 相邻元素相加 [8]"
    },
    {
      "name": "vpaddq_s16",
      "full name": "int16x8_t vpaddq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [16]",
      "function_cn": "[向量] 相邻元素相加 [16]"
    },
    {
      "name": "vpaddq_s32",
      "full name": "int32x4_t vpaddq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [32]",
      "function_cn": "[向量] 相邻元素相加 [32]"
    },
    {
      "name": "vpaddq_s64",
      "full name": "int64x2_t vpaddq_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [64]",
      "function_cn": "[向量] 相邻元素相加 [64]"
    },
    {
      "name": "vpaddq_u8",
      "full name": "uint8x16_t vpaddq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [8]",
      "function_cn": "[向量] 相邻元素相加 [8]"
    },
    {
      "name": "vpaddq_u16",
      "full name": "uint16x8_t vpaddq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [16]",
      "function_cn": "[向量] 相邻元素相加 [16]"
    },
    {
      "name": "vpaddq_u32",
      "full name": "uint32x4_t vpaddq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [32]",
      "function_cn": "[向量] 相邻元素相加 [32]"
    },
    {
      "name": "vpaddq_u64",
      "full name": "uint64x2_t vpaddq_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [64]",
      "function_cn": "[向量] 相邻元素相加 [64]"
    },
    {
      "name": "vpaddq_f32",
      "full name": "float32x4_t vpaddq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [32]",
      "function_cn": "[向量] 浮点类型相邻元素相加 [32]"
    },
    {
      "name": "vpaddq_f64",
      "full name": "float64x2_t vpaddq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [64]",
      "function_cn": "[向量] 浮点类型相邻元素相加 [64]"
    },
    {
      "name": "vpaddl_s8",
      "full name": "int16x4_t vpaddl_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加 [8]"
    },
    {
      "name": "vpaddlq_s8",
      "full name": "int16x8_t vpaddlq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加 [8]"
    },
    {
      "name": "vpaddl_s16",
      "full name": "int32x2_t vpaddl_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加 [16]"
    },
    {
      "name": "vpaddlq_s16",
      "full name": "int32x4_t vpaddlq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加 [16]"
    },
    {
      "name": "vpaddl_s32",
      "full name": "int64x1_t vpaddl_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加 [32]"
    },
    {
      "name": "vpaddlq_s32",
      "full name": "int64x2_t vpaddlq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加 [32]"
    },
    {
      "name": "vpaddl_u8",
      "full name": "uint16x4_t vpaddl_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加 [8]"
    },
    {
      "name": "vpaddlq_u8",
      "full name": "uint16x8_t vpaddlq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加 [8]"
    },
    {
      "name": "vpaddl_u16",
      "full name": "uint32x2_t vpaddl_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加 [16]"
    },
    {
      "name": "vpaddlq_u16",
      "full name": "uint32x4_t vpaddlq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加 [16]"
    },
    {
      "name": "vpaddl_u32",
      "full name": "uint64x1_t vpaddl_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加 [32]"
    },
    {
      "name": "vpaddlq_u32",
      "full name": "uint64x2_t vpaddlq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加 [32]"
    },
    {
      "name": "vpadal_s8",
      "full name": "int16x4_t vpadal_s8(int16x4_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sadalp",
      "function_en": "[vector] sadalp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加并累加到目标寄存器 [8]"
    },
    {
      "name": "vpadalq_s8",
      "full name": "int16x8_t vpadalq_s8(int16x8_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sadalp",
      "function_en": "[vector] sadalp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加并累加到目标寄存器 [8]"
    },
    {
      "name": "vpadal_s16",
      "full name": "int32x2_t vpadal_s16(int32x2_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sadalp",
      "function_en": "[vector] sadalp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加并累加到目标寄存器 [16]"
    },
    {
      "name": "vpadalq_s16",
      "full name": "int32x4_t vpadalq_s16(int32x4_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sadalp",
      "function_en": "[vector] sadalp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加并累加到目标寄存器 [16]"
    },
    {
      "name": "vpadal_s32",
      "full name": "int64x1_t vpadal_s32(int64x1_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sadalp",
      "function_en": "[vector] sadalp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加并累加到目标寄存器 [32]"
    },
    {
      "name": "vpadalq_s32",
      "full name": "int64x2_t vpadalq_s32(int64x2_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sadalp",
      "function_en": "[vector] sadalp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素相加并累加到目标寄存器 [32]"
    },
    {
      "name": "vpadal_u8",
      "full name": "uint16x4_t vpadal_u8(uint16x4_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uadalp",
      "function_en": "[vector] uadalp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加并累加到目标寄存器 [8]"
    },
    {
      "name": "vpadalq_u8",
      "full name": "uint16x8_t vpadalq_u8(uint16x8_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uadalp",
      "function_en": "[vector] uadalp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加并累加到目标寄存器 [8]"
    },
    {
      "name": "vpadal_u16",
      "full name": "uint32x2_t vpadal_u16(uint32x2_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uadalp",
      "function_en": "[vector] uadalp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加并累加到目标寄存器 [16]"
    },
    {
      "name": "vpadalq_u16",
      "full name": "uint32x4_t vpadalq_u16(uint32x4_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uadalp",
      "function_en": "[vector] uadalp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加并累加到目标寄存器 [16]"
    },
    {
      "name": "vpadal_u32",
      "full name": "uint64x1_t vpadal_u32(uint64x1_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uadalp",
      "function_en": "[vector] uadalp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加并累加到目标寄存器 [32]"
    },
    {
      "name": "vpadalq_u32",
      "full name": "uint64x2_t vpadalq_u32(uint64x2_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uadalp",
      "function_en": "[vector] uadalp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素相加并累加到目标寄存器 [32]"
    },
    {
      "name": "vpmax_s8",
      "full name": "int8x8_t vpmax_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较大值 [8]"
    },
    {
      "name": "vpmax_s16",
      "full name": "int16x4_t vpmax_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较大值 [16]"
    },
    {
      "name": "vpmax_s32",
      "full name": "int32x2_t vpmax_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmax_u8",
      "full name": "uint8x8_t vpmax_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较大值 [8]"
    },
    {
      "name": "vpmax_u16",
      "full name": "uint16x4_t vpmax_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较大值 [16]"
    },
    {
      "name": "vpmax_u32",
      "full name": "uint32x2_t vpmax_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmax_f32",
      "full name": "float32x2_t vpmax_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [32]",
      "function_cn": "[向量] 浮点数类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxq_s8",
      "full name": "int8x16_t vpmaxq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较大值 [8]"
    },
    {
      "name": "vpmaxq_s16",
      "full name": "int16x8_t vpmaxq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较大值 [16]"
    },
    {
      "name": "vpmaxq_s32",
      "full name": "int32x4_t vpmaxq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxq_u8",
      "full name": "uint8x16_t vpmaxq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较大值 [8]"
    },
    {
      "name": "vpmaxq_u16",
      "full name": "uint16x8_t vpmaxq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较大值 [16]"
    },
    {
      "name": "vpmaxq_u32",
      "full name": "uint32x4_t vpmaxq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxq_f32",
      "full name": "float32x4_t vpmaxq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxq_f64",
      "full name": "float64x2_t vpmaxq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [64]"
    },
    {
      "name": "vpmin_s8",
      "full name": "int8x8_t vpmin_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较小值 [8]"
    },
    {
      "name": "vpmin_s16",
      "full name": "int16x4_t vpmin_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较小值 [16]"
    },
    {
      "name": "vpmin_s32",
      "full name": "int32x2_t vpmin_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpmin_u8",
      "full name": "uint8x8_t vpmin_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较小值 [8]"
    },
    {
      "name": "vpmin_u16",
      "full name": "uint16x4_t vpmin_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较小值 [16]"
    },
    {
      "name": "vpmin_u32",
      "full name": "uint32x2_t vpmin_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpmin_f32",
      "full name": "float32x2_t vpmin_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminq_s8",
      "full name": "int8x16_t vpminq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [8]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较小值 [8]"
    },
    {
      "name": "vpminq_s16",
      "full name": "int16x8_t vpminq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [16]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较小值 [16]"
    },
    {
      "name": "vpminq_s32",
      "full name": "int32x4_t vpminq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [32]",
      "function_cn": "[向量] 有符号整数类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminq_u8",
      "full name": "uint8x16_t vpminq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [8]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较小值 [8]"
    },
    {
      "name": "vpminq_u16",
      "full name": "uint16x8_t vpminq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [16]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较小值 [16]"
    },
    {
      "name": "vpminq_u32",
      "full name": "uint32x4_t vpminq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [32]",
      "function_cn": "[向量] 无符号整数类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminq_f32",
      "full name": "float32x4_t vpminq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminq_f64",
      "full name": "float64x2_t vpminq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [64]"
    },
    {
      "name": "vpmaxnm_f32",
      "full name": "float32x2_t vpmaxnm_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxnmq_f32",
      "full name": "float32x4_t vpmaxnmq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxnmq_f64",
      "full name": "float64x2_t vpmaxnmq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [64]"
    },
    {
      "name": "vpminnm_f32",
      "full name": "float32x2_t vpminnm_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminnmq_f32",
      "full name": "float32x4_t vpminnmq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminnmq_f64",
      "full name": "float64x2_t vpminnmq_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [64]"
    },
    {
      "name": "vpaddd_s64",
      "full name": "int64_t vpaddd_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [64]",
      "function_cn": "[向量] 相邻元素相加 [64]"
    },
    {
      "name": "vpaddd_u64",
      "full name": "uint64_t vpaddd_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [64]",
      "function_cn": "[向量] 相邻元素相加 [64]"
    },
    {
      "name": "vpadds_f32",
      "full name": "float32_t vpadds_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [32]",
      "function_cn": "[向量] 浮点类型相邻元素相加 [32]"
    },
    {
      "name": "vpaddd_f64",
      "full name": "float64_t vpaddd_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [64]",
      "function_cn": "[向量] 浮点类型相邻元素相加 [64]"
    },
    {
      "name": "vpmaxs_f32",
      "full name": "float32_t vpmaxs_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxqd_f64",
      "full name": "float64_t vpmaxqd_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [64]"
    },
    {
      "name": "vpmins_f32",
      "full name": "float32_t vpmins_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminqd_f64",
      "full name": "float64_t vpminqd_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [64]"
    },
    {
      "name": "vpmaxnms_f32",
      "full name": "float32_t vpmaxnms_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [32]"
    },
    {
      "name": "vpmaxnmqd_f64",
      "full name": "float64_t vpmaxnmqd_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较大值 [64]"
    },
    {
      "name": "vpminnms_f32",
      "full name": "float32_t vpminnms_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [32]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [32]"
    },
    {
      "name": "vpminnmqd_f64",
      "full name": "float64_t vpminnmqd_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [64]",
      "function_cn": "[向量] 浮点类型相邻元素取较小值 [64]"
    },
    {
      "name": "vaddv_s8",
      "full name": "int8_t vaddv_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [8]",
      "function_cn": "[向量] 向量全部元素相加 [8]"
    },
    {
      "name": "vaddvq_s8",
      "full name": "int8_t vaddvq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [8]",
      "function_cn": "[向量] 向量全部元素相加 [8]"
    },
    {
      "name": "vaddv_s16",
      "full name": "int16_t vaddv_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [16]",
      "function_cn": "[向量] 向量全部元素相加 [16]"
    },
    {
      "name": "vaddvq_s16",
      "full name": "int16_t vaddvq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [16]",
      "function_cn": "[向量] 向量全部元素相加 [16]"
    },
    {
      "name": "vaddv_s32",
      "full name": "int32_t vaddv_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [32]",
      "function_cn": "[向量] 向量全部元素相加 [32]"
    },
    {
      "name": "vaddvq_s32",
      "full name": "int32_t vaddvq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [32]",
      "function_cn": "[向量] 向量全部元素相加 [32]"
    },
    {
      "name": "vaddvq_s64",
      "full name": "int64_t vaddvq_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [64]",
      "function_cn": "[向量] 向量全部元素相加 [64]"
    },
    {
      "name": "vaddv_u8",
      "full name": "uint8_t vaddv_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [8]",
      "function_cn": "[向量] 向量全部元素相加 [8]"
    },
    {
      "name": "vaddvq_u8",
      "full name": "uint8_t vaddvq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [8]",
      "function_cn": "[向量] 向量全部元素相加 [8]"
    },
    {
      "name": "vaddv_u16",
      "full name": "uint16_t vaddv_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [16]",
      "function_cn": "[向量] 向量全部元素相加 [16]"
    },
    {
      "name": "vaddvq_u16",
      "full name": "uint16_t vaddvq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [16]",
      "function_cn": "[向量] 向量全部元素相加 [16]"
    },
    {
      "name": "vaddv_u32",
      "full name": "uint32_t vaddv_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [32]",
      "function_cn": "[向量] 向量全部元素相加 [32]"
    },
    {
      "name": "vaddvq_u32",
      "full name": "uint32_t vaddvq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addv",
      "function_en": "[vector] addv [32]",
      "function_cn": "[向量] 向量全部元素相加 [32]"
    },
    {
      "name": "vaddvq_u64",
      "full name": "uint64_t vaddvq_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "addp",
      "function_en": "[vector] addp [64]",
      "function_cn": "[向量] 向量全部元素相加 [64]"
    },
    {
      "name": "vaddv_f32",
      "full name": "float32_t vaddv_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [32]",
      "function_cn": "[向量] 浮点类型向量全部元素相加 [32]"
    },
    {
      "name": "vaddvq_f32",
      "full name": "float32_t vaddvq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [32]",
      "function_cn": "[向量] 浮点类型向量全部元素相加 [32]"
    },
    {
      "name": "vaddvq_f64",
      "full name": "float64_t vaddvq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "faddp",
      "function_en": "[vector] faddp [64]",
      "function_cn": "[向量] 浮点类型向量全部元素相加 [64]"
    },
    {
      "name": "vaddlv_s8",
      "full name": "int16_t vaddlv_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlv",
      "function_en": "[vector] saddlv [8]",
      "function_cn": "[向量] 有符号整数类型向量全部元素相加 [8]"
    },
    {
      "name": "vaddlvq_s8",
      "full name": "int16_t vaddlvq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlv",
      "function_en": "[vector] saddlv [8]",
      "function_cn": "[向量] 有符号整数类型向量全部元素相加 [8]"
    },
    {
      "name": "vaddlv_s16",
      "full name": "int32_t vaddlv_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlv",
      "function_en": "[vector] saddlv [16]",
      "function_cn": "[向量] 有符号整数类型向量全部元素相加 [16]"
    },
    {
      "name": "vaddlvq_s16",
      "full name": "int32_t vaddlvq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlv",
      "function_en": "[vector] saddlv [16]",
      "function_cn": "[向量] 有符号整数类型向量全部元素相加 [16]"
    },
    {
      "name": "vaddlv_s32",
      "full name": "int64_t vaddlv_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlp",
      "function_en": "[vector] saddlp [32]",
      "function_cn": "[向量] 有符号整数类型向量全部元素相加 [32]"
    },
    {
      "name": "vaddlvq_s32",
      "full name": "int64_t vaddlvq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "saddlv",
      "function_en": "[vector] saddlv [32]",
      "function_cn": "[向量] 有符号整数类型向量全部元素相加 [32]"
    },
    {
      "name": "vaddlv_u8",
      "full name": "uint16_t vaddlv_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlv",
      "function_en": "[vector] uaddlv [8]",
      "function_cn": "[向量] 无符号整数类型向量全部元素相加 [8]"
    },
    {
      "name": "vaddlvq_u8",
      "full name": "uint16_t vaddlvq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlv",
      "function_en": "[vector] uaddlv [8]",
      "function_cn": "[向量] 无符号整数类型向量全部元素相加 [8]"
    },
    {
      "name": "vaddlv_u16",
      "full name": "uint32_t vaddlv_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlv",
      "function_en": "[vector] uaddlv [16]",
      "function_cn": "[向量] 无符号整数类型向量全部元素相加 [16]"
    },
    {
      "name": "vaddlvq_u16",
      "full name": "uint32_t vaddlvq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlv",
      "function_en": "[vector] uaddlv [16]",
      "function_cn": "[向量] 无符号整数类型向量全部元素相加 [16]"
    },
    {
      "name": "vaddlv_u32",
      "full name": "uint64_t vaddlv_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlp",
      "function_en": "[vector] uaddlp [32]",
      "function_cn": "[向量] 无符号整数类型向量全部元素相加 [32]"
    },
    {
      "name": "vaddlvq_u32",
      "full name": "uint64_t vaddlvq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uaddlv",
      "function_en": "[vector] uaddlv [32]",
      "function_cn": "[向量] 无符号整数类型向量全部元素相加 [32]"
    },
    {
      "name": "vmaxv_s8",
      "full name": "int8_t vmaxv_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxv",
      "function_en": "[vector] smaxv [8]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最大值 [8]"
    },
    {
      "name": "vmaxvq_s8",
      "full name": "int8_t vmaxvq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxv",
      "function_en": "[vector] smaxv [8]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最大值 [8]"
    },
    {
      "name": "vmaxv_s16",
      "full name": "int16_t vmaxv_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxv",
      "function_en": "[vector] smaxv [16]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最大值 [16]"
    },
    {
      "name": "vmaxvq_s16",
      "full name": "int16_t vmaxvq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxv",
      "function_en": "[vector] smaxv [16]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最大值 [16]"
    },
    {
      "name": "vmaxv_s32",
      "full name": "int32_t vmaxv_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxp",
      "function_en": "[vector] smaxp [32]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxvq_s32",
      "full name": "int32_t vmaxvq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smaxv",
      "function_en": "[vector] smaxv [32]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxv_u8",
      "full name": "uint8_t vmaxv_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxv",
      "function_en": "[vector] umaxv [8]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最大值 [8]"
    },
    {
      "name": "vmaxvq_u8",
      "full name": "uint8_t vmaxvq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxv",
      "function_en": "[vector] umaxv [8]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最大值 [8]"
    },
    {
      "name": "vmaxv_u16",
      "full name": "uint16_t vmaxv_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxv",
      "function_en": "[vector] umaxv [16]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最大值 [16]"
    },
    {
      "name": "vmaxvq_u16",
      "full name": "uint16_t vmaxvq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxv",
      "function_en": "[vector] umaxv [16]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最大值 [16]"
    },
    {
      "name": "vmaxv_u32",
      "full name": "uint32_t vmaxv_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxp",
      "function_en": "[vector] umaxp [32]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxvq_u32",
      "full name": "uint32_t vmaxvq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umaxv",
      "function_en": "[vector] umaxv [32]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxv_f32",
      "full name": "float32_t vmaxv_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxvq_f32",
      "full name": "float32_t vmaxvq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxv",
      "function_en": "[vector] fmaxv [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxvq_f64",
      "full name": "float64_t vmaxvq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxp",
      "function_en": "[vector] fmaxp [64]",
      "function_cn": "[向量] 浮点类型向量全部元素取最大值 [64]"
    },
    {
      "name": "vminv_s8",
      "full name": "int8_t vminv_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminv",
      "function_en": "[vector] sminv [8]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最小值 [8]"
    },
    {
      "name": "vminvq_s8",
      "full name": "int8_t vminvq_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminv",
      "function_en": "[vector] sminv [8]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最小值 [8]"
    },
    {
      "name": "vminv_s16",
      "full name": "int16_t vminv_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminv",
      "function_en": "[vector] sminv [16]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最小值 [16]"
    },
    {
      "name": "vminvq_s16",
      "full name": "int16_t vminvq_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminv",
      "function_en": "[vector] sminv [16]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最小值 [16]"
    },
    {
      "name": "vminv_s32",
      "full name": "int32_t vminv_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminp",
      "function_en": "[vector] sminp [32]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminvq_s32",
      "full name": "int32_t vminvq_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sminv",
      "function_en": "[vector] sminv [32]",
      "function_cn": "[向量] 有符号整数类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminv_u8",
      "full name": "uint8_t vminv_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminv",
      "function_en": "[vector] uminv [8]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最小值 [8]"
    },
    {
      "name": "vminvq_u8",
      "full name": "uint8_t vminvq_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminv",
      "function_en": "[vector] uminv [8]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最小值 [8]"
    },
    {
      "name": "vminv_u16",
      "full name": "uint16_t vminv_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminv",
      "function_en": "[vector] uminv [16]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最小值 [16]"
    },
    {
      "name": "vminvq_u16",
      "full name": "uint16_t vminvq_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminv",
      "function_en": "[vector] uminv [16]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最小值 [16]"
    },
    {
      "name": "vminv_u32",
      "full name": "uint32_t vminv_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminp",
      "function_en": "[vector] uminp [32]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminvq_u32",
      "full name": "uint32_t vminvq_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uminv",
      "function_en": "[vector] uminv [32]",
      "function_cn": "[向量] 无符号整数类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminv_f32",
      "full name": "float32_t vminv_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminvq_f32",
      "full name": "float32_t vminvq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminv",
      "function_en": "[vector] fminv [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminvq_f64",
      "full name": "float64_t vminvq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminp",
      "function_en": "[vector] fminp [64]",
      "function_cn": "[向量] 浮点类型向量全部元素取最小值 [64]"
    },
    {
      "name": "vmaxnmv_f32",
      "full name": "float32_t vmaxnmv_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxnmvq_f32",
      "full name": "float32_t vmaxnmvq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmv",
      "function_en": "[vector] fmaxnmv [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最大值 [32]"
    },
    {
      "name": "vmaxnmvq_f64",
      "full name": "float64_t vmaxnmvq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmaxnmp",
      "function_en": "[vector] fmaxnmp [64]",
      "function_cn": "[向量] 浮点类型向量全部元素取最大值 [64]"
    },
    {
      "name": "vminnmv_f32",
      "full name": "float32_t vminnmv_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminnmvq_f32",
      "full name": "float32_t vminnmvq_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmv",
      "function_en": "[vector] fminnmv [32]",
      "function_cn": "[向量] 浮点类型向量全部元素取最小值 [32]"
    },
    {
      "name": "vminnmvq_f64",
      "full name": "float64_t vminnmvq_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fminnmp",
      "function_en": "[vector] fminnmp [64]",
      "function_cn": "[向量] 浮点类型向量全部元素取最小值 [64]"
    },
    {
      "name": "vext_s8",
      "full name": "int8x8_t vext_s8(int8x8_t a, int8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [8]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [8]"
    },
    {
      "name": "vextq_s8",
      "full name": "int8x16_t vextq_s8(int8x16_t a, int8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [8]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [8]"
    },
    {
      "name": "vext_s16",
      "full name": "int16x4_t vext_s16(int16x4_t a, int16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [16]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [16]"
    },
    {
      "name": "vextq_s16",
      "full name": "int16x8_t vextq_s16(int16x8_t a, int16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [16]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [16]"
    },
    {
      "name": "vext_s32",
      "full name": "int32x2_t vext_s32(int32x2_t a, int32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [32]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [32]"
    },
    {
      "name": "vextq_s32",
      "full name": "int32x4_t vextq_s32(int32x4_t a, int32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [32]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [32]"
    },
    {
      "name": "vext_s64",
      "full name": "int64x1_t vext_s64(int64x1_t a, int64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vextq_s64",
      "full name": "int64x2_t vextq_s64(int64x2_t a, int64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vext_u8",
      "full name": "uint8x8_t vext_u8(uint8x8_t a, uint8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [8]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [8]"
    },
    {
      "name": "vextq_u8",
      "full name": "uint8x16_t vextq_u8(uint8x16_t a, uint8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [8]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [8]"
    },
    {
      "name": "vext_u16",
      "full name": "uint16x4_t vext_u16(uint16x4_t a, uint16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [16]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [16]"
    },
    {
      "name": "vextq_u16",
      "full name": "uint16x8_t vextq_u16(uint16x8_t a, uint16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [16]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [16]"
    },
    {
      "name": "vext_u32",
      "full name": "uint32x2_t vext_u32(uint32x2_t a, uint32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [32]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [32]"
    },
    {
      "name": "vextq_u32",
      "full name": "uint32x4_t vextq_u32(uint32x4_t a, uint32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [32]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [32]"
    },
    {
      "name": "vext_u64",
      "full name": "uint64x1_t vext_u64(uint64x1_t a, uint64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vextq_u64",
      "full name": "uint64x2_t vextq_u64(uint64x2_t a, uint64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vext_p64",
      "full name": "poly64x1_t vext_p64(poly64x1_t a, poly64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vextq_p64",
      "full name": "poly64x2_t vextq_p64(poly64x2_t a, poly64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vext_f32",
      "full name": "float32x2_t vext_f32(float32x2_t a, float32x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [32]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [32]"
    },
    {
      "name": "vextq_f32",
      "full name": "float32x4_t vextq_f32(float32x4_t a, float32x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [32]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [32]"
    },
    {
      "name": "vext_f64",
      "full name": "float64x1_t vext_f64(float64x1_t a, float64x1_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vextq_f64",
      "full name": "float64x2_t vextq_f64(float64x2_t a, float64x2_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [64]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [64]"
    },
    {
      "name": "vext_p8",
      "full name": "poly8x8_t vext_p8(poly8x8_t a, poly8x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [8]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [8]"
    },
    {
      "name": "vextq_p8",
      "full name": "poly8x16_t vextq_p8(poly8x16_t a, poly8x16_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [8]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [8]"
    },
    {
      "name": "vext_p16",
      "full name": "poly16x4_t vext_p16(poly16x4_t a, poly16x4_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [16]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [16]"
    },
    {
      "name": "vextq_p16",
      "full name": "poly16x8_t vextq_p16(poly16x8_t a, poly16x8_t b, const int n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ext",
      "function_en": "[vector] ext [16]",
      "function_cn": "[向量] 从指定位置开始提取向量元素 [16]"
    },
    {
      "name": "vrev64_s8",
      "full name": "int8x8_t vrev64_s8(int8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev64q_s8",
      "full name": "int8x16_t vrev64q_s8(int8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev64_s16",
      "full name": "int16x4_t vrev64_s16(int16x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev64q_s16",
      "full name": "int16x8_t vrev64q_s16(int16x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev64_s32",
      "full name": "int32x2_t vrev64_s32(int32x2_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [64]",
      "function_cn": "[向量] 反转向量中的元素 [64]"
    },
    {
      "name": "vrev64q_s32",
      "full name": "int32x4_t vrev64q_s32(int32x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [64]",
      "function_cn": "[向量] 反转向量中的元素 [64]"
    },
    {
      "name": "vrev64_u8",
      "full name": "uint8x8_t vrev64_u8(uint8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev64q_u8",
      "full name": "uint8x16_t vrev64q_u8(uint8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev64_u16",
      "full name": "uint16x4_t vrev64_u16(uint16x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev64q_u16",
      "full name": "uint16x8_t vrev64q_u16(uint16x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev64_u32",
      "full name": "uint32x2_t vrev64_u32(uint32x2_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [32]",
      "function_cn": "[向量] 反转向量中的元素 [32]"
    },
    {
      "name": "vrev64q_u32",
      "full name": "uint32x4_t vrev64q_u32(uint32x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [32]",
      "function_cn": "[向量] 反转向量中的元素 [32]"
    },
    {
      "name": "vrev64_f32",
      "full name": "float32x2_t vrev64_f32(float32x2_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [32]",
      "function_cn": "[向量] 反转向量中的元素 [32]"
    },
    {
      "name": "vrev64q_f32",
      "full name": "float32x4_t vrev64q_f32(float32x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [32]",
      "function_cn": "[向量] 反转向量中的元素 [32]"
    },
    {
      "name": "vrev64_p8",
      "full name": "poly8x8_t vrev64_p8(poly8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev64q_p8",
      "full name": "poly8x16_t vrev64q_p8(poly8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev64_p16",
      "full name": "poly16x4_t vrev64_p16(poly16x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev64q_p16",
      "full name": "poly16x8_t vrev64q_p16(poly16x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev64",
      "function_en": "[vector] rev64 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev32_s8",
      "full name": "int8x8_t vrev32_s8(int8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev32q_s8",
      "full name": "int8x16_t vrev32q_s8(int8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev32_s16",
      "full name": "int16x4_t vrev32_s16(int16x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev32q_s16",
      "full name": "int16x8_t vrev32q_s16(int16x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev32_u8",
      "full name": "uint8x8_t vrev32_u8(uint8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev32q_u8",
      "full name": "uint8x16_t vrev32q_u8(uint8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev32_u16",
      "full name": "uint16x4_t vrev32_u16(uint16x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [32]",
      "function_cn": "[向量] 反转向量中的元素 [32]"
    },
    {
      "name": "vrev32q_u16",
      "full name": "uint16x8_t vrev32q_u16(uint16x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [32]",
      "function_cn": "[向量] 反转向量中的元素 [32]"
    },
    {
      "name": "vrev32_p8",
      "full name": "poly8x8_t vrev32_p8(poly8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev32q_p8",
      "full name": "poly8x16_t vrev32q_p8(poly8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev32_p16",
      "full name": "poly16x4_t vrev32_p16(poly16x4_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev32q_p16",
      "full name": "poly16x8_t vrev32q_p16(poly16x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev32",
      "function_en": "[vector] rev32 [16]",
      "function_cn": "[向量] 反转向量中的元素 [16]"
    },
    {
      "name": "vrev16_s8",
      "full name": "int8x8_t vrev16_s8(int8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev16",
      "function_en": "[vector] rev16 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev16q_s8",
      "full name": "int8x16_t vrev16q_s8(int8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev16",
      "function_en": "[vector] rev16 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev16_u8",
      "full name": "uint8x8_t vrev16_u8(uint8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev16",
      "function_en": "[vector] rev16 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev16q_u8",
      "full name": "uint8x16_t vrev16q_u8(uint8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev16",
      "function_en": "[vector] rev16 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev16_p8",
      "full name": "poly8x8_t vrev16_p8(poly8x8_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev16",
      "function_en": "[vector] rev16 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vrev16q_p8",
      "full name": "poly8x16_t vrev16q_p8(poly8x16_t vec)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "rev16",
      "function_en": "[vector] rev16 [8]",
      "function_cn": "[向量] 反转向量中的元素 [8]"
    },
    {
      "name": "vzip1_s8",
      "full name": "int8x8_t vzip1_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "_mm_unpacklo_pi8",
      "Intel Asm": "punpcklbw",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [8]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [8]"
    },
    {
      "name": "vzip1q_s8",
      "full name": "int8x16_t vzip1q_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_unpacklo_epi8",
      "Intel Asm": "punpcklbw",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [8]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [8]"
    },
    {
      "name": "vzip1_s16",
      "full name": "int16x4_t vzip1_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_unpacklo_pi16",
      "Intel Asm": "punpcklwd",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [16]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [16]"
    },
    {
      "name": "vzip1q_s16",
      "full name": "int16x8_t vzip1q_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_unpacklo_epi16",
      "Intel Asm": "punpcklwd",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [16]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [16]"
    },
    {
      "name": "vzip1_s32",
      "full name": "int32x2_t vzip1_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "_mm_unpacklo_pi32",
      "Intel Asm": "punpckldq",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [32]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [32]"
    },
    {
      "name": "vzip1q_s32",
      "full name": "int32x4_t vzip1q_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_unpacklo_epi32",
      "Intel Asm": "punpckldq",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [32]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [32]"
    },
    {
      "name": "vzip1q_s64",
      "full name": "int64x2_t vzip1q_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_unpacklo_epi64",
      "Intel Asm": "punpcklqdq",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [64]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [64]"
    },
    {
      "name": "vzip1_u8",
      "full name": "uint8x8_t vzip1_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [8]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [8]"
    },
    {
      "name": "vzip1q_u8",
      "full name": "uint8x16_t vzip1q_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [8]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [8]"
    },
    {
      "name": "vzip1_u16",
      "full name": "uint16x4_t vzip1_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [16]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [16]"
    },
    {
      "name": "vzip1q_u16",
      "full name": "uint16x8_t vzip1q_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [16]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [16]"
    },
    {
      "name": "vzip1_u32",
      "full name": "uint32x2_t vzip1_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [32]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [32]"
    },
    {
      "name": "vzip1q_u32",
      "full name": "uint32x4_t vzip1q_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [32]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [32]"
    },
    {
      "name": "vzip1q_u64",
      "full name": "uint64x2_t vzip1q_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [64]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [64]"
    },
    {
      "name": "vzip1q_p64",
      "full name": "poly64x2_t vzip1q_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [64]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [64]"
    },
    {
      "name": "vzip1_f32",
      "full name": "float32x2_t vzip1_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [32]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [32]"
    },
    {
      "name": "vzip1q_f32",
      "full name": "float32x4_t vzip1q_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_unpacklo_ps",
      "Intel Asm": "unpcklps",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [32]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [32]"
    },
    {
      "name": "vzip1q_f64",
      "full name": "float64x2_t vzip1q_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_unpacklo_pd",
      "Intel Asm": "unpcklpd",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [64]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [64]"
    },
    {
      "name": "vzip1_p8",
      "full name": "poly8x8_t vzip1_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [8]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [8]"
    },
    {
      "name": "vzip1q_p8",
      "full name": "poly8x16_t vzip1q_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [8]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [8]"
    },
    {
      "name": "vzip1_p16",
      "full name": "poly16x4_t vzip1_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [16]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [16]"
    },
    {
      "name": "vzip1q_p16",
      "full name": "poly16x8_t vzip1q_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1",
      "function_en": "[vector] zip1 [16]",
      "function_cn": "[向量] 交错读取两个向量的低半部分元素 [16]"
    },
    {
      "name": "vzip2_s8",
      "full name": "int8x8_t vzip2_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "_mm_unpackhi_pi8",
      "Intel Asm": "punpckhbw",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [8]"
    },
    {
      "name": "vzip2q_s8",
      "full name": "int8x16_t vzip2q_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "_mm_unpackhi_epi8",
      "Intel Asm": "punpckhbw",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [8]"
    },
    {
      "name": "vzip2_s16",
      "full name": "int16x4_t vzip2_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "_mm_unpackhi_pi16",
      "Intel Asm": "punpcklbw",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [16]"
    },
    {
      "name": "vzip2q_s16",
      "full name": "int16x8_t vzip2q_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "_mm_unpackhi_epi16",
      "Intel Asm": "punpckhwd",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [16]"
    },
    {
      "name": "vzip2_s32",
      "full name": "int32x2_t vzip2_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "_mm_unpackhi_pi32",
      "Intel Asm": "punpckhdq",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [32]"
    },
    {
      "name": "vzip2q_s32",
      "full name": "int32x4_t vzip2q_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "_mm_unpackhi_epi32",
      "Intel Asm": "punpckhdq",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [32]"
    },
    {
      "name": "vzip2q_s64",
      "full name": "int64x2_t vzip2q_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "_mm_unpackhi_epi64",
      "Intel Asm": "punpckhqdq",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [64]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [64]"
    },
    {
      "name": "vzip2_u8",
      "full name": "uint8x8_t vzip2_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [8]"
    },
    {
      "name": "vzip2q_u8",
      "full name": "uint8x16_t vzip2q_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [8]"
    },
    {
      "name": "vzip2_u16",
      "full name": "uint16x4_t vzip2_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [16]"
    },
    {
      "name": "vzip2q_u16",
      "full name": "uint16x8_t vzip2q_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [16]"
    },
    {
      "name": "vzip2_u32",
      "full name": "uint32x2_t vzip2_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [32]"
    },
    {
      "name": "vzip2q_u32",
      "full name": "uint32x4_t vzip2q_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [32]"
    },
    {
      "name": "vzip2q_u64",
      "full name": "uint64x2_t vzip2q_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [64]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [64]"
    },
    {
      "name": "vzip2q_p64",
      "full name": "poly64x2_t vzip2q_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [64]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [64]"
    },
    {
      "name": "vzip2_f32",
      "full name": "float32x2_t vzip2_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [32]"
    },
    {
      "name": "vzip2q_f32",
      "full name": "float32x4_t vzip2q_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "_mm_unpackhi_ps",
      "Intel Asm": "unpckhps",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [32]"
    },
    {
      "name": "vzip2q_f64",
      "full name": "float64x2_t vzip2q_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "_mm_unpackhi_pd",
      "Intel Asm": "unpckhpd",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [64]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [64]"
    },
    {
      "name": "vzip2_p8",
      "full name": "poly8x8_t vzip2_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [8]"
    },
    {
      "name": "vzip2q_p8",
      "full name": "poly8x16_t vzip2q_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [8]"
    },
    {
      "name": "vzip2_p16",
      "full name": "poly16x4_t vzip2_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [16]"
    },
    {
      "name": "vzip2q_p16",
      "full name": "poly16x8_t vzip2q_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip2",
      "function_en": "[vector] zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量的高半部分元素 [16]"
    },
    {
      "name": "vuzp1_s8",
      "full name": "int8x8_t vuzp1_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [8]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp1q_s8",
      "full name": "int8x16_t vuzp1q_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [8]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp1_s16",
      "full name": "int16x4_t vuzp1_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [16]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp1q_s16",
      "full name": "int16x8_t vuzp1q_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [16]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp1_s32",
      "full name": "int32x2_t vuzp1_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [32]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp1q_s32",
      "full name": "int32x4_t vuzp1q_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [32]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp1q_s64",
      "full name": "int64x2_t vuzp1q_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [64]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp1_u8",
      "full name": "uint8x8_t vuzp1_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [8]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp1q_u8",
      "full name": "uint8x16_t vuzp1q_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [8]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp1_u16",
      "full name": "uint16x4_t vuzp1_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [16]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp1q_u16",
      "full name": "uint16x8_t vuzp1q_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [16]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp1_u32",
      "full name": "uint32x2_t vuzp1_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [32]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp1q_u32",
      "full name": "uint32x4_t vuzp1q_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [32]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp1q_u64",
      "full name": "uint64x2_t vuzp1q_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [64]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp1q_p64",
      "full name": "poly64x2_t vuzp1q_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [64]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp1_f32",
      "full name": "float32x2_t vuzp1_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [32]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp1q_f32",
      "full name": "float32x4_t vuzp1q_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [32]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp1q_f64",
      "full name": "float64x2_t vuzp1q_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [64]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp1_p8",
      "full name": "poly8x8_t vuzp1_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [8]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp1q_p8",
      "full name": "poly8x16_t vuzp1q_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [8]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp1_p16",
      "full name": "poly16x4_t vuzp1_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [16]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp1q_p16",
      "full name": "poly16x8_t vuzp1q_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1",
      "function_en": "[vector] uzp1 [16]",
      "function_cn": "[向量] 获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp2_s8",
      "full name": "int8x8_t vuzp2_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [8]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp2q_s8",
      "full name": "int8x16_t vuzp2q_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [8]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp2_s16",
      "full name": "int16x4_t vuzp2_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [16]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp2q_s16",
      "full name": "int16x8_t vuzp2q_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [16]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp2_s32",
      "full name": "int32x2_t vuzp2_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [32]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp2q_s32",
      "full name": "int32x4_t vuzp2q_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [32]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp2q_s64",
      "full name": "int64x2_t vuzp2q_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [64]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp2_u8",
      "full name": "uint8x8_t vuzp2_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [8]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp2q_u8",
      "full name": "uint8x16_t vuzp2q_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [8]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp2_u16",
      "full name": "uint16x4_t vuzp2_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [16]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp2q_u16",
      "full name": "uint16x8_t vuzp2q_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [16]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp2_u32",
      "full name": "uint32x2_t vuzp2_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [32]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp2q_u32",
      "full name": "uint32x4_t vuzp2q_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [32]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp2q_u64",
      "full name": "uint64x2_t vuzp2q_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [64]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp2q_p64",
      "full name": "poly64x2_t vuzp2q_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [64]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp2_f32",
      "full name": "float32x2_t vuzp2_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [32]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp2q_f32",
      "full name": "float32x4_t vuzp2q_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [32]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vuzp2q_f64",
      "full name": "float64x2_t vuzp2q_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [64]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vuzp2_p8",
      "full name": "poly8x8_t vuzp2_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [8]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp2q_p8",
      "full name": "poly8x16_t vuzp2q_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [8]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vuzp2_p16",
      "full name": "poly16x4_t vuzp2_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [16]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vuzp2q_p16",
      "full name": "poly16x8_t vuzp2q_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp2",
      "function_en": "[vector] uzp2 [16]",
      "function_cn": "[向量] 获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn1_s8",
      "full name": "int8x8_t vtrn1_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [8]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn1q_s8",
      "full name": "int8x16_t vtrn1q_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [8]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn1_s16",
      "full name": "int16x4_t vtrn1_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [16]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn1q_s16",
      "full name": "int16x8_t vtrn1q_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [16]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn1_s32",
      "full name": "int32x2_t vtrn1_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn1q_s32",
      "full name": "int32x4_t vtrn1q_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn1q_s64",
      "full name": "int64x2_t vtrn1q_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [64]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn1_u8",
      "full name": "uint8x8_t vtrn1_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [8]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn1q_u8",
      "full name": "uint8x16_t vtrn1q_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [8]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn1_u16",
      "full name": "uint16x4_t vtrn1_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [16]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn1q_u16",
      "full name": "uint16x8_t vtrn1q_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [16]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn1_u32",
      "full name": "uint32x2_t vtrn1_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn1q_u32",
      "full name": "uint32x4_t vtrn1q_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn1q_u64",
      "full name": "uint64x2_t vtrn1q_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [64]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn1q_p64",
      "full name": "poly64x2_t vtrn1q_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [64]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn1_f32",
      "full name": "float32x2_t vtrn1_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn1q_f32",
      "full name": "float32x4_t vtrn1q_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn1q_f64",
      "full name": "float64x2_t vtrn1q_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [64]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn1_p8",
      "full name": "poly8x8_t vtrn1_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [8]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn1q_p8",
      "full name": "poly8x16_t vtrn1q_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [8]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn1_p16",
      "full name": "poly16x4_t vtrn1_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [16]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn1q_p16",
      "full name": "poly16x8_t vtrn1q_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [16]",
      "function_cn": "[向量] 交错获取两个向量的偶数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn2_s8",
      "full name": "int8x8_t vtrn2_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [8]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn2q_s8",
      "full name": "int8x16_t vtrn2q_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [8]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn2_s16",
      "full name": "int16x4_t vtrn2_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [16]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn2q_s16",
      "full name": "int16x8_t vtrn2q_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [16]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn2_s32",
      "full name": "int32x2_t vtrn2_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [32]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn2q_s32",
      "full name": "int32x4_t vtrn2q_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [32]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn2q_s64",
      "full name": "int64x2_t vtrn2q_s64(int64x2_t a, int64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [64]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn2_u8",
      "full name": "uint8x8_t vtrn2_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [8]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn2q_u8",
      "full name": "uint8x16_t vtrn2q_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [8]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn2_u16",
      "full name": "uint16x4_t vtrn2_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [16]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn2q_u16",
      "full name": "uint16x8_t vtrn2q_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [16]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn2_u32",
      "full name": "uint32x2_t vtrn2_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [32]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn2q_u32",
      "full name": "uint32x4_t vtrn2q_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [32]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn2q_u64",
      "full name": "uint64x2_t vtrn2q_u64(uint64x2_t a, uint64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [64]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn2q_p64",
      "full name": "poly64x2_t vtrn2q_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [64]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn2_f32",
      "full name": "float32x2_t vtrn2_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [32]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn2q_f32",
      "full name": "float32x4_t vtrn2q_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [32]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn2q_f64",
      "full name": "float64x2_t vtrn2q_f64(float64x2_t a, float64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [64]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [64]"
    },
    {
      "name": "vtrn2_p8",
      "full name": "poly8x8_t vtrn2_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [8]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn2q_p8",
      "full name": "poly8x16_t vtrn2q_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [8]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn2_p16",
      "full name": "poly16x4_t vtrn2_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [16]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn2q_p16",
      "full name": "poly16x8_t vtrn2q_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn2",
      "function_en": "[vector] trn2 [16]",
      "function_cn": "[向量] 交错获取两个向量的奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtbl1_s8",
      "full name": "int8x8_t vtbl1_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl1_u8",
      "full name": "uint8x8_t vtbl1_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl1_p8",
      "full name": "poly8x8_t vtbl1_p8(poly8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx1_s8",
      "full name": "int8x8_t vtbx1_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "movi cmhs tbl bif",
      "function_en": "[vector] movi cmhs tbl bif [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx1_u8",
      "full name": "uint8x8_t vtbx1_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "movi cmhs tbl bif",
      "function_en": "[vector] movi cmhs tbl bif [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx1_p8",
      "full name": "poly8x8_t vtbx1_p8(poly8x8_t a, poly8x8_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "movi cmhs tbl bif",
      "function_en": "[vector] movi cmhs tbl bif [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl2_s8",
      "full name": "int8x8_t vtbl2_s8(int8x8x2_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl2_u8",
      "full name": "uint8x8_t vtbl2_u8(uint8x8x2_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl2_p8",
      "full name": "poly8x8_t vtbl2_p8(poly8x8x2_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl3_s8",
      "full name": "int8x8_t vtbl3_s8(int8x8x3_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl3_u8",
      "full name": "uint8x8_t vtbl3_u8(uint8x8x3_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl3_p8",
      "full name": "poly8x8_t vtbl3_p8(poly8x8x3_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl4_s8",
      "full name": "int8x8_t vtbl4_s8(int8x8x4_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl4_u8",
      "full name": "uint8x8_t vtbl4_u8(uint8x8x4_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbl4_p8",
      "full name": "poly8x8_t vtbl4_p8(poly8x8x4_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx2_s8",
      "full name": "int8x8_t vtbx2_s8(int8x8_t a, int8x8x2_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx2_u8",
      "full name": "uint8x8_t vtbx2_u8(uint8x8_t a, uint8x8x2_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx2_p8",
      "full name": "poly8x8_t vtbx2_p8(poly8x8_t a, poly8x8x2_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx3_s8",
      "full name": "int8x8_t vtbx3_s8(int8x8_t a, int8x8x3_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "movi cmhs tbl bif",
      "function_en": "[vector] movi cmhs tbl bif [8]",
      "function_cn": "[向量] movi [8]"
    },
    {
      "name": "vtbx3_u8",
      "full name": "uint8x8_t vtbx3_u8(uint8x8_t a, uint8x8x3_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "movi cmhs tbl bif",
      "function_en": "[vector] movi cmhs tbl bif [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx3_p8",
      "full name": "poly8x8_t vtbx3_p8(poly8x8_t a, poly8x8x3_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "movi cmhs tbl bif",
      "function_en": "[vector] movi cmhs tbl bif [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx4_s8",
      "full name": "int8x8_t vtbx4_s8(int8x8_t a, int8x8x4_t b, int8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx4_u8",
      "full name": "uint8x8_t vtbx4_u8(uint8x8_t a, uint8x8x4_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vtbx4_p8",
      "full name": "poly8x8_t vtbx4_p8(poly8x8_t a, poly8x8x4_t b, uint8x8_t c)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl1_s8",
      "full name": "int8x8_t vqtbl1_s8(int8x16_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl1q_s8",
      "full name": "int8x16_t vqtbl1q_s8(int8x16_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl1_u8",
      "full name": "uint8x8_t vqtbl1_u8(uint8x16_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl1q_u8",
      "full name": "uint8x16_t vqtbl1q_u8(uint8x16_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl1_p8",
      "full name": "poly8x8_t vqtbl1_p8(poly8x16_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl1q_p8",
      "full name": "poly8x16_t vqtbl1q_p8(poly8x16_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx1_s8",
      "full name": "int8x8_t vqtbx1_s8(int8x8_t a, int8x16_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx1q_s8",
      "full name": "int8x16_t vqtbx1q_s8(int8x16_t a, int8x16_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx1_u8",
      "full name": "uint8x8_t vqtbx1_u8(uint8x8_t a, uint8x16_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx1q_u8",
      "full name": "uint8x16_t vqtbx1q_u8(uint8x16_t a, uint8x16_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx1_p8",
      "full name": "poly8x8_t vqtbx1_p8(poly8x8_t a, poly8x16_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx1q_p8",
      "full name": "poly8x16_t vqtbx1q_p8(poly8x16_t a, poly8x16_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl2_s8",
      "full name": "int8x8_t vqtbl2_s8(int8x16x2_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl2q_s8",
      "full name": "int8x16_t vqtbl2q_s8(int8x16x2_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl2_u8",
      "full name": "uint8x8_t vqtbl2_u8(uint8x16x2_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl2q_u8",
      "full name": "uint8x16_t vqtbl2q_u8(uint8x16x2_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl2_p8",
      "full name": "poly8x8_t vqtbl2_p8(poly8x16x2_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl2q_p8",
      "full name": "poly8x16_t vqtbl2q_p8(poly8x16x2_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl3_s8",
      "full name": "int8x8_t vqtbl3_s8(int8x16x3_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl3q_s8",
      "full name": "int8x16_t vqtbl3q_s8(int8x16x3_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl3_u8",
      "full name": "uint8x8_t vqtbl3_u8(uint8x16x3_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl3q_u8",
      "full name": "uint8x16_t vqtbl3q_u8(uint8x16x3_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl3_p8",
      "full name": "poly8x8_t vqtbl3_p8(poly8x16x3_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl3q_p8",
      "full name": "poly8x16_t vqtbl3q_p8(poly8x16x3_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl4_s8",
      "full name": "int8x8_t vqtbl4_s8(int8x16x4_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl4q_s8",
      "full name": "int8x16_t vqtbl4q_s8(int8x16x4_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl4_u8",
      "full name": "uint8x8_t vqtbl4_u8(uint8x16x4_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl4q_u8",
      "full name": "uint8x16_t vqtbl4q_u8(uint8x16x4_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl4_p8",
      "full name": "poly8x8_t vqtbl4_p8(poly8x16x4_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbl4q_p8",
      "full name": "poly8x16_t vqtbl4q_p8(poly8x16x4_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbl",
      "function_en": "[vector] tbl [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx2_s8",
      "full name": "int8x8_t vqtbx2_s8(int8x8_t a, int8x16x2_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx2q_s8",
      "full name": "int8x16_t vqtbx2q_s8(int8x16_t a, int8x16x2_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx2_u8",
      "full name": "uint8x8_t vqtbx2_u8(uint8x8_t a, uint8x16x2_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx2q_u8",
      "full name": "uint8x16_t vqtbx2q_u8(uint8x16_t a, uint8x16x2_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx2_p8",
      "full name": "poly8x8_t vqtbx2_p8(poly8x8_t a, poly8x16x2_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx2q_p8",
      "full name": "poly8x16_t vqtbx2q_p8(poly8x16_t a, poly8x16x2_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx3_s8",
      "full name": "int8x8_t vqtbx3_s8(int8x8_t a, int8x16x3_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx3q_s8",
      "full name": "int8x16_t vqtbx3q_s8(int8x16_t a, int8x16x3_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx3_u8",
      "full name": "uint8x8_t vqtbx3_u8(uint8x8_t a, uint8x16x3_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx3q_u8",
      "full name": "uint8x16_t vqtbx3q_u8(uint8x16_t a, uint8x16x3_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx3_p8",
      "full name": "poly8x8_t vqtbx3_p8(poly8x8_t a, poly8x16x3_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx3q_p8",
      "full name": "poly8x16_t vqtbx3q_p8(poly8x16_t a, poly8x16x3_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx4_s8",
      "full name": "int8x8_t vqtbx4_s8(int8x8_t a, int8x16x4_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx4q_s8",
      "full name": "int8x16_t vqtbx4q_s8(int8x16_t a, int8x16x4_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx4_u8",
      "full name": "uint8x8_t vqtbx4_u8(uint8x8_t a, uint8x16x4_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx4q_u8",
      "full name": "uint8x16_t vqtbx4q_u8(uint8x16_t a, uint8x16x4_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx4_p8",
      "full name": "poly8x8_t vqtbx4_p8(poly8x8_t a, poly8x16x4_t t, uint8x8_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vqtbx4q_p8",
      "full name": "poly8x16_t vqtbx4q_p8(poly8x16_t a, poly8x16x4_t t, uint8x16_t idx)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "tbx",
      "function_en": "[vector] tbx [8]",
      "function_cn": "[向量] 表向量查找 [8]"
    },
    {
      "name": "vget_lane_u8",
      "full name": "uint8_t vget_lane_u8(uint8x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [8]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [8]"
    },
    {
      "name": "vget_lane_u16",
      "full name": "uint16_t vget_lane_u16(uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [16]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [16]"
    },
    {
      "name": "vget_lane_u32",
      "full name": "uint32_t vget_lane_u32(uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [32]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [32]"
    },
    {
      "name": "vget_lane_u64",
      "full name": "uint64_t vget_lane_u64(uint64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [64]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [64]"
    },
    {
      "name": "vget_lane_p64",
      "full name": "poly64_t vget_lane_p64(poly64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [64]",
      "function_cn": "[向量] 提取向量指定元素 [64]"
    },
    {
      "name": "vget_lane_s8",
      "full name": "int8_t vget_lane_s8(int8x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smov",
      "function_en": "[vector] smov [8]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [8]"
    },
    {
      "name": "vget_lane_s16",
      "full name": "int16_t vget_lane_s16(int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smov",
      "function_en": "[vector] smov [16]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [16]"
    },
    {
      "name": "vget_lane_s32",
      "full name": "int32_t vget_lane_s32(int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smov",
      "function_en": "[vector] smov [32]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [32]"
    },
    {
      "name": "vget_lane_s64",
      "full name": "int64_t vget_lane_s64(int64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [64]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [64]"
    },
    {
      "name": "vget_lane_p8",
      "full name": "poly8_t vget_lane_p8(poly8x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [8]",
      "function_cn": "[向量] 提取向量指定元素 [8]"
    },
    {
      "name": "vget_lane_p16",
      "full name": "poly16_t vget_lane_p16(poly16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [16]",
      "function_cn": "[向量] 提取向量指定元素 [16]"
    },
    {
      "name": "vget_lane_f32",
      "full name": "float32_t vget_lane_f32(float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 浮点类型提取向量指定元素 [32]"
    },
    {
      "name": "vget_lane_f64",
      "full name": "float64_t vget_lane_f64(float64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 浮点类型提取向量指定元素 [64]"
    },
    {
      "name": "vgetq_lane_u8",
      "full name": "uint8_t vgetq_lane_u8(uint8x16_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [8]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [8]"
    },
    {
      "name": "vgetq_lane_u16",
      "full name": "uint16_t vgetq_lane_u16(uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [16]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [16]"
    },
    {
      "name": "vgetq_lane_u32",
      "full name": "uint32_t vgetq_lane_u32(uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [32]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [32]"
    },
    {
      "name": "vgetq_lane_u64",
      "full name": "uint64_t vgetq_lane_u64(uint64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [64]",
      "function_cn": "[向量] 无符号整数类型提取向量指定元素 [64]"
    },
    {
      "name": "vgetq_lane_p64",
      "full name": "poly64_t vgetq_lane_p64(poly64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [64]",
      "function_cn": "[向量] 提取向量指定元素 [64]"
    },
    {
      "name": "vgetq_lane_s8",
      "full name": "int8_t vgetq_lane_s8(int8x16_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smov",
      "function_en": "[vector] smov [8]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [8]"
    },
    {
      "name": "vgetq_lane_s16",
      "full name": "int16_t vgetq_lane_s16(int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smov",
      "function_en": "[vector] smov [16]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [16]"
    },
    {
      "name": "vgetq_lane_s32",
      "full name": "int32_t vgetq_lane_s32(int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "smov",
      "function_en": "[vector] smov [32]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [32]"
    },
    {
      "name": "vgetq_lane_s64",
      "full name": "int64_t vgetq_lane_s64(int64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [64]",
      "function_cn": "[向量] 有符号整数类型提取向量指定元素 [64]"
    },
    {
      "name": "vgetq_lane_p8",
      "full name": "poly8_t vgetq_lane_p8(poly8x16_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [8]",
      "function_cn": "[向量] 提取向量指定元素 [8]"
    },
    {
      "name": "vgetq_lane_p16",
      "full name": "poly16_t vgetq_lane_p16(poly16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "umov",
      "function_en": "[vector] umov [16]",
      "function_cn": "[向量] 提取向量指定元素 [16]"
    },
    {
      "name": "vget_lane_f16",
      "full name": "float16_t vget_lane_f16(float16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 浮点类型提取向量指定元素 [16]"
    },
    {
      "name": "vgetq_lane_f16",
      "full name": "float16_t vgetq_lane_f16(float16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [16]",
      "function_cn": "[向量] 浮点类型提取向量指定元素 [16]"
    },
    {
      "name": "vgetq_lane_f32",
      "full name": "float32_t vgetq_lane_f32(float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [32]",
      "function_cn": "[向量] 浮点类型提取向量指定元素 [32]"
    },
    {
      "name": "vgetq_lane_f64",
      "full name": "float64_t vgetq_lane_f64(float64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "dup",
      "function_en": "[vector] dup [64]",
      "function_cn": "[向量] 浮点类型提取向量指定元素 [64]"
    },
    {
      "name": "vset_lane_u8",
      "full name": "uint8x8_t vset_lane_u8(uint8_t a, uint8x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [8]"
    },
    {
      "name": "vset_lane_u16",
      "full name": "uint16x4_t vset_lane_u16(uint16_t a, uint16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vset_lane_u32",
      "full name": "uint32x2_t vset_lane_u32(uint32_t a, uint32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [32]"
    },
    {
      "name": "vset_lane_u64",
      "full name": "uint64x1_t vset_lane_u64(uint64_t a, uint64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vset_lane_p64",
      "full name": "poly64x1_t vset_lane_p64(poly64_t a, poly64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] ins [64]"
    },
    {
      "name": "vset_lane_s8",
      "full name": "int8x8_t vset_lane_s8(int8_t a, int8x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [8]"
    },
    {
      "name": "vset_lane_s16",
      "full name": "int16x4_t vset_lane_s16(int16_t a, int16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vset_lane_s32",
      "full name": "int32x2_t vset_lane_s32(int32_t a, int32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [32]"
    },
    {
      "name": "vset_lane_s64",
      "full name": "int64x1_t vset_lane_s64(int64_t a, int64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vset_lane_p8",
      "full name": "poly8x8_t vset_lane_p8(poly8_t a, poly8x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [8]"
    },
    {
      "name": "vset_lane_p16",
      "full name": "poly16x4_t vset_lane_p16(poly16_t a, poly16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vset_lane_f16",
      "full name": "float16x4_t vset_lane_f16(float16_t a, float16x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vsetq_lane_f16",
      "full name": "float16x8_t vsetq_lane_f16(float16_t a, float16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vset_lane_f32",
      "full name": "float32x2_t vset_lane_f32(float32_t a, float32x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [32]"
    },
    {
      "name": "vset_lane_f64",
      "full name": "float64x1_t vset_lane_f64(float64_t a, float64x1_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vsetq_lane_u8",
      "full name": "uint8x16_t vsetq_lane_u8(uint8_t a, uint8x16_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [8]"
    },
    {
      "name": "vsetq_lane_u16",
      "full name": "uint16x8_t vsetq_lane_u16(uint16_t a, uint16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vsetq_lane_u32",
      "full name": "uint32x4_t vsetq_lane_u32(uint32_t a, uint32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [32]"
    },
    {
      "name": "vsetq_lane_u64",
      "full name": "uint64x2_t vsetq_lane_u64(uint64_t a, uint64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vsetq_lane_p64",
      "full name": "poly64x2_t vsetq_lane_p64(poly64_t a, poly64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vsetq_lane_s8",
      "full name": "int8x16_t vsetq_lane_s8(int8_t a, int8x16_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [8]"
    },
    {
      "name": "vsetq_lane_s16",
      "full name": "int16x8_t vsetq_lane_s16(int16_t a, int16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vsetq_lane_s32",
      "full name": "int32x4_t vsetq_lane_s32(int32_t a, int32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [32]"
    },
    {
      "name": "vsetq_lane_s64",
      "full name": "int64x2_t vsetq_lane_s64(int64_t a, int64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vsetq_lane_p8",
      "full name": "poly8x16_t vsetq_lane_p8(poly8_t a, poly8x16_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [8]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [8]"
    },
    {
      "name": "vsetq_lane_p16",
      "full name": "poly16x8_t vsetq_lane_p16(poly16_t a, poly16x8_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [16]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [16]"
    },
    {
      "name": "vsetq_lane_f32",
      "full name": "float32x4_t vsetq_lane_f32(float32_t a, float32x4_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [32]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [32]"
    },
    {
      "name": "vsetq_lane_f64",
      "full name": "float64x2_t vsetq_lane_f64(float64_t a, float64x2_t v, const int lane)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ins",
      "function_en": "[vector] ins [64]",
      "function_cn": "[向量] 将一个数拷贝到向量中指定的位置 [64]"
    },
    {
      "name": "vrecpxs_f32",
      "full name": "float32_t vrecpxs_f32(float32_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecpx",
      "function_en": "[vector] frecpx [32]",
      "function_cn": "[向量] 浮点倒数平方根 [32]"
    },
    {
      "name": "vrecpxd_f64",
      "full name": "float64_t vrecpxd_f64(float64_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "frecpx",
      "function_en": "[vector] frecpx [64]",
      "function_cn": "[向量] 浮点倒数平方根 [64]"
    },
    {
      "name": "vfma_n_f32",
      "full name": "float32x2_t vfma_n_f32(float32x2_t a, float32x2_t b, float32_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 浮点类型乘加 [32]"
    },
    {
      "name": "vfmaq_n_f32",
      "full name": "float32x4_t vfmaq_n_f32(float32x4_t a, float32x4_t b, float32_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [32]",
      "function_cn": "[向量] 浮点类型乘加 [32]"
    },
    {
      "name": "vfms_n_f32",
      "full name": "float32x2_t vfms_n_f32(float32x2_t a, float32x2_t b, float32_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 浮点类型乘减 [32]"
    },
    {
      "name": "vfmsq_n_f32",
      "full name": "float32x4_t vfmsq_n_f32(float32x4_t a, float32x4_t b, float32_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [32]",
      "function_cn": "[向量] 浮点类型乘减 [32]"
    },
    {
      "name": "vfma_n_f64",
      "full name": "float64x1_t vfma_n_f64(float64x1_t a, float64x1_t b, float64_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmadd",
      "function_en": "[vector] fmadd [64]",
      "function_cn": "[向量] 浮点类型乘加 [64]"
    },
    {
      "name": "vfmaq_n_f64",
      "full name": "float64x2_t vfmaq_n_f64(float64x2_t a, float64x2_t b, float64_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmla",
      "function_en": "[vector] fmla [64]",
      "function_cn": "[向量] 浮点类型乘加 [64]"
    },
    {
      "name": "vfms_n_f64",
      "full name": "float64x1_t vfms_n_f64(float64x1_t a, float64x1_t b, float64_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmsub",
      "function_en": "[vector] fmsub [64]",
      "function_cn": "[向量] 浮点类型乘减 [64]"
    },
    {
      "name": "vfmsq_n_f64",
      "full name": "float64x2_t vfmsq_n_f64(float64x2_t a, float64x2_t b, float64_t n)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "fmls",
      "function_en": "[vector] fmls [64]",
      "function_cn": "[向量] 浮点类型乘减 [64]"
    },
    {
      "name": "vtrn_s8",
      "full name": "int8x8x2_t vtrn_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [8]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn_s16",
      "full name": "int16x4x2_t vtrn_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [16]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn_u8",
      "full name": "uint8x8x2_t vtrn_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [8]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn_u16",
      "full name": "uint16x4x2_t vtrn_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [16]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn_p8",
      "full name": "poly8x8x2_t vtrn_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [8]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrn_p16",
      "full name": "poly16x4x2_t vtrn_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [16]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrn_s32",
      "full name": "int32x2x2_t vtrn_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [32]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn_f32",
      "full name": "float32x2x2_t vtrn_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1",
      "function_en": "[vector] trn1 [32]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrn_u32",
      "full name": "uint32x2x2_t vtrn_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [32]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrnq_s8",
      "full name": "int8x16x2_t vtrnq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [8]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrnq_s16",
      "full name": "int16x8x2_t vtrnq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [16]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrnq_s32",
      "full name": "int32x4x2_t vtrnq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [32]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrnq_f32",
      "full name": "float32x4x2_t vtrnq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [32]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrnq_u8",
      "full name": "uint8x16x2_t vtrnq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [8]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrnq_u16",
      "full name": "uint16x8x2_t vtrnq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [16]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vtrnq_u32",
      "full name": "uint32x4x2_t vtrnq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [32]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [32]"
    },
    {
      "name": "vtrnq_p8",
      "full name": "poly8x16x2_t vtrnq_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [8]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [8]"
    },
    {
      "name": "vtrnq_p16",
      "full name": "poly16x8x2_t vtrnq_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "trn1 trn2",
      "function_en": "[vector] trn1 trn2 [16]",
      "function_cn": "[向量] 交错获取偶数索引元素，再交错获取奇数索引元素(索引从0开始) [16]"
    },
    {
      "name": "vzip_s8",
      "full name": "int8x8x2_t vzip_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [8]"
    },
    {
      "name": "vzip_s16",
      "full name": "int16x4x2_t vzip_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [16]"
    },
    {
      "name": "vzip_u8",
      "full name": "uint8x8x2_t vzip_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [8]"
    },
    {
      "name": "vzip_u16",
      "full name": "uint16x4x2_t vzip_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [16]"
    },
    {
      "name": "vzip_p8",
      "full name": "poly8x8x2_t vzip_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [8]"
    },
    {
      "name": "vzip_p16",
      "full name": "poly16x4x2_t vzip_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [16]"
    },
    {
      "name": "vzip_s32",
      "full name": "int32x2x2_t vzip_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [32]"
    },
    {
      "name": "vzip_f32",
      "full name": "float32x2x2_t vzip_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [32]"
    },
    {
      "name": "vzip_u32",
      "full name": "uint32x2x2_t vzip_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [32]"
    },
    {
      "name": "vzipq_s8",
      "full name": "int8x16x2_t vzipq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [8]"
    },
    {
      "name": "vzipq_s16",
      "full name": "int16x8x2_t vzipq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [16]"
    },
    {
      "name": "vzipq_s32",
      "full name": "int32x4x2_t vzipq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [32]"
    },
    {
      "name": "vzipq_f32",
      "full name": "float32x4x2_t vzipq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [32]"
    },
    {
      "name": "vzipq_u8",
      "full name": "uint8x16x2_t vzipq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [8]"
    },
    {
      "name": "vzipq_u16",
      "full name": "uint16x8x2_t vzipq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [16]"
    },
    {
      "name": "vzipq_u32",
      "full name": "uint32x4x2_t vzipq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [32]",
      "function_cn": "[向量] 交错读取两个向量中的元素[32]"
    },
    {
      "name": "vzipq_p8",
      "full name": "poly8x16x2_t vzipq_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [8]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [8]"
    },
    {
      "name": "vzipq_p16",
      "full name": "poly16x8x2_t vzipq_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "zip1 zip2",
      "function_en": "[vector] zip1 zip2 [16]",
      "function_cn": "[向量] 交错读取两个向量中的元素 [16]"
    },
    {
      "name": "vuzp_s8",
      "full name": "int8x8x2_t vuzp_s8(int8x8_t a, int8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [8]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [8]"
    },
    {
      "name": "vuzp_s16",
      "full name": "int16x4x2_t vuzp_s16(int16x4_t a, int16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [16]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [16]"
    },
    {
      "name": "vuzp_s32",
      "full name": "int32x2x2_t vuzp_s32(int32x2_t a, int32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [32]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [32]"
    },
    {
      "name": "vuzp_f32",
      "full name": "float32x2x2_t vuzp_f32(float32x2_t a, float32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [32]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [32]"
    },
    {
      "name": "vuzp_u8",
      "full name": "uint8x8x2_t vuzp_u8(uint8x8_t a, uint8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [8]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [8]"
    },
    {
      "name": "vuzp_u16",
      "full name": "uint16x4x2_t vuzp_u16(uint16x4_t a, uint16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [16]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [16]"
    },
    {
      "name": "vuzp_u32",
      "full name": "uint32x2x2_t vuzp_u32(uint32x2_t a, uint32x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [32]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [32]"
    },
    {
      "name": "vuzp_p8",
      "full name": "poly8x8x2_t vuzp_p8(poly8x8_t a, poly8x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [8]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [8]"
    },
    {
      "name": "vuzp_p16",
      "full name": "poly16x4x2_t vuzp_p16(poly16x4_t a, poly16x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [16]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [16]"
    },
    {
      "name": "vuzpq_s8",
      "full name": "int8x16x2_t vuzpq_s8(int8x16_t a, int8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [8]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [8]"
    },
    {
      "name": "vuzpq_s16",
      "full name": "int16x8x2_t vuzpq_s16(int16x8_t a, int16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [16]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [16]"
    },
    {
      "name": "vuzpq_s32",
      "full name": "int32x4x2_t vuzpq_s32(int32x4_t a, int32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [32]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [32]"
    },
    {
      "name": "vuzpq_f32",
      "full name": "float32x4x2_t vuzpq_f32(float32x4_t a, float32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [32]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [32]"
    },
    {
      "name": "vuzpq_u8",
      "full name": "uint8x16x2_t vuzpq_u8(uint8x16_t a, uint8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [8]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [8]"
    },
    {
      "name": "vuzpq_u16",
      "full name": "uint16x8x2_t vuzpq_u16(uint16x8_t a, uint16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [16]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [16]"
    },
    {
      "name": "vuzpq_u32",
      "full name": "uint32x4x2_t vuzpq_u32(uint32x4_t a, uint32x4_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [32]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [32]"
    },
    {
      "name": "vuzpq_p8",
      "full name": "poly8x16x2_t vuzpq_p8(poly8x16_t a, poly8x16_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [8]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [8]"
    },
    {
      "name": "vuzpq_p16",
      "full name": "poly16x8x2_t vuzpq_p16(poly16x8_t a, poly16x8_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "uzp1 uzp2",
      "function_en": "[vector] uzp1 uzp2 [16]",
      "function_cn": "[向量] 读取两个向量中的偶数索引再读取奇数索引(索引从0开始) [16]"
    },
    {
      "name": "vreinterpret_s16_s8",
      "full name": "int16x4_t vreinterpret_s16_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP [8]",
      "function_cn": "[向量] 空操作 [8]"
    },
    {
      "name": "vreinterpret_s32_s8",
      "full name": "int32x2_t vreinterpret_s32_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f32_s8",
      "full name": "float32x2_t vreinterpret_f32_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u8_s8",
      "full name": "uint8x8_t vreinterpret_u8_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u16_s8",
      "full name": "uint16x4_t vreinterpret_u16_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u32_s8",
      "full name": "uint32x2_t vreinterpret_u32_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p8_s8",
      "full name": "poly8x8_t vreinterpret_p8_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p16_s8",
      "full name": "poly16x4_t vreinterpret_p16_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u64_s8",
      "full name": "uint64x1_t vreinterpret_u64_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s64_s8",
      "full name": "int64x1_t vreinterpret_s64_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f64_s8",
      "full name": "float64x1_t vreinterpret_f64_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p64_s8",
      "full name": "poly64x1_t vreinterpret_p64_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f16_s8",
      "full name": "float16x4_t vreinterpret_f16_s8(int8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s8_s16",
      "full name": "int8x8_t vreinterpret_s8_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s32_s16",
      "full name": "int32x2_t vreinterpret_s32_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f32_s16",
      "full name": "float32x2_t vreinterpret_f32_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u8_s16",
      "full name": "uint8x8_t vreinterpret_u8_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u16_s16",
      "full name": "uint16x4_t vreinterpret_u16_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u32_s16",
      "full name": "uint32x2_t vreinterpret_u32_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p8_s16",
      "full name": "poly8x8_t vreinterpret_p8_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p16_s16",
      "full name": "poly16x4_t vreinterpret_p16_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u64_s16",
      "full name": "uint64x1_t vreinterpret_u64_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s64_s16",
      "full name": "int64x1_t vreinterpret_s64_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f64_s16",
      "full name": "float64x1_t vreinterpret_f64_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p64_s16",
      "full name": "poly64x1_t vreinterpret_p64_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f16_s16",
      "full name": "float16x4_t vreinterpret_f16_s16(int16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s8_s32",
      "full name": "int8x8_t vreinterpret_s8_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s16_s32",
      "full name": "int16x4_t vreinterpret_s16_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f32_s32",
      "full name": "float32x2_t vreinterpret_f32_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u8_s32",
      "full name": "uint8x8_t vreinterpret_u8_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u16_s32",
      "full name": "uint16x4_t vreinterpret_u16_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u32_s32",
      "full name": "uint32x2_t vreinterpret_u32_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p8_s32",
      "full name": "poly8x8_t vreinterpret_p8_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p16_s32",
      "full name": "poly16x4_t vreinterpret_p16_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u64_s32",
      "full name": "uint64x1_t vreinterpret_u64_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s64_s32",
      "full name": "int64x1_t vreinterpret_s64_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f64_s32",
      "full name": "float64x1_t vreinterpret_f64_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p64_s32",
      "full name": "poly64x1_t vreinterpret_p64_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f16_s32",
      "full name": "float16x4_t vreinterpret_f16_s32(int32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s8_f32",
      "full name": "int8x8_t vreinterpret_s8_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s16_f32",
      "full name": "int16x4_t vreinterpret_s16_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s32_f32",
      "full name": "int32x2_t vreinterpret_s32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u8_f32",
      "full name": "uint8x8_t vreinterpret_u8_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u16_f32",
      "full name": "uint16x4_t vreinterpret_u16_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u32_f32",
      "full name": "uint32x2_t vreinterpret_u32_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p8_f32",
      "full name": "poly8x8_t vreinterpret_p8_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p16_f32",
      "full name": "poly16x4_t vreinterpret_p16_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u64_f32",
      "full name": "uint64x1_t vreinterpret_u64_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s64_f32",
      "full name": "int64x1_t vreinterpret_s64_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f64_f32",
      "full name": "float64x1_t vreinterpret_f64_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p64_f32",
      "full name": "poly64x1_t vreinterpret_p64_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p64_f64",
      "full name": "poly64x1_t vreinterpret_p64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f16_f32",
      "full name": "float16x4_t vreinterpret_f16_f32(float32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s8_u8",
      "full name": "int8x8_t vreinterpret_s8_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s16_u8",
      "full name": "int16x4_t vreinterpret_s16_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s32_u8",
      "full name": "int32x2_t vreinterpret_s32_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f32_u8",
      "full name": "float32x2_t vreinterpret_f32_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u16_u8",
      "full name": "uint16x4_t vreinterpret_u16_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u32_u8",
      "full name": "uint32x2_t vreinterpret_u32_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p8_u8",
      "full name": "poly8x8_t vreinterpret_p8_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p16_u8",
      "full name": "poly16x4_t vreinterpret_p16_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u64_u8",
      "full name": "uint64x1_t vreinterpret_u64_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s64_u8",
      "full name": "int64x1_t vreinterpret_s64_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f64_u8",
      "full name": "float64x1_t vreinterpret_f64_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p64_u8",
      "full name": "poly64x1_t vreinterpret_p64_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f16_u8",
      "full name": "float16x4_t vreinterpret_f16_u8(uint8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s8_u16",
      "full name": "int8x8_t vreinterpret_s8_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s16_u16",
      "full name": "int16x4_t vreinterpret_s16_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s32_u16",
      "full name": "int32x2_t vreinterpret_s32_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f32_u16",
      "full name": "float32x2_t vreinterpret_f32_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u8_u16",
      "full name": "uint8x8_t vreinterpret_u8_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u32_u16",
      "full name": "uint32x2_t vreinterpret_u32_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p8_u16",
      "full name": "poly8x8_t vreinterpret_p8_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p16_u16",
      "full name": "poly16x4_t vreinterpret_p16_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u64_u16",
      "full name": "uint64x1_t vreinterpret_u64_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s64_u16",
      "full name": "int64x1_t vreinterpret_s64_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f64_u16",
      "full name": "float64x1_t vreinterpret_f64_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p64_u16",
      "full name": "poly64x1_t vreinterpret_p64_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f16_u16",
      "full name": "float16x4_t vreinterpret_f16_u16(uint16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s8_u32",
      "full name": "int8x8_t vreinterpret_s8_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s16_u32",
      "full name": "int16x4_t vreinterpret_s16_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s32_u32",
      "full name": "int32x2_t vreinterpret_s32_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f32_u32",
      "full name": "float32x2_t vreinterpret_f32_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u8_u32",
      "full name": "uint8x8_t vreinterpret_u8_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u16_u32",
      "full name": "uint16x4_t vreinterpret_u16_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p8_u32",
      "full name": "poly8x8_t vreinterpret_p8_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p16_u32",
      "full name": "poly16x4_t vreinterpret_p16_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_u64_u32",
      "full name": "uint64x1_t vreinterpret_u64_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s64_u32",
      "full name": "int64x1_t vreinterpret_s64_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f64_u32",
      "full name": "float64x1_t vreinterpret_f64_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_p64_u32",
      "full name": "poly64x1_t vreinterpret_p64_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_f16_u32",
      "full name": "float16x4_t vreinterpret_f16_u32(uint32x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpret_s8_p8",
      "full name": "int8x8_t vreinterpret_s8_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s16_p8",
      "full name": "int16x4_t vreinterpret_s16_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s32_p8",
      "full name": "int32x2_t vreinterpret_s32_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f32_p8",
      "full name": "float32x2_t vreinterpret_f32_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u8_p8",
      "full name": "uint8x8_t vreinterpret_u8_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u16_p8",
      "full name": "uint16x4_t vreinterpret_u16_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u32_p8",
      "full name": "uint32x2_t vreinterpret_u32_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p16_p8",
      "full name": "poly16x4_t vreinterpret_p16_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_u64_p8",
      "full name": "uint64x1_t vreinterpret_u64_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s64_p8",
      "full name": "int64x1_t vreinterpret_s64_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f64_p8",
      "full name": "float64x1_t vreinterpret_f64_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_p64_p8",
      "full name": "poly64x1_t vreinterpret_p64_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_f16_p8",
      "full name": "float16x4_t vreinterpret_f16_p8(poly8x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpret_s8_p16",
      "full name": "int8x8_t vreinterpret_s8_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s16_p16",
      "full name": "int16x4_t vreinterpret_s16_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s32_p16",
      "full name": "int32x2_t vreinterpret_s32_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f32_p16",
      "full name": "float32x2_t vreinterpret_f32_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u8_p16",
      "full name": "uint8x8_t vreinterpret_u8_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u16_p16",
      "full name": "uint16x4_t vreinterpret_u16_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u32_p16",
      "full name": "uint32x2_t vreinterpret_u32_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p8_p16",
      "full name": "poly8x8_t vreinterpret_p8_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u64_p16",
      "full name": "uint64x1_t vreinterpret_u64_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s64_p16",
      "full name": "int64x1_t vreinterpret_s64_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f64_p16",
      "full name": "float64x1_t vreinterpret_f64_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p64_p16",
      "full name": "poly64x1_t vreinterpret_p64_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f16_p16",
      "full name": "float16x4_t vreinterpret_f16_p16(poly16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s8_u64",
      "full name": "int8x8_t vreinterpret_s8_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s16_u64",
      "full name": "int16x4_t vreinterpret_s16_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s32_u64",
      "full name": "int32x2_t vreinterpret_s32_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f32_u64",
      "full name": "float32x2_t vreinterpret_f32_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u8_u64",
      "full name": "uint8x8_t vreinterpret_u8_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u16_u64",
      "full name": "uint16x4_t vreinterpret_u16_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u32_u64",
      "full name": "uint32x2_t vreinterpret_u32_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p8_u64",
      "full name": "poly8x8_t vreinterpret_p8_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p16_u64",
      "full name": "poly16x4_t vreinterpret_p16_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s64_u64",
      "full name": "int64x1_t vreinterpret_s64_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f64_u64",
      "full name": "float64x1_t vreinterpret_f64_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p64_u64",
      "full name": "poly64x1_t vreinterpret_p64_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f16_u64",
      "full name": "float16x4_t vreinterpret_f16_u64(uint64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s8_s64",
      "full name": "int8x8_t vreinterpret_s8_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s16_s64",
      "full name": "int16x4_t vreinterpret_s16_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s32_s64",
      "full name": "int32x2_t vreinterpret_s32_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f32_s64",
      "full name": "float32x2_t vreinterpret_f32_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u8_s64",
      "full name": "uint8x8_t vreinterpret_u8_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u16_s64",
      "full name": "uint16x4_t vreinterpret_u16_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u32_s64",
      "full name": "uint32x2_t vreinterpret_u32_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p8_s64",
      "full name": "poly8x8_t vreinterpret_p8_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p16_s64",
      "full name": "poly16x4_t vreinterpret_p16_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u64_s64",
      "full name": "uint64x1_t vreinterpret_u64_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f64_s64",
      "full name": "float64x1_t vreinterpret_f64_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f16_s64",
      "full name": "float16x4_t vreinterpret_f16_s64(int64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s8_f16",
      "full name": "int8x8_t vreinterpret_s8_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s16_f16",
      "full name": "int16x4_t vreinterpret_s16_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s32_f16",
      "full name": "int32x2_t vreinterpret_s32_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f32_f16",
      "full name": "float32x2_t vreinterpret_f32_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u8_f16",
      "full name": "uint8x8_t vreinterpret_u8_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u16_f16",
      "full name": "uint16x4_t vreinterpret_u16_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u32_f16",
      "full name": "uint32x2_t vreinterpret_u32_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p8_f16",
      "full name": "poly8x8_t vreinterpret_p8_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p16_f16",
      "full name": "poly16x4_t vreinterpret_p16_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_u64_f16",
      "full name": "uint64x1_t vreinterpret_u64_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s64_f16",
      "full name": "int64x1_t vreinterpret_s64_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_f64_f16",
      "full name": "float64x1_t vreinterpret_f64_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_p64_f16",
      "full name": "poly64x1_t vreinterpret_p64_f16(float16x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s16_s8",
      "full name": "int16x8_t vreinterpretq_s16_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s32_s8",
      "full name": "int32x4_t vreinterpretq_s32_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f32_s8",
      "full name": "float32x4_t vreinterpretq_f32_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u8_s8",
      "full name": "uint8x16_t vreinterpretq_u8_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u16_s8",
      "full name": "uint16x8_t vreinterpretq_u16_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u32_s8",
      "full name": "uint32x4_t vreinterpretq_u32_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p8_s8",
      "full name": "poly8x16_t vreinterpretq_p8_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p16_s8",
      "full name": "poly16x8_t vreinterpretq_p16_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u64_s8",
      "full name": "uint64x2_t vreinterpretq_u64_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s64_s8",
      "full name": "int64x2_t vreinterpretq_s64_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f64_s8",
      "full name": "float64x2_t vreinterpretq_f64_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p64_s8",
      "full name": "poly64x2_t vreinterpretq_p64_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p128_s8",
      "full name": "poly128_t vreinterpretq_p128_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f16_s8",
      "full name": "float16x8_t vreinterpretq_f16_s8(int8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s8_s16",
      "full name": "int8x16_t vreinterpretq_s8_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s32_s16",
      "full name": "int32x4_t vreinterpretq_s32_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f32_s16",
      "full name": "float32x4_t vreinterpretq_f32_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u8_s16",
      "full name": "uint8x16_t vreinterpretq_u8_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u16_s16",
      "full name": "uint16x8_t vreinterpretq_u16_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u32_s16",
      "full name": "uint32x4_t vreinterpretq_u32_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p8_s16",
      "full name": "poly8x16_t vreinterpretq_p8_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p16_s16",
      "full name": "poly16x8_t vreinterpretq_p16_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u64_s16",
      "full name": "uint64x2_t vreinterpretq_u64_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s64_s16",
      "full name": "int64x2_t vreinterpretq_s64_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f64_s16",
      "full name": "float64x2_t vreinterpretq_f64_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p64_s16",
      "full name": "poly64x2_t vreinterpretq_p64_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p128_s16",
      "full name": "poly128_t vreinterpretq_p128_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f16_s16",
      "full name": "float16x8_t vreinterpretq_f16_s16(int16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s8_s32",
      "full name": "int8x16_t vreinterpretq_s8_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s16_s32",
      "full name": "int16x8_t vreinterpretq_s16_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f32_s32",
      "full name": "float32x4_t vreinterpretq_f32_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u8_s32",
      "full name": "uint8x16_t vreinterpretq_u8_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u16_s32",
      "full name": "uint16x8_t vreinterpretq_u16_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u32_s32",
      "full name": "uint32x4_t vreinterpretq_u32_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p8_s32",
      "full name": "poly8x16_t vreinterpretq_p8_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p16_s32",
      "full name": "poly16x8_t vreinterpretq_p16_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u64_s32",
      "full name": "uint64x2_t vreinterpretq_u64_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s64_s32",
      "full name": "int64x2_t vreinterpretq_s64_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f64_s32",
      "full name": "float64x2_t vreinterpretq_f64_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p64_s32",
      "full name": "poly64x2_t vreinterpretq_p64_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p128_s32",
      "full name": "poly128_t vreinterpretq_p128_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f16_s32",
      "full name": "float16x8_t vreinterpretq_f16_s32(int32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s8_f32",
      "full name": "int8x16_t vreinterpretq_s8_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s16_f32",
      "full name": "int16x8_t vreinterpretq_s16_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s32_f32",
      "full name": "int32x4_t vreinterpretq_s32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u8_f32",
      "full name": "uint8x16_t vreinterpretq_u8_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u16_f32",
      "full name": "uint16x8_t vreinterpretq_u16_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u32_f32",
      "full name": "uint32x4_t vreinterpretq_u32_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p8_f32",
      "full name": "poly8x16_t vreinterpretq_p8_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p16_f32",
      "full name": "poly16x8_t vreinterpretq_p16_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u64_f32",
      "full name": "uint64x2_t vreinterpretq_u64_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s64_f32",
      "full name": "int64x2_t vreinterpretq_s64_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f64_f32",
      "full name": "float64x2_t vreinterpretq_f64_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p64_f32",
      "full name": "poly64x2_t vreinterpretq_p64_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p128_f32",
      "full name": "poly128_t vreinterpretq_p128_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p64_f64",
      "full name": "poly64x2_t vreinterpretq_p64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p128_f64",
      "full name": "poly128_t vreinterpretq_p128_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f16_f32",
      "full name": "float16x8_t vreinterpretq_f16_f32(float32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s8_u8",
      "full name": "int8x16_t vreinterpretq_s8_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s16_u8",
      "full name": "int16x8_t vreinterpretq_s16_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s32_u8",
      "full name": "int32x4_t vreinterpretq_s32_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f32_u8",
      "full name": "float32x4_t vreinterpretq_f32_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u16_u8",
      "full name": "uint16x8_t vreinterpretq_u16_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u32_u8",
      "full name": "uint32x4_t vreinterpretq_u32_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p8_u8",
      "full name": "poly8x16_t vreinterpretq_p8_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p16_u8",
      "full name": "poly16x8_t vreinterpretq_p16_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u64_u8",
      "full name": "uint64x2_t vreinterpretq_u64_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s64_u8",
      "full name": "int64x2_t vreinterpretq_s64_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f64_u8",
      "full name": "float64x2_t vreinterpretq_f64_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p64_u8",
      "full name": "poly64x2_t vreinterpretq_p64_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p128_u8",
      "full name": "poly128_t vreinterpretq_p128_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f16_u8",
      "full name": "float16x8_t vreinterpretq_f16_u8(uint8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s8_u16",
      "full name": "int8x16_t vreinterpretq_s8_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s16_u16",
      "full name": "int16x8_t vreinterpretq_s16_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s32_u16",
      "full name": "int32x4_t vreinterpretq_s32_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f32_u16",
      "full name": "float32x4_t vreinterpretq_f32_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u8_u16",
      "full name": "uint8x16_t vreinterpretq_u8_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u32_u16",
      "full name": "uint32x4_t vreinterpretq_u32_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p8_u16",
      "full name": "poly8x16_t vreinterpretq_p8_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p16_u16",
      "full name": "poly16x8_t vreinterpretq_p16_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u64_u16",
      "full name": "uint64x2_t vreinterpretq_u64_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s64_u16",
      "full name": "int64x2_t vreinterpretq_s64_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f64_u16",
      "full name": "float64x2_t vreinterpretq_f64_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p64_u16",
      "full name": "poly64x2_t vreinterpretq_p64_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p128_u16",
      "full name": "poly128_t vreinterpretq_p128_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f16_u16",
      "full name": "float16x8_t vreinterpretq_f16_u16(uint16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s8_u32",
      "full name": "int8x16_t vreinterpretq_s8_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s16_u32",
      "full name": "int16x8_t vreinterpretq_s16_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s32_u32",
      "full name": "int32x4_t vreinterpretq_s32_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f32_u32",
      "full name": "float32x4_t vreinterpretq_f32_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u8_u32",
      "full name": "uint8x16_t vreinterpretq_u8_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u16_u32",
      "full name": "uint16x8_t vreinterpretq_u16_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p8_u32",
      "full name": "poly8x16_t vreinterpretq_p8_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p16_u32",
      "full name": "poly16x8_t vreinterpretq_p16_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_u64_u32",
      "full name": "uint64x2_t vreinterpretq_u64_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s64_u32",
      "full name": "int64x2_t vreinterpretq_s64_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f64_u32",
      "full name": "float64x2_t vreinterpretq_f64_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p64_u32",
      "full name": "poly64x2_t vreinterpretq_p64_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_p128_u32",
      "full name": "poly128_t vreinterpretq_p128_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_f16_u32",
      "full name": "float16x8_t vreinterpretq_f16_u32(uint32x4_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [32]",
      "function_cn": "[向量] 空操作  [32]"
    },
    {
      "name": "vreinterpretq_s8_p8",
      "full name": "int8x16_t vreinterpretq_s8_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s16_p8",
      "full name": "int16x8_t vreinterpretq_s16_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s32_p8",
      "full name": "int32x4_t vreinterpretq_s32_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f32_p8",
      "full name": "float32x4_t vreinterpretq_f32_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u8_p8",
      "full name": "uint8x16_t vreinterpretq_u8_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u16_p8",
      "full name": "uint16x8_t vreinterpretq_u16_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u32_p8",
      "full name": "uint32x4_t vreinterpretq_u32_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p16_p8",
      "full name": "poly16x8_t vreinterpretq_p16_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_u64_p8",
      "full name": "uint64x2_t vreinterpretq_u64_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s64_p8",
      "full name": "int64x2_t vreinterpretq_s64_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f64_p8",
      "full name": "float64x2_t vreinterpretq_f64_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p64_p8",
      "full name": "poly64x2_t vreinterpretq_p64_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_p128_p8",
      "full name": "poly128_t vreinterpretq_p128_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_f16_p8",
      "full name": "float16x8_t vreinterpretq_f16_p8(poly8x16_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [8]",
      "function_cn": "[向量] 空操作  [8]"
    },
    {
      "name": "vreinterpretq_s8_p16",
      "full name": "int8x16_t vreinterpretq_s8_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s16_p16",
      "full name": "int16x8_t vreinterpretq_s16_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s32_p16",
      "full name": "int32x4_t vreinterpretq_s32_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f32_p16",
      "full name": "float32x4_t vreinterpretq_f32_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u8_p16",
      "full name": "uint8x16_t vreinterpretq_u8_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u16_p16",
      "full name": "uint16x8_t vreinterpretq_u16_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u32_p16",
      "full name": "uint32x4_t vreinterpretq_u32_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p8_p16",
      "full name": "poly8x16_t vreinterpretq_p8_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u64_p16",
      "full name": "uint64x2_t vreinterpretq_u64_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s64_p16",
      "full name": "int64x2_t vreinterpretq_s64_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f64_p16",
      "full name": "float64x2_t vreinterpretq_f64_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p64_p16",
      "full name": "poly64x2_t vreinterpretq_p64_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p128_p16",
      "full name": "poly128_t vreinterpretq_p128_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f16_p16",
      "full name": "float16x8_t vreinterpretq_f16_p16(poly16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s8_u64",
      "full name": "int8x16_t vreinterpretq_s8_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s16_u64",
      "full name": "int16x8_t vreinterpretq_s16_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s32_u64",
      "full name": "int32x4_t vreinterpretq_s32_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f32_u64",
      "full name": "float32x4_t vreinterpretq_f32_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u8_u64",
      "full name": "uint8x16_t vreinterpretq_u8_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u16_u64",
      "full name": "uint16x8_t vreinterpretq_u16_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u32_u64",
      "full name": "uint32x4_t vreinterpretq_u32_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p8_u64",
      "full name": "poly8x16_t vreinterpretq_p8_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p16_u64",
      "full name": "poly16x8_t vreinterpretq_p16_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s64_u64",
      "full name": "int64x2_t vreinterpretq_s64_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f64_u64",
      "full name": "float64x2_t vreinterpretq_f64_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f64_s64",
      "full name": "float64x2_t vreinterpretq_f64_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p64_s64",
      "full name": "poly64x2_t vreinterpretq_p64_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p128_s64",
      "full name": "poly128_t vreinterpretq_p128_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p64_u64",
      "full name": "poly64x2_t vreinterpretq_p64_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p128_u64",
      "full name": "poly128_t vreinterpretq_p128_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f16_u64",
      "full name": "float16x8_t vreinterpretq_f16_u64(uint64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s8_s64",
      "full name": "int8x16_t vreinterpretq_s8_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s16_s64",
      "full name": "int16x8_t vreinterpretq_s16_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s32_s64",
      "full name": "int32x4_t vreinterpretq_s32_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f32_s64",
      "full name": "float32x4_t vreinterpretq_f32_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u8_s64",
      "full name": "uint8x16_t vreinterpretq_u8_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u16_s64",
      "full name": "uint16x8_t vreinterpretq_u16_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u32_s64",
      "full name": "uint32x4_t vreinterpretq_u32_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p8_s64",
      "full name": "poly8x16_t vreinterpretq_p8_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p16_s64",
      "full name": "poly16x8_t vreinterpretq_p16_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u64_s64",
      "full name": "uint64x2_t vreinterpretq_u64_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f16_s64",
      "full name": "float16x8_t vreinterpretq_f16_s64(int64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s8_f16",
      "full name": "int8x16_t vreinterpretq_s8_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s16_f16",
      "full name": "int16x8_t vreinterpretq_s16_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s32_f16",
      "full name": "int32x4_t vreinterpretq_s32_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f32_f16",
      "full name": "float32x4_t vreinterpretq_f32_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u8_f16",
      "full name": "uint8x16_t vreinterpretq_u8_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u16_f16",
      "full name": "uint16x8_t vreinterpretq_u16_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u32_f16",
      "full name": "uint32x4_t vreinterpretq_u32_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p8_f16",
      "full name": "poly8x16_t vreinterpretq_p8_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p16_f16",
      "full name": "poly16x8_t vreinterpretq_p16_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_u64_f16",
      "full name": "uint64x2_t vreinterpretq_u64_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_s64_f16",
      "full name": "int64x2_t vreinterpretq_s64_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_f64_f16",
      "full name": "float64x2_t vreinterpretq_f64_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p64_f16",
      "full name": "poly64x2_t vreinterpretq_p64_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpretq_p128_f16",
      "full name": "poly128_t vreinterpretq_p128_f16(float16x8_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [16]",
      "function_cn": "[向量] 空操作  [16]"
    },
    {
      "name": "vreinterpret_s8_f64",
      "full name": "int8x8_t vreinterpret_s8_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s16_f64",
      "full name": "int16x4_t vreinterpret_s16_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s32_f64",
      "full name": "int32x2_t vreinterpret_s32_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u8_f64",
      "full name": "uint8x8_t vreinterpret_u8_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u16_f64",
      "full name": "uint16x4_t vreinterpret_u16_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u32_f64",
      "full name": "uint32x2_t vreinterpret_u32_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p8_f64",
      "full name": "poly8x8_t vreinterpret_p8_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p16_f64",
      "full name": "poly16x4_t vreinterpret_p16_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u64_f64",
      "full name": "uint64x1_t vreinterpret_u64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s64_f64",
      "full name": "int64x1_t vreinterpret_s64_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f16_f64",
      "full name": "float16x4_t vreinterpret_f16_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f32_f64",
      "full name": "float32x2_t vreinterpret_f32_f64(float64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s8_f64",
      "full name": "int8x16_t vreinterpretq_s8_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s16_f64",
      "full name": "int16x8_t vreinterpretq_s16_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s32_f64",
      "full name": "int32x4_t vreinterpretq_s32_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u8_f64",
      "full name": "uint8x16_t vreinterpretq_u8_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u16_f64",
      "full name": "uint16x8_t vreinterpretq_u16_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u32_f64",
      "full name": "uint32x4_t vreinterpretq_u32_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p8_f64",
      "full name": "poly8x16_t vreinterpretq_p8_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p16_f64",
      "full name": "poly16x8_t vreinterpretq_p16_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u64_f64",
      "full name": "uint64x2_t vreinterpretq_u64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s64_f64",
      "full name": "int64x2_t vreinterpretq_s64_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f16_f64",
      "full name": "float16x8_t vreinterpretq_f16_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f32_f64",
      "full name": "float32x4_t vreinterpretq_f32_f64(float64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s8_p64",
      "full name": "int8x8_t vreinterpret_s8_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s16_p64",
      "full name": "int16x4_t vreinterpret_s16_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s32_p64",
      "full name": "int32x2_t vreinterpret_s32_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u8_p64",
      "full name": "uint8x8_t vreinterpret_u8_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u16_p64",
      "full name": "uint16x4_t vreinterpret_u16_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u32_p64",
      "full name": "uint32x2_t vreinterpret_u32_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p8_p64",
      "full name": "poly8x8_t vreinterpret_p8_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_p16_p64",
      "full name": "poly16x4_t vreinterpret_p16_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_u64_p64",
      "full name": "uint64x1_t vreinterpret_u64_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_s64_p64",
      "full name": "int64x1_t vreinterpret_s64_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f64_p64",
      "full name": "float64x1_t vreinterpret_f64_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpret_f16_p64",
      "full name": "float16x4_t vreinterpret_f16_p64(poly64x1_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s8_p64",
      "full name": "int8x16_t vreinterpretq_s8_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s16_p64",
      "full name": "int16x8_t vreinterpretq_s16_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s32_p64",
      "full name": "int32x4_t vreinterpretq_s32_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u8_p64",
      "full name": "uint8x16_t vreinterpretq_u8_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u16_p64",
      "full name": "uint16x8_t vreinterpretq_u16_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u32_p64",
      "full name": "uint32x4_t vreinterpretq_u32_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p8_p64",
      "full name": "poly8x16_t vreinterpretq_p8_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_p16_p64",
      "full name": "poly16x8_t vreinterpretq_p16_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_u64_p64",
      "full name": "uint64x2_t vreinterpretq_u64_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s64_p64",
      "full name": "int64x2_t vreinterpretq_s64_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f64_p64",
      "full name": "float64x2_t vreinterpretq_f64_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_f16_p64",
      "full name": "float16x8_t vreinterpretq_f16_p64(poly64x2_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [64]",
      "function_cn": "[向量] 空操作  [64]"
    },
    {
      "name": "vreinterpretq_s8_p128",
      "full name": "int8x16_t vreinterpretq_s8_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_s16_p128",
      "full name": "int16x8_t vreinterpretq_s16_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_s32_p128",
      "full name": "int32x4_t vreinterpretq_s32_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_u8_p128",
      "full name": "uint8x16_t vreinterpretq_u8_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_u16_p128",
      "full name": "uint16x8_t vreinterpretq_u16_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_u32_p128",
      "full name": "uint32x4_t vreinterpretq_u32_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_p8_p128",
      "full name": "poly8x16_t vreinterpretq_p8_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_p16_p128",
      "full name": "poly16x8_t vreinterpretq_p16_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_u64_p128",
      "full name": "uint64x2_t vreinterpretq_u64_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_s64_p128",
      "full name": "int64x2_t vreinterpretq_s64_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_f64_p128",
      "full name": "float64x2_t vreinterpretq_f64_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vreinterpretq_f16_p128",
      "full name": "float16x8_t vreinterpretq_f16_p128(poly128_t a)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "NOP",
      "function_en": "[vector] NOP  [128]",
      "function_cn": "[向量] 空操作  [128]"
    },
    {
      "name": "vldrq_p128",
      "full name": "poly128_t vldrq_p128(poly128_t const * ptr)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "ldr",
      "function_en": "[vector] ldr [128]",
      "function_cn": "[向量] 加载指针指向的内存中的数据 [128]"
    },
    {
      "name": "vstrq_p128",
      "full name": "void vstrq_p128(poly128_t * ptr, poly128_t val)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "str",
      "function_en": "[vector] str [128]",
      "function_cn": "[向量] 将寄存器中的数据存储到指针指向的内存中 [128]"
    },
    {
      "name": "vaeseq_u8",
      "full name": "uint8x16_t vaeseq_u8(uint8x16_t data, uint8x16_t key)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "aese",
      "function_en": "[vector] aese [8]",
      "function_cn": "[向量] 单轮加密 [8]"
    },
    {
      "name": "vaesdq_u8",
      "full name": "uint8x16_t vaesdq_u8(uint8x16_t data, uint8x16_t key)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "aesd",
      "function_en": "[vector] aesd [8]",
      "function_cn": "[向量] 单轮解密 [8]"
    },
    {
      "name": "vaesmcq_u8",
      "full name": "uint8x16_t vaesmcq_u8(uint8x16_t data)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "aesmc",
      "function_en": "[vector] aesmc [8]",
      "function_cn": "[向量] 混合列加密 [8]"
    },
    {
      "name": "vaesimcq_u8",
      "full name": "uint8x16_t vaesimcq_u8(uint8x16_t data)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "aesimc",
      "function_en": "[vector] aesimc [8]",
      "function_cn": "[向量] 反向混合列加密 [8]"
    },
    {
      "name": "vsha1cq_u32",
      "full name": "uint32x4_t vsha1cq_u32(uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha1c",
      "function_en": "[vector] sha1c [32]",
      "function_cn": "[向量] 哈希更新(选择)加密 [32]"
    },
    {
      "name": "vsha1pq_u32",
      "full name": "uint32x4_t vsha1pq_u32(uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha1p",
      "function_en": "[vector] sha1p [32]",
      "function_cn": "[向量] 哈希更新(奇偶校验)加密 [32]"
    },
    {
      "name": "vsha1mq_u32",
      "full name": "uint32x4_t vsha1mq_u32(uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha1m",
      "function_en": "[vector] sha1m [32]",
      "function_cn": "[向量] 哈希更新(多数)加密 [32]"
    },
    {
      "name": "vsha1h_u32",
      "full name": "uint32_t vsha1h_u32(uint32_t hash_e)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha1h",
      "function_en": "[vector] sha1h [32]",
      "function_cn": "[向量] 固定旋转加密 [32]"
    },
    {
      "name": "vsha1su0q_u32",
      "full name": "uint32x4_t vsha1su0q_u32(uint32x4_t w0_3, uint32x4_t w4_7, uint32x4_t w8_11)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha1su0",
      "function_en": "[vector] sha1su0 [32]",
      "function_cn": "[向量] 加密 [32]"
    },
    {
      "name": "vsha1su1q_u32",
      "full name": "uint32x4_t vsha1su1q_u32(uint32x4_t tw0_3, uint32x4_t w12_15)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha1su1",
      "function_en": "[vector] sha1su1 [32]",
      "function_cn": "[向量] 加密 [32]"
    },
    {
      "name": "vsha256hq_u32",
      "full name": "uint32x4_t vsha256hq_u32(uint32x4_t hash_abcd, uint32x4_t hash_efgh, uint32x4_t wk)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha256h",
      "function_en": "[vector] sha256h [32]",
      "function_cn": "[向量] 加密 [32]"
    },
    {
      "name": "vsha256h2q_u32",
      "full name": "uint32x4_t vsha256h2q_u32(uint32x4_t hash_efgh, uint32x4_t hash_abcd, uint32x4_t wk)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha256h2",
      "function_en": "[vector] sha256h2 [32]",
      "function_cn": "[向量] 加密 [32]"
    },
    {
      "name": "vsha256su0q_u32",
      "full name": "uint32x4_t vsha256su0q_u32(uint32x4_t w0_3, uint32x4_t w4_7)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha256su0",
      "function_en": "[vector] sha256su0 [32]",
      "function_cn": "[向量] 加密 [32]"
    },
    {
      "name": "vsha256su1q_u32",
      "full name": "uint32x4_t vsha256su1q_u32(uint32x4_t tw0_3, uint32x4_t w8_11, uint32x4_t w12_15)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "sha256su1",
      "function_en": "[vector] sha256su1 [32]",
      "function_cn": "[向量] 加密 [32]"
    },
    {
      "name": "vmull_p64",
      "full name": "poly128_t vmull_p64(poly64_t a, poly64_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "pmull",
      "function_en": "[vector] pmull [64]",
      "function_cn": "[向量] 多项式乘法 [64]"
    },
    {
      "name": "vmull_high_p64",
      "full name": "poly128_t vmull_high_p64(poly64x2_t a, poly64x2_t b)",
      "Intel name": "",
      "Intel Asm": "",
      "Arm Asm": "pmull2",
      "function_en": "[vector] pmull2 [64]",
      "function_cn": "[向量] 多项式乘法 [64]"
    },	
	{
		"name": "vcls_u8",
		"full name": "int8x8_t vcls_u8(uint8x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.",
		"function_cn": "计数前导符号位（向量）。此指令计算源SIMD&FP寄存器中每个向量元素中与最高有效位相同的最高有效位之后的连续位数，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。计数不包括最高有效位本身。"
	},
	{
		"name": "vclsq_u8",
		"full name": "int8x16_t vclsq_u8(uint8x16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.",
		"function_cn": "计数前导符号位（向量）。此指令计算源SIMD&FP寄存器中每个向量元素中与最高有效位相同的最高有效位之后的连续位数，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。计数不包括最高有效位本身。"
	},
	{
		"name": "vcls_u16",
		"full name": "int16x4_t vcls_u16(uint16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.",
		"function_cn": "计数前导符号位（向量）。此指令计算源SIMD&FP寄存器中每个向量元素中与最高有效位相同的最高有效位之后的连续位数，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。计数不包括最高有效位本身。"
	},
	{
		"name": "vclsq_u16",
		"full name": "int16x8_t vclsq_u16(uint16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.",
		"function_cn": "计数前导符号位（向量）。此指令计算源SIMD&FP寄存器中每个向量元素中与最高有效位相同的最高有效位之后的连续位数，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。计数不包括最高有效位本身。"
	},
	{
		"name": "vcls_u32",
		"full name": "int32x2_t vcls_u32(uint32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.",
		"function_cn": "计数前导符号位（向量）。此指令计算源SIMD&FP寄存器中每个向量元素中与最高有效位相同的最高有效位之后的连续位数，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。计数不包括最高有效位本身。"
	},
	{
		"name": "vclsq_u32",
		"full name": "int32x4_t vclsq_u32(uint32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.",
		"function_cn": "计数前导符号位（向量）。此指令计算源SIMD&FP寄存器中每个向量元素中与最高有效位相同的最高有效位之后的连续位数，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。计数不包括最高有效位本身。"
	},
	{
		"name": "vadd_p8",
		"full name": "poly8x8_t vadd_p8(poly8x8_t a,poly8x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "vadd_p16",
		"full name": "poly16x4_t vadd_p16(poly16x4_t a,poly16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "vadd_p64",
		"full name": "poly64x1_t vadd_p64(poly64x1_t a,poly64x1_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "vaddq_p8",
		"full name": "poly8x16_t vaddq_p8(poly8x16_t a,poly8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "vaddq_p16",
		"full name": "poly16x8_t vaddq_p16(poly16x8_t a,poly16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "vaddq_p64",
		"full name": "poly64x2_t vaddq_p64(poly64x2_t a,poly64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "vaddq_p128",
		"full name": "poly128_t vaddq_p128(poly128_t a,poly128_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.",
		"function_cn": "按位异或（向量）。此指令在两个源SIMD和FP寄存器之间执行按位异或操作，并将结果放置在目标SIMD和FP寄存器中。"
	},
	{
		"name": "__crc32b",
		"full name": "uint32_t __crc32b(uint32_t a,uint8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x04C11DB7 用于 CRC 计算。"
	},
	{
		"name": "__crc32h",
		"full name": "uint32_t __crc32h(uint32_t a,uint16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x04C11DB7 用于 CRC 计算。"
	},
	{
		"name": "__crc32w",
		"full name": "uint32_t __crc32w(uint32_t a,uint32_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x04C11DB7 用于 CRC 计算。"
	},
	{
		"name": "__crc32d",
		"full name": "uint32_t __crc32d(uint32_t a,uint64_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x04C11DB7 用于 CRC 计算。"
	},
	{
		"name": "__crc32cb",
		"full name": "uint32_t __crc32cb(uint32_t a,uint8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x1EDC6F41 用于 CRC 计算。"
	},
	{
		"name": "__crc32ch",
		"full name": "uint32_t __crc32ch(uint32_t a,uint16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x1EDC6F41 用于 CRC 计算。"
	},
	{
		"name": "__crc32cw",
		"full name": "uint32_t __crc32cw(uint32_t a,uint32_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x1EDC6F41 用于 CRC 计算。"
	},
	{
		"name": "__crc32cd",
		"full name": "uint32_t __crc32cd(uint32_t a,uint64_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
		"function_cn": "CRC32校验和对通用寄存器中保存的值执行循环冗余校验（CRC）计算。它在第一个源操作数中获取输入CRC值，对第二个源操作数中的输入值执行CRC，并返回输出CRC值。第二个源操作数可以是8、16、32或64位。为了与常见用法保持一致，值的位顺序作为运算的一部分被颠倒，并且多项式 0x1EDC6F41 用于 CRC 计算。"
	},
	{
		"name": "vqrdmlah_s16",
		"full name": "int16x4_t vqrdmlah_s16(int16x4_t a,int16x4_t b,int16x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlah_s32",
		"full name": "int32x2_t vqrdmlah_s32(int32x2_t a,int32x2_t b,int32x2_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahq_s16",
		"full name": "int16x8_t vqrdmlahq_s16(int16x8_t a,int16x8_t b,int16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahq_s32",
		"full name": "int32x4_t vqrdmlahq_s32(int32x4_t a,int32x4_t b,int32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlsh_s16",
		"full name": "int16x4_t vqrdmlsh_s16(int16x4_t a,int16x4_t b,int16x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlsh_s32",
		"full name": "int32x2_t vqrdmlsh_s32(int32x2_t a,int32x2_t b,int32x2_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshq_s16",
		"full name": "int16x8_t vqrdmlshq_s16(int16x8_t a,int16x8_t b,int16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshq_s32",
		"full name": "int32x4_t vqrdmlshq_s32(int32x4_t a,int32x4_t b,int32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlah_lane_s16",
		"full name": "int16x4_t vqrdmlah_lane_s16(int16x4_t a,int16x4_t b,int16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahq_lane_s16",
		"full name": "int16x8_t vqrdmlahq_lane_s16(int16x8_t a,int16x8_t b,int16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlah_laneq_s16",
		"full name": "int16x4_t vqrdmlah_laneq_s16(int16x4_t a,int16x4_t b,int16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahq_laneq_s16",
		"full name": "int16x8_t vqrdmlahq_laneq_s16(int16x8_t a,int16x8_t b,int16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlah_lane_s32",
		"full name": "int32x2_t vqrdmlah_lane_s32(int32x2_t a,int32x2_t b,int32x2_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahq_lane_s32",
		"full name": "int32x4_t vqrdmlahq_lane_s32(int32x4_t a,int32x4_t b,int32x2_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlah_laneq_s32",
		"full name": "int32x2_t vqrdmlah_laneq_s32(int32x2_t a,int32x2_t b,int32x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahq_laneq_s32",
		"full name": "int32x4_t vqrdmlahq_laneq_s32(int32x4_t a,int32x4_t b,int32x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlsh_lane_s16",
		"full name": "int16x4_t vqrdmlsh_lane_s16(int16x4_t a,int16x4_t b,int16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshq_lane_s16",
		"full name": "int16x8_t vqrdmlshq_lane_s16(int16x8_t a,int16x8_t b,int16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlsh_laneq_s16",
		"full name": "int16x4_t vqrdmlsh_laneq_s16(int16x4_t a,int16x4_t b,int16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshq_laneq_s16",
		"full name": "int16x8_t vqrdmlshq_laneq_s16(int16x8_t a,int16x8_t b,int16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlsh_lane_s32",
		"full name": "int32x2_t vqrdmlsh_lane_s32(int32x2_t a,int32x2_t b,int32x2_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshq_lane_s32",
		"full name": "int32x4_t vqrdmlshq_lane_s32(int32x4_t a,int32x4_t b,int32x2_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlsh_laneq_s32",
		"full name": "int32x2_t vqrdmlsh_laneq_s32(int32x2_t a,int32x2_t b,int32x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshq_laneq_s32",
		"full name": "int32x4_t vqrdmlshq_laneq_s32(int32x4_t a,int32x4_t b,int32x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlahh_s16",
		"full name": "int16_t vqrdmlahh_s16(int16_t a,int16_t b,int16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlahs_s32",
		"full name": "int32_t vqrdmlahs_s32(int32_t a,int32_t b,int32_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshh_s16",
		"full name": "int16_t vqrdmlshh_s16(int16_t a,int16_t b,int16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshs_s32",
		"full name": "int32_t vqrdmlshs_s32(int32_t a,int32_t b,int32_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlahh_lane_s16",
		"full name": "int16_t vqrdmlahh_lane_s16(int16_t a,int16_t b,int16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahh_laneq_s16",
		"full name": "int16_t vqrdmlahh_laneq_s16(int16_t a,int16_t b,int16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahs_lane_s32",
		"full name": "int32_t vqrdmlahs_lane_s32(int32_t a,int32_t b,int32x2_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlahs_laneq_s32",
		"full name": "int32_t vqrdmlahs_laneq_s32(int32_t a,int32_t b,int32x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘法累加返回高半（向量）。该指令将第一源SIMD&FP寄存器的向量元素与第二源SIMD&FP寄存器的相应向量元素相乘，而不使乘法结果饱和，将结果加倍，并将最终结果的最高有效一半与目标SIMD&FP 寄存器的向量元素相加。结果将四舍五入。"
	},
	{
		"name": "vqrdmlshh_lane_s16",
		"full name": "int16_t vqrdmlshh_lane_s16(int16_t a,int16_t b,int16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshh_laneq_s16",
		"full name": "int16_t vqrdmlshh_laneq_s16(int16_t a,int16_t b,int16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshs_lane_s32",
		"full name": "int32_t vqrdmlshs_lane_s32(int32_t a,int32_t b,int32x2_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vqrdmlshs_laneq_s32",
		"full name": "int32_t vqrdmlshs_laneq_s32(int32_t a,int32_t b,int32x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.",
		"function_cn": "带符号的饱和舍入加倍乘减返回高半（向量）。该指令将第一个源 SIMD&FP 寄存器的向量元素与第二个源 SIMD&FP 寄存器的相应向量元素相乘，而不会使乘法结果饱和，将结果加倍，并从目标的向量元素中减去最终结果的最高有效一半SIMD&FP 寄存器。结果四舍五入。"
	},
	{
		"name": "vabsh_f16",
		"full name": "float16_t vabsh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点绝对值（向量）。此指令计算源SIMD&FP寄存器中每个向量元素的绝对值，将结果写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vceqzh_f16",
		"full name": "uint16_t vceqzh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较等于零（向量）。此指令读取源SIMD&FP寄存器中的每个浮点值，如果该值等于零，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgezh_f16",
		"full name": "uint16_t vcgezh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值大于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcgtzh_f16",
		"full name": "uint16_t vcgtzh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于零（向量）。此指令读取源SIMD&FP寄存器中的每个浮点值，如果该值大于零，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vclezh_f16",
		"full name": "uint16_t vclezh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较小于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值小于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为零。"
	},
	{
		"name": "vcltzh_f16",
		"full name": "uint16_t vcltzh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较小于零（向量）。此指令读取源SIMD&FP寄存器中的每个浮点值，如果该值小于零，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcvth_f16_s16",
		"full name": "float16_t vcvth_f16_s16(int16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_f16_s32",
		"full name": "float16_t vcvth_f16_s32(int32_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_f16_s64",
		"full name": "float16_t vcvth_f16_s64(int64_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_f16_u16",
		"full name": "float16_t vcvth_f16_u16(uint16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_f16_u32",
		"full name": "float16_t vcvth_f16_u32(uint32_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_f16_u64",
		"full name": "float16_t vcvth_f16_u64(uint64_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_s16_f16",
		"full name": "int16_t vcvth_s16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_s32_f16",
		"full name": "int32_t vcvth_s32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_s64_f16",
		"full name": "int64_t vcvth_s64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_u16_f16",
		"full name": "uint16_t vcvth_u16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vcvth_u32_f16",
		"full name": "uint32_t vcvth_u32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vcvth_u64_f16",
		"full name": "uint64_t vcvth_u64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vcvtah_s16_f16",
		"full name": "int16_t vcvtah_s16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtah_s32_f16",
		"full name": "int32_t vcvtah_s32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtah_s64_f16",
		"full name": "int64_t vcvtah_s64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtah_u16_f16",
		"full name": "uint16_t vcvtah_u16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtah_u32_f16",
		"full name": "uint32_t vcvtah_u32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtah_u64_f16",
		"full name": "uint64_t vcvtah_u64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmh_s16_f16",
		"full name": "int16_t vcvtmh_s16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmh_s32_f16",
		"full name": "int32_t vcvtmh_s32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmh_s64_f16",
		"full name": "int64_t vcvtmh_s64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmh_u16_f16",
		"full name": "uint16_t vcvtmh_u16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmh_u32_f16",
		"full name": "uint32_t vcvtmh_u32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmh_u64_f16",
		"full name": "uint64_t vcvtmh_u64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnh_s16_f16",
		"full name": "int16_t vcvtnh_s16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnh_s32_f16",
		"full name": "int32_t vcvtnh_s32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnh_s64_f16",
		"full name": "int64_t vcvtnh_s64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnh_u16_f16",
		"full name": "uint16_t vcvtnh_u16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnh_u32_f16",
		"full name": "uint32_t vcvtnh_u32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnh_u64_f16",
		"full name": "uint64_t vcvtnh_u64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtph_s16_f16",
		"full name": "int16_t vcvtph_s16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtph_s32_f16",
		"full name": "int32_t vcvtph_s32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtph_s64_f16",
		"full name": "int64_t vcvtph_s64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtph_u16_f16",
		"full name": "uint16_t vcvtph_u16_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtph_u32_f16",
		"full name": "uint32_t vcvtph_u32_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtph_u64_f16",
		"full name": "uint64_t vcvtph_u64_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vnegh_f16",
		"full name": "float16_t vnegh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点取反（向量）。该指令将源 SIMD&FP 寄存器中每个向量元素的值取反，将结果写入向量，并将向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vrecpeh_f16",
		"full name": "float16_t vrecpeh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数估值。此指令为源SIMD&FP寄存器中的每个向量元素查找近似倒数估计值，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrecpxh_f16",
		"full name": "float16_t vrecpxh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数指数（标量）。此指令为源SIMD&FP寄存器中的每个向量元素查找近似倒数指数，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrndh_f16",
		"full name": "float16_t vrndh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点朝零舍入到整数（向量）。此指令使用向零舍入模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndah_f16",
		"full name": "float16_t vrndah_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，舍入到与 Away（向量）相关的最近值。此指令将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndih_f16",
		"full name": "float16_t vrndih_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "使用当前舍入模式（向量）将浮点舍入为整数。此指令使用FPCR指定的舍入模式，将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndmh_f16",
		"full name": "float16_t vrndmh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，朝向负无穷大（向量）。此指令使用向最小值舍入模式将SIMD&FP源寄存器中的浮点值向向量舍入为大小相同的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndnh_f16",
		"full name": "float16_t vrndnh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，到最接近的偶数（向量）。此指令使用舍入到最近值模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndph_f16",
		"full name": "float16_t vrndph_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，朝正无穷大（向量）方向。此指令使用向正无限舍入模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndxh_f16",
		"full name": "float16_t vrndxh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点精确舍入到整数，使用当前舍入模式（向量）。此指令使用FPCR指定定的舍入模式，将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrsqrteh_f16",
		"full name": "float16_t vrsqrteh_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数平方根估值。此指令为源SIMD&FP寄存器中的每个向量元素计算近似平方根，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vsqrth_f16",
		"full name": "float16_t vsqrth_f16(float16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点平方根（向量）。此指令计算源SIMD&FP寄存器中每个向量元素的平方根，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vaddh_f16",
		"full name": "float16_t vaddh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点添加（向量）。此指令在两个源SIMD&FP寄存器中添加相应的向量元素，将结果写入向量，并将向量写入目标SIMD&FP寄存器。此指令中的所有值都是浮点值。"
	},
	{
		"name": "vabdh_f16",
		"full name": "float16_t vabdh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点绝对差值（向量）。此指令从第一源SIMD&FP寄存器元素中的相应浮点值中减去第二源SIMD&FP寄存器元素中的浮点值，将每个结果的绝对值放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vcageh_f16",
		"full name": "uint16_t vcageh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点绝对比较大于或等于（向量）。该指令将第一个源SIMD&FP寄存器中每个浮点值的绝对值与第二个源SIMD&FP寄存器中相应浮点值的绝对值进行比较，如果第一个值大于或等于第二个值，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcagth_f16",
		"full name": "uint16_t vcagth_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点绝对比较大于（向量）。该指令将第一个源SIMD&FP寄存器中每个浮点值的绝对值与第二个源SIMD&FP寄存器中相应浮点值的绝对值进行比较，如果第一个值大于或等于第二个值，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcaleh_f16",
		"full name": "uint16_t vcaleh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point absolute compare less than or equal",
		"function_cn": "浮点绝对比较小于或等于"
	},
	{
		"name": "vcalth_f16",
		"full name": "uint16_t vcalth_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point absolute compare less than",
		"function_cn": "浮点绝对比较小于"
	},
	{
		"name": "vceqh_f16",
		"full name": "uint16_t vceqh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较等于（向量）。此指令将第一源SIMD&FP寄存器中的每个浮点值与第二源SIMD&FP寄存器中的相应浮点值进行比较，如果比较相等，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgeh_f16",
		"full name": "uint16_t vcgeh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于（向量）。该指令读取第一个源SIMD&FP寄存器中的每个浮点值，如果该值大于或等于第二个源SIMD&FP寄存器中相应的浮点值，则设置目标SIMD&FP中相应向量元素的每个位寄存器为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgth_f16",
		"full name": "uint16_t vcgth_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于（向量）。该指令读取第一个源SIMD&FP寄存器中的每个浮点值，如果该值大于第二个源SIMD&FP寄存器中的相应浮点值，则将目标SIMD&FP寄存器中相应向量元素的每个位设置为1，否则，将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcleh_f16",
		"full name": "uint16_t vcleh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point compare less than or equal",
		"function_cn": "浮点比较小于或等于"
	},
	{
		"name": "vclth_f16",
		"full name": "uint16_t vclth_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point compare less than",
		"function_cn": "浮点比较小于"
	},
	{
		"name": "vcvth_n_f16_s16",
		"full name": "float16_t vcvth_n_f16_s16(int16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_f16_s32",
		"full name": "float16_t vcvth_n_f16_s32(int32_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_f16_s64",
		"full name": "float16_t vcvth_n_f16_s64(int64_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_f16_u16",
		"full name": "float16_t vcvth_n_f16_u16(uint16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_f16_u32",
		"full name": "float16_t vcvth_n_f16_u32(uint32_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_f16_u64",
		"full name": "float16_t vcvth_n_f16_u64(uint64_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_s16_f16",
		"full name": "int16_t vcvth_n_s16_f16(float16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_s32_f16",
		"full name": "int32_t vcvth_n_s32_f16(float16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_s64_f16",
		"full name": "int64_t vcvth_n_s64_f16(float16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvth_n_u16_f16",
		"full name": "uint16_t vcvth_n_u16_f16(float16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vcvth_n_u32_f16",
		"full name": "uint32_t vcvth_n_u32_f16(float16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vcvth_n_u64_f16",
		"full name": "uint64_t vcvth_n_u64_f16(float16_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vdivh_f16",
		"full name": "float16_t vdivh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点除法（向量）。此指令将第一源SIMD&FP寄存器中元素中的浮点值除以第二源SIMD&FP寄存器中相应元素中的浮点值，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmaxh_f16",
		"full name": "float16_t vmaxh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最大值（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较大的一个放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmaxnmh_f16",
		"full name": "float16_t vmaxnmh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最大数（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较大的一个写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vminh_f16",
		"full name": "float16_t vminh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最小值（向量）。此指令比较两个源SIMD&FP寄存器中向量中的相应元素，将两个浮点值中较小的一个放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vminnmh_f16",
		"full name": "float16_t vminnmh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最小数（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较小的一个写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulh_f16",
		"full name": "float16_t vmulh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxh_f16",
		"full name": "float16_t vmulxh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrecpsh_f16",
		"full name": "float16_t vrecpsh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数步长。此指令将两个源SIMD和FP寄存器向量中相应的浮点值相乘，从2.0中减去每个乘积，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrsqrtsh_f16",
		"full name": "float16_t vrsqrtsh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数平方根步长。此指令将两个源SIMD和FP寄存器向量中相应的浮点值相乘，从3.0中减去每个乘积，将这些结果除以2.0，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vsubh_f16",
		"full name": "float16_t vsubh_f16(float16_t a,float16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点减法（向量）。此指令从第一源SIMD&FP寄存器中向量中的相应元素中减去第二源SIMD&FP寄存器中向量中的元素，将每个结果放入向量的元素中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vfmah_f16",
		"full name": "float16_t vfmah_f16(float16_t a,float16_t b,float16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, adds the product to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点融合乘加（标量）。该指令将前两个 SIMD&FP 源寄存器的值相乘，将乘积与第三个 SIMD&FP 源寄存器的值相加，并将结果写入 SIMD&FP 目标寄存器。"
	},
	{
		"name": "vfmsh_f16",
		"full name": "float16_t vfmsh_f16(float16_t a,float16_t b,float16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, negates the product, adds that to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点融合乘减（标量）。此指令将前两个SIMD&FP源寄存器的值相乘，取反乘积，将其添加到第三个SIMD&FP源寄存器的值中，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vabs_f16",
		"full name": "float16x4_t vabs_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "成对浮点相加（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值相加，将结果放入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vabsq_f16",
		"full name": "float16x8_t vabsq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "成对浮点相加（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值相加，将结果放入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vceqz_f16",
		"full name": "uint16x4_t vceqz_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较等于零（向量）。此指令读取源SIMD&FP寄存器中的每个浮点值，如果该值等于零，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vceqzq_f16",
		"full name": "uint16x8_t vceqzq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较等于零（向量）。此指令读取源SIMD&FP寄存器中的每个浮点值，如果该值等于零，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgez_f16",
		"full name": "uint16x4_t vcgez_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值大于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcgezq_f16",
		"full name": "uint16x8_t vcgezq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值大于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcgtz_f16",
		"full name": "uint16x4_t vcgtz_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值大于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcgtzq_f16",
		"full name": "uint16x8_t vcgtzq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值大于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vclez_f16",
		"full name": "uint16x4_t vclez_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较小于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值小于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vclezq_f16",
		"full name": "uint16x8_t vclezq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较小于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值小于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcltz_f16",
		"full name": "uint16x4_t vcltz_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较小于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值小于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcltzq_f16",
		"full name": "uint16x8_t vcltzq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较小于或等于零（向量）。该指令读取源 SIMD&FP 寄存器中的每个浮点值，如果该值小于或等于 0，则将目标 SIMD&FP 寄存器中相应向量元素的每一位设置为 1，否则将相应向量元素的每一位设置为目标 SIMD&FP 寄存器为0。"
	},
	{
		"name": "vcvt_f16_s16",
		"full name": "float16x4_t vcvt_f16_s16(int16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_f16_s16",
		"full name": "float16x8_t vcvtq_f16_s16(int16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvt_f16_u16",
		"full name": "float16x4_t vcvt_f16_u16(uint16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_f16_u16",
		"full name": "float16x8_t vcvtq_f16_u16(uint16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvt_s16_f16",
		"full name": "int16x4_t vcvt_s16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_s16_f16",
		"full name": "int16x8_t vcvtq_s16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvt_u16_f16",
		"full name": "uint16x4_t vcvt_u16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_u16_f16",
		"full name": "uint16x8_t vcvtq_u16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvta_s16_f16",
		"full name": "int16x4_t vcvta_s16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtaq_s16_f16",
		"full name": "int16x8_t vcvtaq_s16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvta_u16_f16",
		"full name": "uint16x4_t vcvta_u16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtaq_u16_f16",
		"full name": "uint16x8_t vcvtaq_u16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到与 Away（向量）相关的最近值。此指令使用四舍五入模式将向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtm_s16_f16",
		"full name": "int16x4_t vcvtm_s16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmq_s16_f16",
		"full name": "int16x8_t vcvtmq_s16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtm_u16_f16",
		"full name": "uint16x4_t vcvtm_u16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtmq_u16_f16",
		"full name": "uint16x8_t vcvtmq_u16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向负无穷大（向量）舍入。此指令使用向负无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtn_s16_f16",
		"full name": "int16x4_t vcvtn_s16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnq_s16_f16",
		"full name": "int16x8_t vcvtnq_s16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtn_u16_f16",
		"full name": "uint16x4_t vcvtn_u16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtnq_u16_f16",
		"full name": "uint16x8_t vcvtnq_u16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，舍入到最接近的偶数（向量）。此指令使用舍入到最近值舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtp_s16_f16",
		"full name": "int16x4_t vcvtp_s16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtpq_s16_f16",
		"full name": "int16x8_t vcvtpq_s16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为有符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtp_u16_f16",
		"full name": "uint16x4_t vcvtp_u16_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtpq_u16_f16",
		"full name": "uint16x8_t vcvtpq_u16_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为无符号整数，向正无穷大（向量）舍入。此指令使用向正无限舍入模式将标量或向量中的每个元素从浮点值转换为无符号整数值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vneg_f16",
		"full name": "float16x4_t vneg_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点取反（向量）。该指令将源 SIMD&FP 寄存器中每个向量元素的值取反，将结果写入向量，并将向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vnegq_f16",
		"full name": "float16x8_t vnegq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点取反（向量）。该指令将源 SIMD&FP 寄存器中每个向量元素的值取反，将结果写入向量，并将向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vrecpe_f16",
		"full name": "float16x4_t vrecpe_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数估值。此指令为源SIMD&FP寄存器中的每个向量元素查找近似倒数估计值，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrecpeq_f16",
		"full name": "float16x8_t vrecpeq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数估值。此指令为源SIMD&FP寄存器中的每个向量元素查找近似倒数估计值，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrnd_f16",
		"full name": "float16x4_t vrnd_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点朝零舍入到整数（向量）。此指令使用向零舍入模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndq_f16",
		"full name": "float16x8_t vrndq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点朝零舍入到整数（向量）。此指令使用向零舍入模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrnda_f16",
		"full name": "float16x4_t vrnda_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，舍入到与 Away（向量）相关的最近值。此指令将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndaq_f16",
		"full name": "float16x8_t vrndaq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，舍入到与 Away（向量）相关的最近值。此指令将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndi_f16",
		"full name": "float16x4_t vrndi_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "使用当前舍入模式（向量）将浮点舍入为整数。此指令使用FPCR指定的舍入模式，将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndiq_f16",
		"full name": "float16x8_t vrndiq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "使用当前舍入模式（向量）将浮点舍入为整数。此指令使用FPCR指定的舍入模式，将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndm_f16",
		"full name": "float16x4_t vrndm_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，朝向负无穷大（向量）。此指令使用向最小值舍入模式将SIMD&FP源寄存器中的浮点值向向量舍入为大小相同的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndmq_f16",
		"full name": "float16x8_t vrndmq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，朝向负无穷大（向量）。此指令使用向最小值舍入模式将SIMD&FP源寄存器中的浮点值向向量舍入为大小相同的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndn_f16",
		"full name": "float16x4_t vrndn_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，到最接近的偶数（向量）。此指令使用舍入到最近值模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndnq_f16",
		"full name": "float16x8_t vrndnq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，到最接近的偶数（向量）。此指令使用舍入到最近值模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndp_f16",
		"full name": "float16x4_t vrndp_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，朝正无穷大（向量）方向。此指令使用向正无限舍入模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndpq_f16",
		"full name": "float16x8_t vrndpq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点舍入到整数，朝正无穷大（向量）方向。此指令使用向正无限舍入模式将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndx_f16",
		"full name": "float16x4_t vrndx_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点精确舍入到整数，使用当前舍入模式（向量）。此指令使用FPCR指定定的舍入模式，将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrndxq_f16",
		"full name": "float16x8_t vrndxq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点精确舍入到整数，使用当前舍入模式（向量）。此指令使用FPCR指定定的舍入模式，将SIMD&FP源寄存器中的浮点值向量舍入为相同大小的整数浮点值，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vrsqrte_f16",
		"full name": "float16x4_t vrsqrte_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数平方根估值。此指令为源SIMD&FP寄存器中的每个向量元素计算近似平方根，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrsqrteq_f16",
		"full name": "float16x8_t vrsqrteq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数平方根估值。此指令为源SIMD&FP寄存器中的每个向量元素计算近似平方根，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vsqrt_f16",
		"full name": "float16x4_t vsqrt_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点平方根（向量）。此指令计算源SIMD&FP寄存器中每个向量元素的平方根，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vsqrtq_f16",
		"full name": "float16x8_t vsqrtq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点平方根（向量）。此指令计算源SIMD&FP寄存器中每个向量元素的平方根，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vadd_f16",
		"full name": "float16x4_t vadd_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点添加（向量）。此指令在两个源SIMD&FP寄存器中添加相应的向量元素，将结果写入向量，并将向量写入目标SIMD&FP寄存器。此指令中的所有值都是浮点值。"
	},
	{
		"name": "vaddq_f16",
		"full name": "float16x8_t vaddq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点添加（向量）。此指令在两个源SIMD&FP寄存器中添加相应的向量元素，将结果写入向量，并将向量写入目标SIMD&FP寄存器。此指令中的所有值都是浮点值。"
	},
	{
		"name": "vabd_f16",
		"full name": "float16x4_t vabd_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点绝对差值（向量）。此指令从第一源SIMD&FP寄存器元素中的相应浮点值中减去第二源SIMD&FP寄存器元素中的浮点值，将每个结果的绝对值放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vabdq_f16",
		"full name": "float16x8_t vabdq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点绝对差值（向量）。此指令从第一源SIMD&FP寄存器元素中的相应浮点值中减去第二源SIMD&FP寄存器元素中的浮点值，将每个结果的绝对值放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vcage_f16",
		"full name": "uint16x4_t vcage_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点绝对比较大于或等于（向量）。该指令将第一个源SIMD&FP寄存器中每个浮点值的绝对值与第二个源SIMD&FP寄存器中相应浮点值的绝对值进行比较，如果第一个值大于或等于第二个值，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcageq_f16",
		"full name": "uint16x8_t vcageq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点绝对比较大于或等于（向量）。该指令将第一个源SIMD&FP寄存器中每个浮点值的绝对值与第二个源SIMD&FP寄存器中相应浮点值的绝对值进行比较，如果第一个值大于或等于第二个值，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcagt_f16",
		"full name": "uint16x4_t vcagt_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点绝对比较大于（向量）。该指令将第一个源SIMD&FP寄存器中每个浮点值的绝对值与第二个源SIMD&FP寄存器中相应浮点值的绝对值进行比较，如果第一个值大于或等于第二个值，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcagtq_f16",
		"full name": "uint16x8_t vcagtq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点绝对比较大于（向量）。该指令将第一个源SIMD&FP寄存器中每个浮点值的绝对值与第二个源SIMD&FP寄存器中相应浮点值的绝对值进行比较，如果第一个值大于或等于第二个值，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcale_f16",
		"full name": "uint16x4_t vcale_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point absolute compare less than or equal",
		"function_cn": "浮点绝对比较小于或等于"
	},
	{
		"name": "vcaleq_f16",
		"full name": "uint16x8_t vcaleq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point absolute compare less than or equal",
		"function_cn": "浮点绝对比较小于或等于"
	},
	{
		"name": "vcalt_f16",
		"full name": "uint16x4_t vcalt_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point absolute compare less than",
		"function_cn": "浮点绝对比较小于"
	},
	{
		"name": "vcaltq_f16",
		"full name": "uint16x8_t vcaltq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point absolute compare less than",
		"function_cn": "浮点绝对比较小于"
	},
	{
		"name": "vceq_f16",
		"full name": "uint16x4_t vceq_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较等于（向量）。此指令将第一源SIMD&FP寄存器中的每个浮点值与第二源SIMD&FP寄存器中的相应浮点值进行比较，如果比较相等，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vceqq_f16",
		"full name": "uint16x8_t vceqq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较等于（向量）。此指令将第一源SIMD&FP寄存器中的每个浮点值与第二源SIMD&FP寄存器中的相应浮点值进行比较，如果比较相等，则将目标SIMD&FP寄存器中相应向量元素的每一位设置为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcge_f16",
		"full name": "uint16x4_t vcge_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于（向量）。该指令读取第一个源SIMD&FP寄存器中的每个浮点值，如果该值大于或等于第二个源SIMD&FP寄存器中相应的浮点值，则设置目标SIMD&FP中相应向量元素的每个位寄存器为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgeq_f16",
		"full name": "uint16x8_t vcgeq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于或等于（向量）。该指令读取第一个源SIMD&FP寄存器中的每个浮点值，如果该值大于或等于第二个源SIMD&FP寄存器中相应的浮点值，则设置目标SIMD&FP中相应向量元素的每个位寄存器为1，否则将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgt_f16",
		"full name": "uint16x4_t vcgt_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于（向量）。该指令读取第一个源SIMD&FP寄存器中的每个浮点值，如果该值大于第二个源SIMD&FP寄存器中的相应浮点值，则将目标SIMD&FP寄存器中相应向量元素的每个位设置为1，否则，将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcgtq_f16",
		"full name": "uint16x8_t vcgtq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.",
		"function_cn": "浮点比较大于（向量）。该指令读取第一个源SIMD&FP寄存器中的每个浮点值，如果该值大于第二个源SIMD&FP寄存器中的相应浮点值，则将目标SIMD&FP寄存器中相应向量元素的每个位设置为1，否则，将目标SIMD&FP寄存器中相应向量元素的每一位设置为0。"
	},
	{
		"name": "vcle_f16",
		"full name": "uint16x4_t vcle_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point compare less than or equal",
		"function_cn": "浮点比较小于或等于"
	},
	{
		"name": "vcleq_f16",
		"full name": "uint16x8_t vcleq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point compare less than or equal",
		"function_cn": "浮点比较小于或等于"
	},
	{
		"name": "vclt_f16",
		"full name": "uint16x4_t vclt_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point compare less than",
		"function_cn": "浮点比较小于"
	},
	{
		"name": "vcltq_f16",
		"full name": "uint16x8_t vcltq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point compare less than",
		"function_cn": "浮点比较小于"
	},
	{
		"name": "vcvt_n_f16_s16",
		"full name": "float16x4_t vcvt_n_f16_s16(int16x4_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_n_f16_s16",
		"full name": "float16x8_t vcvtq_n_f16_s16(int16x8_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "有符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvt_n_f16_u16",
		"full name": "float16x4_t vcvt_n_f16_u16(uint16x4_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_n_f16_u16",
		"full name": "float16x8_t vcvtq_n_f16_u16(uint16x8_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "无符号定点转换为浮点（向量）。此指令使用FPCR指定的舍入模式将向量中的每个元素从定点转换为浮点，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvt_n_s16_f16",
		"full name": "int16x4_t vcvt_n_s16_f16(float16x4_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvtq_n_s16_f16",
		"full name": "int16x8_t vcvtq_n_s16_f16(float16x8_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点转换为有符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为有符号定点整数，并将结果写入SIMD&FP目标寄存器。"
	},
	{
		"name": "vcvt_n_u16_f16",
		"full name": "uint16x4_t vcvt_n_u16_f16(float16x4_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vcvtq_n_u16_f16",
		"full name": "uint16x8_t vcvtq_n_u16_f16(float16x8_t a,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
		"function_cn": "浮点转换为无符号定点，向零舍入（向量）。此指令使用向零舍入模式将标量或向量中的每个元素从浮点转换为无符号定点整数，并将结果写入通用目标寄存器。"
	},
	{
		"name": "vdiv_f16",
		"full name": "float16x4_t vdiv_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点除法（向量）。此指令将第一源SIMD&FP寄存器中元素中的浮点值除以第二源SIMD&FP寄存器中相应元素中的浮点值，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vdivq_f16",
		"full name": "float16x8_t vdivq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点除法（向量）。此指令将第一源SIMD&FP寄存器中元素中的浮点值除以第二源SIMD&FP寄存器中相应元素中的浮点值，将结果放置在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmax_f16",
		"full name": "float16x4_t vmax_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最大值（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较大的一个放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmaxq_f16",
		"full name": "float16x8_t vmaxq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最大值（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较大的一个放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmaxnm_f16",
		"full name": "float16x4_t vmaxnm_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最大数（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较大的一个写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmaxnmq_f16",
		"full name": "float16x8_t vmaxnmq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最大数（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较大的一个写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmin_f16",
		"full name": "float16x4_t vmin_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最小值（向量）。此指令比较两个源SIMD&FP寄存器中向量中的相应元素，将两个浮点值中较小的一个放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vminq_f16",
		"full name": "float16x8_t vminq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最小值（向量）。此指令比较两个源SIMD&FP寄存器中向量中的相应元素，将两个浮点值中较小的一个放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vminnm_f16",
		"full name": "float16x4_t vminnm_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最小数（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较小的一个写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vminnmq_f16",
		"full name": "float16x8_t vminnmq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点最小数（向量）。此指令比较两个源SIMD&FP寄存器中的相应向量元素，将两个浮点值中较小的一个写入向量，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmul_f16",
		"full name": "float16x4_t vmul_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulq_f16",
		"full name": "float16x8_t vmulq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulx_f16",
		"full name": "float16x4_t vmulx_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxq_f16",
		"full name": "float16x8_t vmulxq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vpadd_f16",
		"full name": "float16x4_t vpadd_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "成对浮点相加（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值相加，将结果放入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpaddq_f16",
		"full name": "float16x8_t vpaddq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "成对浮点相加（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值相加，将结果放入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpmax_f16",
		"full name": "float16x4_t vpmax_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较大的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpmaxq_f16",
		"full name": "float16x8_t vpmaxq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较大的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpmaxnm_f16",
		"full name": "float16x4_t vpmaxnm_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，将每对值中的最大值写入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpmaxnmq_f16",
		"full name": "float16x8_t vpmaxnmq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，将每对值中的最大值写入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpmin_f16",
		"full name": "float16x4_t vpmin_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最小成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较小的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpminq_f16",
		"full name": "float16x8_t vpminq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最小成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较小的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpminnm_f16",
		"full name": "float16x4_t vpminnm_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最小数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，写入每对浮点中的最小元素点值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vpminnmq_f16",
		"full name": "float16x8_t vpminnmq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最小数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，写入每对浮点中的最小元素点值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vrecps_f16",
		"full name": "float16x4_t vrecps_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数步长。此指令将两个源SIMD和FP寄存器向量中相应的浮点值相乘，从2.0中减去每个乘积，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrecpsq_f16",
		"full name": "float16x8_t vrecpsq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数步长。此指令将两个源SIMD和FP寄存器向量中相应的浮点值相乘，从2.0中减去每个乘积，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrsqrts_f16",
		"full name": "float16x4_t vrsqrts_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数平方根步长。此指令将两个源SIMD和FP寄存器向量中相应的浮点值相乘，从3.0中减去每个乘积，将这些结果除以2.0，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vrsqrtsq_f16",
		"full name": "float16x8_t vrsqrtsq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点倒数平方根步长。此指令将两个源SIMD和FP寄存器向量中相应的浮点值相乘，从3.0中减去每个乘积，将这些结果除以2.0，将结果放入向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vsub_f16",
		"full name": "float16x4_t vsub_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点减法（向量）。此指令从第一源SIMD&FP寄存器中向量中的相应元素中减去第二源SIMD&FP寄存器中向量中的元素，将每个结果放入向量的元素中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vsubq_f16",
		"full name": "float16x8_t vsubq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点减法（向量）。此指令从第一源SIMD&FP寄存器中向量中的相应元素中减去第二源SIMD&FP寄存器中向量中的元素，将每个结果放入向量的元素中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vfma_f16",
		"full name": "float16x4_t vfma_f16(float16x4_t a,float16x4_t b,float16x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmaq_f16",
		"full name": "float16x8_t vfmaq_f16(float16x8_t a,float16x8_t b,float16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfms_f16",
		"full name": "float16x4_t vfms_f16(float16x4_t a,float16x4_t b,float16x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmsq_f16",
		"full name": "float16x8_t vfmsq_f16(float16x8_t a,float16x8_t b,float16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfma_lane_f16",
		"full name": "float16x4_t vfma_lane_f16(float16x4_t a,float16x4_t b,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmaq_lane_f16",
		"full name": "float16x8_t vfmaq_lane_f16(float16x8_t a,float16x8_t b,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfma_laneq_f16",
		"full name": "float16x4_t vfma_laneq_f16(float16x4_t a,float16x4_t b,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmaq_laneq_f16",
		"full name": "float16x8_t vfmaq_laneq_f16(float16x8_t a,float16x8_t b,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfma_n_f16",
		"full name": "float16x4_t vfma_n_f16(float16x4_t a,float16x4_t b,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmaq_n_f16",
		"full name": "float16x8_t vfmaq_n_f16(float16x8_t a,float16x8_t b,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmah_lane_f16",
		"full name": "float16_t vfmah_lane_f16(float16_t a,float16_t b,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmah_laneq_f16",
		"full name": "float16_t vfmah_laneq_f16(float16_t a,float16_t b,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "浮点融合乘加到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfms_lane_f16",
		"full name": "float16x4_t vfms_lane_f16(float16x4_t a,float16x4_t b,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmsq_lane_f16",
		"full name": "float16x8_t vfmsq_lane_f16(float16x8_t a,float16x8_t b,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfms_laneq_f16",
		"full name": "float16x4_t vfms_laneq_f16(float16x4_t a,float16x4_t b,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmsq_laneq_f16",
		"full name": "float16x8_t vfmsq_laneq_f16(float16x8_t a,float16x8_t b,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfms_n_f16",
		"full name": "float16x4_t vfms_n_f16(float16x4_t a,float16x4_t b,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmsq_n_f16",
		"full name": "float16x8_t vfmsq_n_f16(float16x8_t a,float16x8_t b,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmsh_lane_f16",
		"full name": "float16_t vfmsh_lane_f16(float16_t a,float16_t b,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmsh_laneq_f16",
		"full name": "float16_t vfmsh_laneq_f16(float16_t a,float16_t b,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 从累加器（向量）中进行浮点融合乘减。该指令将两个源 SIMD&FP 寄存器中向量中对应的浮点值相乘，将乘积取反，将结果与目的 SIMD&FP 寄存器的相应向量元素相加，并将结果写入目的 SIMD&FP 寄存器。"
	},
	{
		"name": "vmul_lane_f16",
		"full name": "float16x4_t vmul_lane_f16(float16x4_t a,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulq_lane_f16",
		"full name": "float16x8_t vmulq_lane_f16(float16x8_t a,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmul_laneq_f16",
		"full name": "float16x4_t vmul_laneq_f16(float16x4_t a,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulq_laneq_f16",
		"full name": "float16x8_t vmulq_laneq_f16(float16x8_t a,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmul_n_f16",
		"full name": "float16x4_t vmul_n_f16(float16x4_t a,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulq_n_f16",
		"full name": "float16x8_t vmulq_n_f16(float16x8_t a,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulh_lane_f16",
		"full name": "float16_t vmulh_lane_f16(float16_t a,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulh_laneq_f16",
		"full name": "float16_t vmulh_laneq_f16(float16_t a,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法（向量）。此指令将两个源SIMD&FP寄存器中向量中相应的浮点值相乘，将结果放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulx_lane_f16",
		"full name": "float16x4_t vmulx_lane_f16(float16x4_t a,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxq_lane_f16",
		"full name": "float16x8_t vmulxq_lane_f16(float16x8_t a,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulx_laneq_f16",
		"full name": "float16x4_t vmulx_laneq_f16(float16x4_t a,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxq_laneq_f16",
		"full name": "float16x8_t vmulxq_laneq_f16(float16x8_t a,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulx_n_f16",
		"full name": "float16x4_t vmulx_n_f16(float16x4_t a,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxq_n_f16",
		"full name": "float16x8_t vmulxq_n_f16(float16x8_t a,float16_t n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxh_lane_f16",
		"full name": "float16_t vmulxh_lane_f16(float16_t a,float16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmulxh_laneq_f16",
		"full name": "float16_t vmulxh_laneq_f16(float16_t a,float16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "浮点乘法扩展。此指令将两个源SIMD&FP寄存器向量中相应的浮点值相乘，将所得浮点值放在向量中，并将向量写入目标SIMD&FP寄存器。"
	},
	{
		"name": "vmaxv_f16",
		"full name": "float16_t vmaxv_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较大的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vmaxvq_f16",
		"full name": "float16_t vmaxvq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较大的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vminv_f16",
		"full name": "float16_t vminv_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较大的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vminvq_f16",
		"full name": "float16_t vminvq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，从连接的向量中读取每对相邻的向量元素，将每对值中较大的值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vmaxnmv_f16",
		"full name": "float16_t vmaxnmv_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，将每对值中的最大值写入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vmaxnmvq_f16",
		"full name": "float16_t vmaxnmvq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最大数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，将每对值中的最大值写入一个向量，并将该向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vminnmv_f16",
		"full name": "float16_t vminnmv_f16(float16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最小数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，写入每对浮点中的最小元素点值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vminnmvq_f16",
		"full name": "float16_t vminnmvq_f16(float16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.",
		"function_cn": "浮点最小数成对（向量）。该指令通过在第二个源 SIMD&FP 寄存器的向量元素之后连接第一个源 SIMD&FP 寄存器的向量元素来创建一个向量，读取两个源 SIMD&FP 寄存器中的每对相邻向量元素，写入每对浮点中的最小元素点值写入向量，并将向量写入目标 SIMD&FP 寄存器。该指令中的所有值都是浮点值。"
	},
	{
		"name": "vbsl_f16",
		"full name": "float16x4_t vbsl_f16(uint16x4_t a,float16x4_t b,float16x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.",
		"function_cn": "按位选择。当原始目标位为1时，此指令将目标SIMD&FP寄存器中的每个位设置为第一个源SIMD&FP寄存器的相应位，否则设置为第二个源SIMD&FP寄存器的相应位。"
	},
	{
		"name": "vbslq_f16",
		"full name": "float16x8_t vbslq_f16(uint16x8_t a,float16x8_t b,float16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.",
		"function_cn": "按位选择。当原始目标位为1时，此指令将目标SIMD&FP寄存器中的每个位设置为第一个源SIMD&FP寄存器的相应位，否则设置为第二个源SIMD&FP寄存器的相应位。"
	},
	{
		"name": "vzip_f16",
		"full name": "float16x4x2_t vzip_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
		"function_cn": "压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器的上半部分读取相邻的向量元素成对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vzipq_f16",
		"full name": "float16x8x2_t vzipq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
		"function_cn": "压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器的上半部分读取相邻的向量元素成对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vuzp_f16",
		"full name": "float16x4x2_t vuzp_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "解压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器中读取对应的奇数向量元素，将第一个源寄存器的结果放入向量下半部分的连续元素中，将第二个源寄存器的结果放入上半部分的连续元素中向量，并将向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vuzpq_f16",
		"full name": "float16x8x2_t vuzpq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "解压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器中读取对应的奇数向量元素，将第一个源寄存器的结果放入向量下半部分的连续元素中，将第二个源寄存器的结果放入上半部分的连续元素中向量，并将向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vtrn_f16",
		"full name": "float16x4x2_t vtrn_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Transpose elements",
		"function_cn": "转置元素"
	},
	{
		"name": "vtrnq_f16",
		"full name": "float16x8x2_t vtrnq_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Transpose elements",
		"function_cn": "转置元素"
	},
	{
		"name": "vmov_n_f16",
		"full name": "float16x4_t vmov_n_f16(float16_t value)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vmovq_n_f16",
		"full name": "float16x8_t vmovq_n_f16(float16_t value)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdup_n_f16",
		"full name": "float16x4_t vdup_n_f16(float16_t value)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdupq_n_f16",
		"full name": "float16x8_t vdupq_n_f16(float16_t value)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdup_lane_f16",
		"full name": "float16x4_t vdup_lane_f16(float16x4_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Set all vector lanes to the same value",
		"function_cn": " 将所有向量并行道设置为相同的值"
	},
	{
		"name": "vdupq_lane_f16",
		"full name": "float16x8_t vdupq_lane_f16(float16x4_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Set all vector lanes to the same value",
		"function_cn": " 将所有向量并行道设置为相同的值"
	},
	{
		"name": "vext_f16",
		"full name": "float16x4_t vext_f16(float16x4_t a,float16x4_t b,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.",
		"function_cn": "从向量对中提取向量。该指令从第二个源 SIMD&FP 寄存器中提取最低向量元素，从第一个源 SIMD&FP 寄存器中提取最高向量元素，将结果连接成一个向量，并将该向量写入目标 SIMD&FP 寄存器向量。索引值指定要从第一个源寄存器中提取的最低向量元素，然后从第一个源寄存器中提取连续元素，然后是第二个源寄存器，直到填满目标向量。 "
	},
	{
		"name": "vextq_f16",
		"full name": "float16x8_t vextq_f16(float16x8_t a,float16x8_t b,const int n)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.",
		"function_cn": "从向量对中提取向量。该指令从第二个源 SIMD&FP 寄存器中提取最低向量元素，从第一个源 SIMD&FP 寄存器中提取最高向量元素，将结果连接成一个向量，并将该向量写入目标 SIMD&FP 寄存器向量。索引值指定要从第一个源寄存器中提取的最低向量元素，然后从第一个源寄存器中提取连续元素，然后是第二个源寄存器，直到填满目标向量。 "
	},
	{
		"name": "vrev64_f16",
		"full name": "float16x4_t vrev64_f16(float16x4_t vec)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": " 反转 64 位双字（向量）中的元素。该指令反转源 SIMD&FP 寄存器中向量的每个双字中 8 位、16 位或 32 位元素的顺序，将结果放入一个向量中，并将该向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vrev64q_f16",
		"full name": "float16x8_t vrev64q_f16(float16x8_t vec)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": " 反转 64 位双字（向量）中的元素。该指令反转源 SIMD&FP 寄存器中向量的每个双字中 8 位、16 位或 32 位元素的顺序，将结果放入一个向量中，并将该向量写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vzip1_f16",
		"full name": "float16x4_t vzip1_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
		"function_cn": "压缩向量（主要）。该指令从两个源 SIMD&FP 寄存器的下半部分读取相邻的向量元素作为对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vzip1q_f16",
		"full name": "float16x8_t vzip1q_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
		"function_cn": "压缩向量（主要）。该指令从两个源 SIMD&FP 寄存器的下半部分读取相邻的向量元素作为对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vzip2_f16",
		"full name": "float16x4_t vzip2_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
		"function_cn": "压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器的上半部分读取相邻的向量元素成对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vzip2q_f16",
		"full name": "float16x8_t vzip2q_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
		"function_cn": "压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器的上半部分读取相邻的向量元素成对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vuzp1_f16",
		"full name": "float16x4_t vuzp1_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "解压缩向量（主要）。该指令从两个源 SIMD&FP 寄存器中读取对应的偶数向量元素，从零开始，将第一个源寄存器的结果放入向量下半部分的连续元素中，将第二个源寄存器的结果放入连续元素中在向量的上半部分，并将向量写入目标 SIMD&FP 寄存器。\n\n"
	},
	{
		"name": "vuzp1q_f16",
		"full name": "float16x8_t vuzp1q_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "解压缩向量（主要）。该指令从两个源 SIMD&FP 寄存器中读取对应的偶数向量元素，从零开始，将第一个源寄存器的结果放入向量下半部分的连续元素中，将第二个源寄存器的结果放入连续元素中在向量的上半部分，并将向量写入目标 SIMD&FP 寄存器。\n\n"
	},
	{
		"name": "vuzp2_f16",
		"full name": "float16x4_t vuzp2_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器的上半部分读取相邻的向量元素成对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vuzp2q_f16",
		"full name": "float16x8_t vuzp2q_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "压缩向量（次要）。该指令从两个源 SIMD&FP 寄存器的上半部分读取相邻的向量元素成对，将这些对交错并将它们放入一个向量中，然后将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的第一对被放置到两个最低的向量元素中，随后的对从每个源寄存器中被交替取出。"
	},
	{
		"name": "vtrn1_f16",
		"full name": "float16x4_t vtrn1_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.",
		"function_cn": "转置向量（主要）。该指令从两个源 SIMD&FP 寄存器中读取对应的偶数向量元素，从零开始，将每个结果放入向量的连续元素中，并将向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的向量元素被放置到目标向量的偶数元素中，从零开始，而来自第二个源寄存器的向量元素被放置到目标向量的奇数元素中。 "
	},
	{
		"name": "vtrn1q_f16",
		"full name": "float16x8_t vtrn1q_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.",
		"function_cn": "转置向量（主要）。该指令从两个源 SIMD&FP 寄存器中读取对应的偶数向量元素，从零开始，将每个结果放入向量的连续元素中，并将向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的向量元素被放置到目标向量的偶数元素中，从零开始，而来自第二个源寄存器的向量元素被放置到目标向量的奇数元素中。 "
	},
	{
		"name": "vtrn2_f16",
		"full name": "float16x4_t vtrn2_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.",
		"function_cn": " 转置向量（次要）。该指令从两个源 SIMD&FP 寄存器中读取对应的奇数向量元素，将每个结果放入向量的连续元素中，并将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的向量元素被放置到目标向量的偶数元素中，从零开始，而来自第二个源寄存器的向量元素被放置到目标向量的奇数元素中。"
	},
	{
		"name": "vtrn2q_f16",
		"full name": "float16x8_t vtrn2q_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.",
		"function_cn": " 转置向量（次要）。该指令从两个源 SIMD&FP 寄存器中读取对应的奇数向量元素，将每个结果放入向量的连续元素中，并将该向量写入目标 SIMD&FP 寄存器。来自第一个源寄存器的向量元素被放置到目标向量的偶数元素中，从零开始，而来自第二个源寄存器的向量元素被放置到目标向量的奇数元素中。"
	},
	{
		"name": "vdup_laneq_f16",
		"full name": "float16x4_t vdup_laneq_f16(float16x8_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Set all vector lanes to the same value",
		"function_cn": " 将所有向量并行道设置为相同的值"
	},
	{
		"name": "vdupq_laneq_f16",
		"full name": "float16x8_t vdupq_laneq_f16(float16x8_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Set all vector lanes to the same value",
		"function_cn": " 将所有向量并行道设置为相同的值"
	},
	{
		"name": "vduph_lane_f16",
		"full name": "float16_t vduph_lane_f16(float16x4_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Set all vector lanes to the same value",
		"function_cn": " 将所有向量并行道设置为相同的值"
	},
	{
		"name": "vduph_laneq_f16",
		"full name": "float16_t vduph_laneq_f16(float16x8_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Set all vector lanes to the same value",
		"function_cn": " 将所有向量并行道设置为相同的值"
	},
	{
		"name": "vdot_u32",
		"full name": "uint32x2_t vdot_u32(uint32x2_t r,uint8x8_t a,uint8x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积无符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位元素与第二个源寄存器中相应 32 位元素的四个无符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。 "
	},
	{
		"name": "vdot_s32",
		"full name": "int32x2_t vdot_s32(int32x2_t r,int8x8_t a,int8x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积有符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个有符号 8 位元素与第二个源寄存器中相应 32 位元素的四个有符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。"
	},
	{
		"name": "vdotq_u32",
		"full name": "uint32x4_t vdotq_u32(uint32x4_t r,uint8x16_t a,uint8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积无符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位元素与第二个源寄存器中相应 32 位元素的四个无符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。 "
	},
	{
		"name": "vdotq_s32",
		"full name": "int32x4_t vdotq_s32(int32x4_t r,int8x16_t a,int8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积有符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个有符号 8 位元素与第二个源寄存器中相应 32 位元素的四个有符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。"
	},
	{
		"name": "vdot_lane_u32",
		"full name": "uint32x2_t vdot_lane_u32(uint32x2_t r,uint8x8_t a,uint8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积无符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位元素与第二个源寄存器中相应 32 位元素的四个无符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。 "
	},
	{
		"name": "vdot_lane_s32",
		"full name": "int32x2_t vdot_lane_s32(int32x2_t r,int8x8_t a,int8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积有符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个有符号 8 位元素与第二个源寄存器中相应 32 位元素的四个有符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。"
	},
	{
		"name": "vdotq_laneq_u32",
		"full name": "uint32x4_t vdotq_laneq_u32(uint32x4_t r,uint8x16_t a,uint8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积无符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位元素与第二个源寄存器中相应 32 位元素的四个无符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。 "
	},
	{
		"name": "vdotq_laneq_s32",
		"full name": "int32x4_t vdotq_laneq_s32(int32x4_t r,int8x16_t a,int8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积有符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个有符号 8 位元素与第二个源寄存器中相应 32 位元素的四个有符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。"
	},
	{
		"name": "vdot_laneq_u32",
		"full name": "uint32x2_t vdot_laneq_u32(uint32x2_t r,uint8x8_t a,uint8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积无符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位元素与第二个源寄存器中相应 32 位元素的四个无符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。 "
	},
	{
		"name": "vdot_laneq_s32",
		"full name": "int32x2_t vdot_laneq_s32(int32x2_t r,int8x8_t a,int8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积有符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个有符号 8 位元素与第二个源寄存器中相应 32 位元素的四个有符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。"
	},
	{
		"name": "vdotq_lane_u32",
		"full name": "uint32x4_t vdotq_lane_u32(uint32x4_t r,uint8x16_t a,uint8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积无符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位元素与第二个源寄存器中相应 32 位元素的四个无符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。 "
	},
	{
		"name": "vdotq_lane_s32",
		"full name": "int32x4_t vdotq_lane_s32(int32x4_t r,int8x16_t a,int8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "点积有符号算术（向量）。此指令执行第一个源寄存器的每个 32 位元素中的四个有符号 8 位元素与第二个源寄存器中相应 32 位元素的四个有符号 8 位元素的点积，将结果累加到目标寄存器的相应 32 位元素。"
	},
	{
		"name": "vsha512hq_u64",
		"full name": "uint64x2_t vsha512hq_u64(uint64x2_t hash_ed,uint64x2_t hash_gf,uint64x2_t kwh_kwh2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SHA512 Hash update part 1 takes the values from the three 128-bit source SIMD&FP registers and produces a 128-bit output value that combines the sigma1 and chi functions of two iterations of the SHA512 computation. It returns this value to the destination SIMD&FP register.",
		"function_cn": "SHA512 哈希更新第 1 部分从三个 128 位源 SIMD&FP 寄存器中获取值，并生成一个 128 位输出值，该值结合了 SHA512 计算的两次迭代的 sigma1 和 chi 函数。它将此值返回到目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vsha512h2q_u64",
		"full name": "uint64x2_t vsha512h2q_u64(uint64x2_t sum_ab,uint64x2_t hash_c_,uint64x2_t hash_ab)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SHA512 Hash update part 2 takes the values from the three 128-bit source SIMD&FP registers and produces a 128-bit output value that combines the sigma0 and majority functions of two iterations of the SHA512 computation. It returns this value to the destination SIMD&FP register.",
		"function_cn": "SHA512 哈希更新第 2 部分从三个 128 位源 SIMD&FP 寄存器中获取值，并生成一个 128 位输出值，该值结合了 SHA512 计算的两次迭代的 sigma0 和多数函数。它将此值返回到目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vsha512su0q_u64",
		"full name": "uint64x2_t vsha512su0q_u64(uint64x2_t w0_1,uint64x2_t w2_)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SHA512 Schedule Update 0 takes the values from the two 128-bit source SIMD&FP registers and produces a 128-bit output value that combines the gamma0 functions of two iterations of the SHA512 schedule update that are performed after the first 16 iterations within a block. It returns this value to the destination SIMD&FP register.",
		"function_cn": " SHA512 调度更新 0 从两个 128 位源 SIMD&FP 寄存器中获取值，并产生一个 128 位输出值，该值结合了 SHA512 调度更新的两次迭代的 gamma0 函数，这些函数在块内的前 16 次迭代之后执行。它将此值返回到目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vsha512su1q_u64",
		"full name": "uint64x2_t vsha512su1q_u64(uint64x2_t s01_s02,uint64x2_t w14_15,uint64x2_t w9_10)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SHA512 Schedule Update 1 takes the values from the three source SIMD&FP registers and produces a 128-bit output value that combines the gamma1 functions of two iterations of the SHA512 schedule update that are performed after the first 16 iterations within a block. It returns this value to the destination SIMD&FP register.",
		"function_cn": " SHA512 调度更新 1 从三个源 SIMD&FP 寄存器中获取值并生成一个 128 位输出值，该值结合了 SHA512 调度更新的两次迭代的 gamma1 函数，这些函数在块内的前 16 次迭代之后执行。它将此值返回到目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_u8",
		"full name": "uint8x16_t veor3q_u8(uint8x16_t a,uint8x16_t b,uint8x16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_u16",
		"full name": "uint16x8_t veor3q_u16(uint16x8_t a,uint16x8_t b,uint16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_u32",
		"full name": "uint32x4_t veor3q_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_u64",
		"full name": "uint64x2_t veor3q_u64(uint64x2_t a,uint64x2_t b,uint64x2_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_s8",
		"full name": "int8x16_t veor3q_s8(int8x16_t a,int8x16_t b,int8x16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_s16",
		"full name": "int16x8_t veor3q_s16(int16x8_t a,int16x8_t b,int16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_s32",
		"full name": "int32x4_t veor3q_s32(int32x4_t a,int32x4_t b,int32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "veor3q_s64",
		"full name": "int64x2_t veor3q_s64(int64x2_t a,int64x2_t b,int64x2_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.",
		"function_cn": "三路异或对三个源 SIMD&FP 寄存器中的值执行三路异或，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vrax1q_u64",
		"full name": "uint64x2_t vrax1q_u64(uint64x2_t a,uint64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Rotate and Exclusive OR rotates each 64-bit element of the 128-bit vector in a source SIMD&FP register left by 1, performs a bitwise exclusive OR of the resulting 128-bit vector and the vector in another source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "循环和异或将源 SIMD&FP 寄存器中的 128 位向量的每个 64 位元素左循环 1，对得到的 128 位向量和另一个源 SIMD&FP 寄存器中的向量执行按位异或，然后写入结果到目标 SIMD&FP 寄存器。 "
	},
	{
		"name": "vxarq_u64",
		"full name": "uint64x2_t vxarq_u64(uint64x2_t a,uint64x2_t b,const int imm6)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Exclusive OR and Rotate performs a bitwise exclusive OR of the 128-bit vectors in the two source SIMD&FP registers, rotates each 64-bit element of the resulting 128-bit vector right by the value specified by a 6-bit immediate value, and writes the result to the destination SIMD&FP register.",
		"function_cn": "异或和旋转对两个源 SIMD&FP 寄存器中的 128 位向量执行按位异或，将结果 128 位向量的每个 64 位元素向右旋转 6 位立即数指定的值，然后写入结果到目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_u8",
		"full name": "uint8x16_t vbcaxq_u8(uint8x16_t a,uint8x16_t b,uint8x16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_u16",
		"full name": "uint16x8_t vbcaxq_u16(uint16x8_t a,uint16x8_t b,uint16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_u32",
		"full name": "uint32x4_t vbcaxq_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_u64",
		"full name": "uint64x2_t vbcaxq_u64(uint64x2_t a,uint64x2_t b,uint64x2_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_s8",
		"full name": "int8x16_t vbcaxq_s8(int8x16_t a,int8x16_t b,int8x16_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_s16",
		"full name": "int16x8_t vbcaxq_s16(int16x8_t a,int16x8_t b,int16x8_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_s32",
		"full name": "int32x4_t vbcaxq_s32(int32x4_t a,int32x4_t b,int32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vbcaxq_s64",
		"full name": "int64x2_t vbcaxq_s64(int64x2_t a,int64x2_t b,int64x2_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.",
		"function_cn": "位清除和异或对源 SIMD&FP 寄存器中的 128 位向量与另一个源 SIMD&FP 寄存器中的余向量执行按位运算，然后对结果向量和第三个源 SIMD&FP 寄存器中的向量执行按位异或运算，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vsm3ss1q_u32",
		"full name": "uint32x4_t vsm3ss1q_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3SS1 rotates the top 32 bits of the 128-bit vector in the first source SIMD&FP register by 12, and adds that 32-bit value to the two other 32-bit values held in the top 32 bits of each of the 128-bit vectors in the second and third source SIMD&FP registers, rotating this result left by 7 and writing the final result into the top 32 bits of the vector in the destination SIMD&FP register, with the bottom 96 bits of the vector being written to 0.",
		"function_cn": "SM3SS1 将第一个源 SIMD&FP 寄存器中 128 位向量的前 32 位循环 12，并将该 32 位值与保存在第二个和第三个源 SIMD&FP 寄存器中的每个 128 位向量的前 32 位中的另外两个 32 位值相加，将此结果向左循环 7，并将最终结果写入目标 SIMD&FP 寄存器中向量的前 32 位，向量的后 96 位写入 0。 "
	},
	{
		"name": "vsm3tt1aq_u32",
		"full name": "uint32x4_t vsm3tt1aq_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c,const int imm2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3TT1A takes three 128-bit vectors from three source SIMD&FP registers and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&FP register. It performs a three-way exclusive OR of the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
		"function_cn": "SM3TT1A 从三个源 SIMD&FP 寄存器中获取三个 128 位向量和一个 2 位立即数索引值，并在目标 SIMD&FP 寄存器中返回一个 128 位结果。它对保存在第一个源向量的上三个元素中的三个 32 位字段执行三向异或，并将结果 32 位值与以下三个其他 32 位值相加：\n\n "
	},
	{
		"name": "vsm3tt1bq_u32",
		"full name": "uint32x4_t vsm3tt1bq_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c,const int imm2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3TT1B takes three 128-bit vectors from three source SIMD&FP registers and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&FP register. It performs a 32-bit majority function between the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
		"function_cn": "SM3TT1B 从三个源 SIMD&FP 寄存器中获取三个 128 位向量和一个 2 位立即数索引值，并在目标 SIMD&FP 寄存器中返回一个 128 位结果。它在第一个源向量的上三个元素中保存的三个 32 位字段之间执行 32 位多数函数，并将结果 32 位值和以下三个其他 32 位值相加： "
	},
	{
		"name": "vsm3tt2aq_u32",
		"full name": "uint32x4_t vsm3tt2aq_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c,const int imm2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3TT2A takes three 128-bit vectors from three source SIMD&FP register and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&FP register. It performs a three-way exclusive OR of the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
		"function_cn": "SM3TT2A 从三个源 SIMD&FP 寄存器中获取三个 128 位向量和一个 2 位立即数索引值，并在目标 SIMD&FP 寄存器中返回一个 128 位结果。它对保存在第一个源向量的上三个元素中的三个 32 位字段执行三向异或，并将结果 32 位值与以下三个其他 32 位值相加："
	},
	{
		"name": "vsm3tt2bq_u32",
		"full name": "uint32x4_t vsm3tt2bq_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c,const int imm2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3TT2B takes three 128-bit vectors from three source SIMD&FP registers, and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&FP register. It performs a 32-bit majority function between the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
		"function_cn": "SM3TT2B 从三个源 SIMD&FP 寄存器中获取三个 128 位向量和一个 2 位立即数索引值，并在目标 SIMD&FP 寄存器中返回一个 128 位结果。它在第一个源向量的上三个元素中保存的三个 32 位字段之间执行 32 位多数函数，并将结果 32 位值和以下三个其他 32 位值相加： "
	},
	{
		"name": "vsm3partw1q_u32",
		"full name": "uint32x4_t vsm3partw1q_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3PARTW1 takes three 128-bit vectors from the three source SIMD&FP registers and returns a 128-bit result in the destination SIMD&FP register. The result is obtained by a three-way exclusive OR of the elements within the input vectors with some fixed rotations, see the Operation pseudocode for more information.",
		"function_cn": "SM3PARTW1 从三个源 SIMD&FP 寄存器中获取三个 128 位向量，并在目标 SIMD&FP 寄存器中返回一个 128 位结果。结果是通过输入向量中元素具有一些固定旋转的三路异或获得的，有关更多信息，请参阅操作伪代码。"
	},
	{
		"name": "vsm3partw2q_u32",
		"full name": "uint32x4_t vsm3partw2q_u32(uint32x4_t a,uint32x4_t b,uint32x4_t c)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM3PARTW2 takes three 128-bit vectors from three source SIMD&FP registers and returns a 128-bit result in the destination SIMD&FP register. The result is obtained by a three-way exclusive OR of the elements within the input vectors with some fixed rotations, see the Operation pseudocode for more information.",
		"function_cn": "SM3PARTW2 从三个源 SIMD&FP 寄存器中获取三个 128 位向量，并在目标 SIMD&FP 寄存器中返回一个 128 位结果。结果是通过输入向量中元素具有一些固定旋转的三路异或获得的，有关更多信息，请参阅操作伪代码。 "
	},
	{
		"name": "vsm4eq_u32",
		"full name": "uint32x4_t vsm4eq_u32(uint32x4_t a,uint32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM4 Encode takes input data as a 128-bit vector from the first source SIMD&FP register, and four iterations of the round key held as the elements of the 128-bit vector in the second source SIMD&FP register. It encrypts the data by four rounds, in accordance with the SM4 standard, returning the 128-bit result to the destination SIMD&FP register.",
		"function_cn": "SM4 Encode 将输入数据作为来自第一个源 SIMD&FP 寄存器的 128 位向量，并将轮密钥的四次迭代作为第二个源 SIMD&FP 寄存器中的 128 位向量的元素。它按照SM4标准对数据进行四轮加密，将128位结果返回到目的SIMD&FP寄存器。"
	},
	{
		"name": "vsm4ekeyq_u32",
		"full name": "uint32x4_t vsm4ekeyq_u32(uint32x4_t a,uint32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "SM4 Key takes an input as a 128-bit vector from the first source SIMD&FP register and a 128-bit constant from the second SIMD&FP register. It derives four iterations of the output key, in accordance with the SM4 standard, returning the 128-bit result to the destination SIMD&FP register.",
		"function_cn": "SM4 Key 将输入值作为来自第一个源 SIMD&FP 寄存器的 128 位向量和来自第二个 SIMD&FP 寄存器的 128 位常量。它根据 SM4 标准导出输出密钥的四次迭代，将 128 位结果返回到目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vfmlal_low_f16",
		"full name": "float32x2_t vfmlal_low_f16(float32x2_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlsl_low_f16",
		"full name": "float32x2_t vfmlsl_low_f16(float32x2_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlalq_low_f16",
		"full name": "float32x4_t vfmlalq_low_f16(float32x4_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlslq_low_f16",
		"full name": "float32x4_t vfmlslq_low_f16(float32x4_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlal_high_f16",
		"full name": "float32x2_t vfmlal_high_f16(float32x2_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlsl_high_f16",
		"full name": "float32x2_t vfmlsl_high_f16(float32x2_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlalq_high_f16",
		"full name": "float32x4_t vfmlalq_high_f16(float32x4_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlslq_high_f16",
		"full name": "float32x4_t vfmlslq_high_f16(float32x4_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlal_lane_low_f16",
		"full name": "float32x2_t vfmlal_lane_low_f16(float32x2_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlal_laneq_low_f16",
		"full name": "float32x2_t vfmlal_laneq_low_f16(float32x2_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlalq_lane_low_f16",
		"full name": "float32x4_t vfmlalq_lane_low_f16(float32x4_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlalq_laneq_low_f16",
		"full name": "float32x4_t vfmlalq_laneq_low_f16(float32x4_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlsl_lane_low_f16",
		"full name": "float32x2_t vfmlsl_lane_low_f16(float32x2_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlsl_laneq_low_f16",
		"full name": "float32x2_t vfmlsl_laneq_low_f16(float32x2_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlslq_lane_low_f16",
		"full name": "float32x4_t vfmlslq_lane_low_f16(float32x4_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlslq_laneq_low_f16",
		"full name": "float32x4_t vfmlslq_laneq_low_f16(float32x4_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlal_lane_high_f16",
		"full name": "float32x2_t vfmlal_lane_high_f16(float32x2_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlsl_lane_high_f16",
		"full name": "float32x2_t vfmlsl_lane_high_f16(float32x2_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlalq_lane_high_f16",
		"full name": "float32x4_t vfmlalq_lane_high_f16(float32x4_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlslq_lane_high_f16",
		"full name": "float32x4_t vfmlslq_lane_high_f16(float32x4_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlal_laneq_high_f16",
		"full name": "float32x2_t vfmlal_laneq_high_f16(float32x2_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlsl_laneq_high_f16",
		"full name": "float32x2_t vfmlsl_laneq_high_f16(float32x2_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vfmlalq_laneq_high_f16",
		"full name": "float32x4_t vfmlalq_laneq_high_f16(float32x4_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "浮点融合乘加Long到累加器（向量）。该指令将两个源 SIMD&FP 寄存器中向量中对应的半精度浮点值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。"
	},
	{
		"name": "vfmlslq_laneq_high_f16",
		"full name": "float32x4_t vfmlslq_laneq_high_f16(float32x4_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.",
		"function_cn": "从累加器（向量）中进行浮点融合乘减Long。该指令将一个 SIMD&FP 寄存器的向量中的值取反，将这些值与另一个向量中的相应值相乘，并将乘积累加到目标 SIMD&FP 寄存器的相应向量元素中。该指令不会在累加之前舍入乘法的结果。 "
	},
	{
		"name": "vcadd_rot90_f16",
		"full name": "float16x4_t vcadd_rot90_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcadd_rot90_f32",
		"full name": "float32x2_t vcadd_rot90_f32(float32x2_t a,float32x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcaddq_rot90_f16",
		"full name": "float16x8_t vcaddq_rot90_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcaddq_rot90_f32",
		"full name": "float32x4_t vcaddq_rot90_f32(float32x4_t a,float32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcaddq_rot90_f64",
		"full name": "float64x2_t vcaddq_rot90_f64(float64x2_t a,float64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcadd_rot270_f16",
		"full name": "float16x4_t vcadd_rot270_f16(float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcadd_rot270_f32",
		"full name": "float32x2_t vcadd_rot270_f32(float32x2_t a,float32x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcaddq_rot270_f16",
		"full name": "float16x8_t vcaddq_rot270_f16(float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcaddq_rot270_f32",
		"full name": "float32x4_t vcaddq_rot270_f32(float32x4_t a,float32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcaddq_rot270_f64",
		"full name": "float64x2_t vcaddq_rot270_f64(float64x2_t a,float64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Add.",
		"function_cn": "浮点复数相加。"
	},
	{
		"name": "vcmla_f16",
		"full name": "float16x4_t vcmla_f16(float16x4_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_f32",
		"full name": "float32x2_t vcmla_f32(float32x2_t r,float32x2_t a,float32x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_lane_f16",
		"full name": "float16x4_t vcmla_lane_f16(float16x4_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_lane_f32",
		"full name": "float32x2_t vcmla_lane_f32(float32x2_t r,float32x2_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_laneq_f16",
		"full name": "float16x4_t vcmla_laneq_f16(float16x4_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_laneq_f32",
		"full name": "float32x2_t vcmla_laneq_f32(float32x2_t r,float32x2_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_f16",
		"full name": "float16x8_t vcmlaq_f16(float16x8_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_f32",
		"full name": "float32x4_t vcmlaq_f32(float32x4_t r,float32x4_t a,float32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_f64",
		"full name": "float64x2_t vcmlaq_f64(float64x2_t r,float64x2_t a,float64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_lane_f16",
		"full name": "float16x8_t vcmlaq_lane_f16(float16x8_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_lane_f32",
		"full name": "float32x4_t vcmlaq_lane_f32(float32x4_t r,float32x4_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_laneq_f16",
		"full name": "float16x8_t vcmlaq_laneq_f16(float16x8_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_laneq_f32",
		"full name": "float32x4_t vcmlaq_laneq_f32(float32x4_t r,float32x4_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot90_f16",
		"full name": "float16x4_t vcmla_rot90_f16(float16x4_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot90_f32",
		"full name": "float32x2_t vcmla_rot90_f32(float32x2_t r,float32x2_t a,float32x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot90_lane_f16",
		"full name": "float16x4_t vcmla_rot90_lane_f16(float16x4_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot90_lane_f32",
		"full name": "float32x2_t vcmla_rot90_lane_f32(float32x2_t r,float32x2_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot90_laneq_f16",
		"full name": "float16x4_t vcmla_rot90_laneq_f16(float16x4_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot90_laneq_f32",
		"full name": "float32x2_t vcmla_rot90_laneq_f32(float32x2_t r,float32x2_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_f16",
		"full name": "float16x8_t vcmlaq_rot90_f16(float16x8_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_f32",
		"full name": "float32x4_t vcmlaq_rot90_f32(float32x4_t r,float32x4_t a,float32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_f64",
		"full name": "float64x2_t vcmlaq_rot90_f64(float64x2_t r,float64x2_t a,float64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_lane_f16",
		"full name": "float16x8_t vcmlaq_rot90_lane_f16(float16x8_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_lane_f32",
		"full name": "float32x4_t vcmlaq_rot90_lane_f32(float32x4_t r,float32x4_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_laneq_f16",
		"full name": "float16x8_t vcmlaq_rot90_laneq_f16(float16x8_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot90_laneq_f32",
		"full name": "float32x4_t vcmlaq_rot90_laneq_f32(float32x4_t r,float32x4_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot180_f16",
		"full name": "float16x4_t vcmla_rot180_f16(float16x4_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot180_f32",
		"full name": "float32x2_t vcmla_rot180_f32(float32x2_t r,float32x2_t a,float32x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot180_lane_f16",
		"full name": "float16x4_t vcmla_rot180_lane_f16(float16x4_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot180_lane_f32",
		"full name": "float32x2_t vcmla_rot180_lane_f32(float32x2_t r,float32x2_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot180_laneq_f16",
		"full name": "float16x4_t vcmla_rot180_laneq_f16(float16x4_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot180_laneq_f32",
		"full name": "float32x2_t vcmla_rot180_laneq_f32(float32x2_t r,float32x2_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_f16",
		"full name": "float16x8_t vcmlaq_rot180_f16(float16x8_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_f32",
		"full name": "float32x4_t vcmlaq_rot180_f32(float32x4_t r,float32x4_t a,float32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_f64",
		"full name": "float64x2_t vcmlaq_rot180_f64(float64x2_t r,float64x2_t a,float64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_lane_f16",
		"full name": "float16x8_t vcmlaq_rot180_lane_f16(float16x8_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_lane_f32",
		"full name": "float32x4_t vcmlaq_rot180_lane_f32(float32x4_t r,float32x4_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_laneq_f16",
		"full name": "float16x8_t vcmlaq_rot180_laneq_f16(float16x8_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot180_laneq_f32",
		"full name": "float32x4_t vcmlaq_rot180_laneq_f32(float32x4_t r,float32x4_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot270_f16",
		"full name": "float16x4_t vcmla_rot270_f16(float16x4_t r,float16x4_t a,float16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot270_f32",
		"full name": "float32x2_t vcmla_rot270_f32(float32x2_t r,float32x2_t a,float32x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot270_lane_f16",
		"full name": "float16x4_t vcmla_rot270_lane_f16(float16x4_t r,float16x4_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot270_lane_f32",
		"full name": "float32x2_t vcmla_rot270_lane_f32(float32x2_t r,float32x2_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot270_laneq_f16",
		"full name": "float16x4_t vcmla_rot270_laneq_f16(float16x4_t r,float16x4_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmla_rot270_laneq_f32",
		"full name": "float32x2_t vcmla_rot270_laneq_f32(float32x2_t r,float32x2_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_f16",
		"full name": "float16x8_t vcmlaq_rot270_f16(float16x8_t r,float16x8_t a,float16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_f32",
		"full name": "float32x4_t vcmlaq_rot270_f32(float32x4_t r,float32x4_t a,float32x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_f64",
		"full name": "float64x2_t vcmlaq_rot270_f64(float64x2_t r,float64x2_t a,float64x2_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_lane_f16",
		"full name": "float16x8_t vcmlaq_rot270_lane_f16(float16x8_t r,float16x8_t a,float16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_lane_f32",
		"full name": "float32x4_t vcmlaq_rot270_lane_f32(float32x4_t r,float32x4_t a,float32x2_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_laneq_f16",
		"full name": "float16x8_t vcmlaq_rot270_laneq_f16(float16x8_t r,float16x8_t a,float16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vcmlaq_rot270_laneq_f32",
		"full name": "float32x4_t vcmlaq_rot270_laneq_f32(float32x4_t r,float32x4_t a,float32x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Complex Multiply Accumulate.",
		"function_cn": "浮点复数乘法累加。"
	},
	{
		"name": "vrnd32z_f32",
		"full name": "float32x2_t vrnd32z_f32(float32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 32 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd32zq_f32",
		"full name": "float32x4_t vrnd32zq_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 32 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd32z_f64",
		"full name": "float64x1_t vrnd32z_f64(float64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 32 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd32zq_f64",
		"full name": "float64x2_t vrnd32zq_f64(float64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 32 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd64z_f32",
		"full name": "float32x2_t vrnd64z_f32(float32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 64 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd64zq_f32",
		"full name": "float32x4_t vrnd64zq_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 64 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd64z_f64",
		"full name": "float64x1_t vrnd64z_f64(float64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 64 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd64zq_f64",
		"full name": "float64x2_t vrnd64zq_f64(float64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入到 64 位整数向零（向量）。此指令使用向零舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vrnd32x_f32",
		"full name": "float32x2_t vrnd32x_f32(float32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 32 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd32xq_f32",
		"full name": "float32x4_t vrnd32xq_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 32 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd32x_f64",
		"full name": "float64x1_t vrnd32x_f64(float64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 32 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd32xq_f64",
		"full name": "float64x2_t vrnd32xq_f64(float64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 32 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 32 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd64x_f32",
		"full name": "float32x2_t vrnd64x_f32(float32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 64 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd64xq_f32",
		"full name": "float32x4_t vrnd64xq_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 64 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd64x_f64",
		"full name": "float64x1_t vrnd64x_f64(float64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 64 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vrnd64xq_f64",
		"full name": "float64x2_t vrnd64xq_f64(float64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.",
		"function_cn": "浮点数舍入为 64 位整数，使用当前舍入模式（向量）。此指令使用FPCR确定的舍入模式将 SIMD&FP 源寄存器中的浮点值向量舍入为适合 64 位整数大小的整数浮点值，并将结果写入 SIMD&FP 目标寄存器."
	},
	{
		"name": "vmmlaq_s32",
		"full name": "int32x4_t vmmlaq_s32(int32x4_t r,int8x16_t a,int8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Signed 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of signed 8-bit integer values in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
		"function_cn": "有符号 8 位整数矩阵乘法累加。此指令将第一个源向量中的有符号 8 位整数值的 2x8 矩阵乘以第二个源向量中的有符号 8 位整数值的 8x2 矩阵。生成的 2x2 32 位整数矩阵乘积被破坏性地添加到目标向量中的 32 位整数矩阵累加器。这相当于对每个目标元素执行 8 路点积。 "
	},
	{
		"name": "vmmlaq_u32",
		"full name": "uint32x4_t vmmlaq_u32(uint32x4_t r,uint8x16_t a,uint8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of unsigned 8-bit integer values in the first source vector by the 8x2 matrix of unsigned 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
		"function_cn": "无符号 8 位整数矩阵乘法累加。此指令将第一个源向量中无符号 8 位整数值的 2x8 矩阵乘以第二个源向量中无符号 8 位整数值的 8x2 矩阵。生成的 2x2 32 位整数矩阵乘积被破坏性地添加到目标向量中的 32 位整数矩阵累加器。这相当于对每个目标元素执行 8 路点积。\n\n "
	},
	{
		"name": "vusmmlaq_s32",
		"full name": "int32x4_t vusmmlaq_s32(int32x4_t r,uint8x16_t a,int8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Unsigned and signed 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of unsigned 8-bit integer values in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
		"function_cn": "无符号和有符号 8 位整数矩阵乘法累加。此指令将第一个源向量中的 2x8 无符号 8 位整数值矩阵乘以第二个源向量中的有符号 8 位整数值的 8x2 矩阵。生成的 2x2 32 位整数矩阵乘积被破坏性地添加到目标向量中的 32 位整数矩阵累加器。这相当于对每个目标元素执行 8 路点积。"
	},
	{
		"name": "vusdot_s32",
		"full name": "int32x2_t vusdot_s32(int32x2_t r,uint8x8_t a,int8x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "带无符号和有符号整数的点积向量形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的相应 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。 "
	},
	{
		"name": "vusdot_lane_s32",
		"full name": "int32x2_t vusdot_lane_s32(int32x2_t r,uint8x8_t a,int8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "带无符号和有符号整数的点积向量形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的相应 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。 "
	},
	{
		"name": "vsudot_lane_s32",
		"full name": "int32x2_t vsudot_lane_s32(int32x2_t r,int8x8_t a,uint8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.",
		"function_cn": "带无符号和有符号整数的点积索引形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的索引 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。"
	},
	{
		"name": "vusdot_laneq_s32",
		"full name": "int32x2_t vusdot_laneq_s32(int32x2_t r,uint8x8_t a,int8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "带无符号和有符号整数的点积向量形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的相应 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。 "
	},
	{
		"name": "vsudot_laneq_s32",
		"full name": "int32x2_t vsudot_laneq_s32(int32x2_t r,int8x8_t a,uint8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.",
		"function_cn": "带无符号和有符号整数的点积索引形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的索引 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。"
	},
	{
		"name": "vusdotq_s32",
		"full name": "int32x4_t vusdotq_s32(int32x4_t r,uint8x16_t a,int8x16_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "带无符号和有符号整数的点积向量形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的相应 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。 "
	},
	{
		"name": "vusdotq_lane_s32",
		"full name": "int32x4_t vusdotq_lane_s32(int32x4_t r,uint8x16_t a,int8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "带无符号和有符号整数的点积向量形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的相应 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。 "
	},
	{
		"name": "vsudotq_lane_s32",
		"full name": "int32x4_t vsudotq_lane_s32(int32x4_t r,int8x16_t a,uint8x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.",
		"function_cn": "带无符号和有符号整数的点积索引形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的索引 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。"
	},
	{
		"name": "vusdotq_laneq_s32",
		"full name": "int32x4_t vusdotq_laneq_s32(int32x4_t r,uint8x16_t a,int8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
		"function_cn": "带无符号和有符号整数的点积向量形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的相应 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。 "
	},
	{
		"name": "vsudotq_laneq_s32",
		"full name": "int32x4_t vsudotq_laneq_s32(int32x4_t r,int8x16_t a,uint8x16_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.",
		"function_cn": "带无符号和有符号整数的点积索引形式。此指令执行第一个源寄存器的每个 32 位元素中的四个无符号 8 位整数值与第二个源寄存器的索引 32 位元素中的四个有符号 8 位整数值的点积，累加结果到目标寄存器的相应 32 位元素中。"
	},
	{
		"name": "vcreate_bf16",
		"full name": "bfloat16x4_t vcreate_bf16(uint64_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vdup_n_bf16",
		"full name": "bfloat16x4_t vdup_n_bf16(bfloat16_t value)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdupq_n_bf16",
		"full name": "bfloat16x8_t vdupq_n_bf16(bfloat16_t value)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdup_lane_bf16",
		"full name": "bfloat16x4_t vdup_lane_bf16(bfloat16x4_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdupq_lane_bf16",
		"full name": "bfloat16x8_t vdupq_lane_bf16(bfloat16x4_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdup_laneq_bf16",
		"full name": "bfloat16x4_t vdup_laneq_bf16(bfloat16x8_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vdupq_laneq_bf16",
		"full name": "bfloat16x8_t vdupq_laneq_bf16(bfloat16x8_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vcombine_bf16",
		"full name": "bfloat16x8_t vcombine_bf16(bfloat16x4_t low,bfloat16x4_t high)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vget_high_bf16",
		"full name": "bfloat16x4_t vget_high_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vget_low_bf16",
		"full name": "bfloat16x4_t vget_low_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vget_lane_bf16",
		"full name": "bfloat16_t vget_lane_bf16(bfloat16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vgetq_lane_bf16",
		"full name": "bfloat16_t vgetq_lane_bf16(bfloat16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vset_lane_bf16",
		"full name": "bfloat16x4_t vset_lane_bf16(bfloat16_t a,bfloat16x4_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vsetq_lane_bf16",
		"full name": "bfloat16x8_t vsetq_lane_bf16(bfloat16_t a,bfloat16x8_t v,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vduph_lane_bf16",
		"full name": "bfloat16_t vduph_lane_bf16(bfloat16x4_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vduph_laneq_bf16",
		"full name": "bfloat16_t vduph_laneq_bf16(bfloat16x8_t vec,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.",
		"function_cn": " 将向量元素复制到向量或标量。此指令将源 SIMD&FP 寄存器中指定元素索引处的向量元素复制为标量或向量中的每个元素，并将结果写入目标 SIMD&FP 寄存器。"
	},
	{
		"name": "vld1_bf16",
		"full name": "bfloat16x4_t vld1_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1q_bf16",
		"full name": "bfloat16x8_t vld1q_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1_lane_bf16",
		"full name": "bfloat16x4_t vld1_lane_bf16(bfloat16_t const * ptr,bfloat16x4_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1q_lane_bf16",
		"full name": "bfloat16x8_t vld1q_lane_bf16(bfloat16_t const * ptr,bfloat16x8_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1_dup_bf16",
		"full name": "bfloat16x4_t vld1_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.",
		"function_cn": "加载一个单元素结构并复制到所有并行道（一个寄存器的）。该指令从内存加载单元素结构并将该结构复制到 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vld1q_dup_bf16",
		"full name": "bfloat16x8_t vld1q_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.",
		"function_cn": "加载一个单元素结构并复制到所有并行道（一个寄存器的）。该指令从内存加载单元素结构并将该结构复制到 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vst1_bf16",
		"full name": "void vst1_bf16(bfloat16_t * ptr,bfloat16x4_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1q_bf16",
		"full name": "void vst1q_bf16(bfloat16_t * ptr,bfloat16x8_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1_lane_bf16",
		"full name": "void vst1_lane_bf16(bfloat16_t * ptr,bfloat16x4_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1q_lane_bf16",
		"full name": "void vst1q_lane_bf16(bfloat16_t * ptr,bfloat16x8_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vld2_bf16",
		"full name": "bfloat16x4x2_t vld2_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 2 元素结构加载到两个寄存器。该指令从内存中加载多个 2 元素结构并将结果写入两个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld2q_bf16",
		"full name": "bfloat16x8x2_t vld2q_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 2 元素结构加载到两个寄存器。该指令从内存中加载多个 2 元素结构并将结果写入两个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld3_bf16",
		"full name": "bfloat16x4x3_t vld3_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 3 元素结构加载到三个寄存器。该指令从内存中加载多个 3 元素结构并将结果写入三个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld3q_bf16",
		"full name": "bfloat16x8x3_t vld3q_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 3 元素结构加载到三个寄存器。该指令从内存中加载多个 3 元素结构并将结果写入三个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld4_bf16",
		"full name": "bfloat16x4x4_t vld4_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 4 元素结构加载到四个寄存器。该指令从内存中加载多个 4 元素结构并将结果写入四个 SIMD&FP 寄存器，并进行去交错。 "
	},
	{
		"name": "vld4q_bf16",
		"full name": "bfloat16x8x4_t vld4q_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 4 元素结构加载到四个寄存器。该指令从内存中加载多个 4 元素结构并将结果写入四个 SIMD&FP 寄存器，并进行去交错。 "
	},
	{
		"name": "vld2_dup_bf16",
		"full name": "bfloat16x4x2_t vld2_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.",
		"function_cn": "加载单个 2 元素结构并复制到两个寄存器的所有并行道。该指令从内存加载一个 2 元素结构并将该结构复制到两个 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vld2q_dup_bf16",
		"full name": "bfloat16x8x2_t vld2q_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.",
		"function_cn": "加载单个 2 元素结构并复制到两个寄存器的所有并行道。该指令从内存加载一个 2 元素结构并将该结构复制到两个 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vld3_dup_bf16",
		"full name": "bfloat16x4x3_t vld3_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.",
		"function_cn": "加载单个 3 元素结构并复制到三个寄存器的所有并行道。该指令从内存加载一个 3 元素结构并将该结构复制到三个 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vld3q_dup_bf16",
		"full name": "bfloat16x8x3_t vld3q_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.",
		"function_cn": "加载单个 3 元素结构并复制到三个寄存器的所有并行道。该指令从内存加载一个 3 元素结构并将该结构复制到三个 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vld4_dup_bf16",
		"full name": "bfloat16x4x4_t vld4_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.",
		"function_cn": "加载单个 4 元素结构并复制到四个寄存器的所有并行道。该指令从内存加载一个 4 元素结构并将该结构复制到四个 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vld4q_dup_bf16",
		"full name": "bfloat16x8x4_t vld4q_dup_bf16(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.",
		"function_cn": "加载单个 4 元素结构并复制到四个寄存器的所有并行道。该指令从内存加载一个 4 元素结构并将该结构复制到四个 SIMD&FP 寄存器的所有并行道。"
	},
	{
		"name": "vst2_bf16",
		"full name": "void vst2_bf16(bfloat16_t * ptr,bfloat16x4x2_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自两个寄存器的多个 2 元素结构。该指令将两个 SIMD&FP 寄存器中的多个 2 元素结构存储到内存中，并进行交错。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst2q_bf16",
		"full name": "void vst2q_bf16(bfloat16_t * ptr,bfloat16x8x2_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自两个寄存器的多个 2 元素结构。该指令将两个 SIMD&FP 寄存器中的多个 2 元素结构存储到内存中，并进行交错。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst3_bf16",
		"full name": "void vst3_bf16(bfloat16_t * ptr,bfloat16x4x3_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自三个寄存器的多个 3 元素结构。该指令将三个 SIMD&FP 寄存器中的多个 3 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst3q_bf16",
		"full name": "void vst3q_bf16(bfloat16_t * ptr,bfloat16x8x3_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自三个寄存器的多个 3 元素结构。该指令将三个 SIMD&FP 寄存器中的多个 3 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst4_bf16",
		"full name": "void vst4_bf16(bfloat16_t * ptr,bfloat16x4x4_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自四个寄存器的多个 4 元素结构。该指令将四个 SIMD&FP 寄存器中的多个 4 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst4q_bf16",
		"full name": "void vst4q_bf16(bfloat16_t * ptr,bfloat16x8x4_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自四个寄存器的多个 4 元素结构。该指令将四个 SIMD&FP 寄存器中的多个 4 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vld2_lane_bf16",
		"full name": "bfloat16x4x2_t vld2_lane_bf16(bfloat16_t const * ptr,bfloat16x4x2_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 2 元素结构加载到两个寄存器。该指令从内存中加载多个 2 元素结构并将结果写入两个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld2q_lane_bf16",
		"full name": "bfloat16x8x2_t vld2q_lane_bf16(bfloat16_t const * ptr,bfloat16x8x2_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 2 元素结构加载到两个寄存器。该指令从内存中加载多个 2 元素结构并将结果写入两个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld3_lane_bf16",
		"full name": "bfloat16x4x3_t vld3_lane_bf16(bfloat16_t const * ptr,bfloat16x4x3_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 3 元素结构加载到三个寄存器。该指令从内存中加载多个 3 元素结构并将结果写入三个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld3q_lane_bf16",
		"full name": "bfloat16x8x3_t vld3q_lane_bf16(bfloat16_t const * ptr,bfloat16x8x3_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 3 元素结构加载到三个寄存器。该指令从内存中加载多个 3 元素结构并将结果写入三个 SIMD&FP 寄存器，并进行去交错。"
	},
	{
		"name": "vld4_lane_bf16",
		"full name": "bfloat16x4x4_t vld4_lane_bf16(bfloat16_t const * ptr,bfloat16x4x4_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 4 元素结构加载到四个寄存器。该指令从内存中加载多个 4 元素结构并将结果写入四个 SIMD&FP 寄存器，并进行去交错。 "
	},
	{
		"name": "vld4q_lane_bf16",
		"full name": "bfloat16x8x4_t vld4q_lane_bf16(bfloat16_t const * ptr,bfloat16x8x4_t src,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.",
		"function_cn": "将多个 4 元素结构加载到四个寄存器。该指令从内存中加载多个 4 元素结构并将结果写入四个 SIMD&FP 寄存器，并进行去交错。 "
	},
	{
		"name": "vst2_lane_bf16",
		"full name": "void vst2_lane_bf16(bfloat16_t * ptr,bfloat16x4x2_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自两个寄存器的多个 2 元素结构。该指令将两个 SIMD&FP 寄存器中的多个 2 元素结构存储到内存中，并进行交错。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst2q_lane_bf16",
		"full name": "void vst2q_lane_bf16(bfloat16_t * ptr,bfloat16x8x2_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自两个寄存器的多个 2 元素结构。该指令将两个 SIMD&FP 寄存器中的多个 2 元素结构存储到内存中，并进行交错。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst3_lane_bf16",
		"full name": "void vst3_lane_bf16(bfloat16_t * ptr,bfloat16x4x3_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自三个寄存器的多个 3 元素结构。该指令将三个 SIMD&FP 寄存器中的多个 3 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst3q_lane_bf16",
		"full name": "void vst3q_lane_bf16(bfloat16_t * ptr,bfloat16x8x3_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自三个寄存器的多个 3 元素结构。该指令将三个 SIMD&FP 寄存器中的多个 3 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst4_lane_bf16",
		"full name": "void vst4_lane_bf16(bfloat16_t * ptr,bfloat16x4x4_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自四个寄存器的多个 4 元素结构。该指令将四个 SIMD&FP 寄存器中的多个 4 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst4q_lane_bf16",
		"full name": "void vst4q_lane_bf16(bfloat16_t * ptr,bfloat16x8x4_t val,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.",
		"function_cn": "存储来自四个寄存器的多个 4 元素结构。该指令将四个 SIMD&FP 寄存器中的多个 4 元素结构以交错方式存储到内存中。每个寄存器的每个元素都被存储。"
	},
	{
		"name": "vst1_bf16_x2",
		"full name": "void vst1_bf16_x2(bfloat16_t * ptr,bfloat16x4x2_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1q_bf16_x2",
		"full name": "void vst1q_bf16_x2(bfloat16_t * ptr,bfloat16x8x2_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1_bf16_x3",
		"full name": "void vst1_bf16_x3(bfloat16_t * ptr,bfloat16x4x3_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1q_bf16_x3",
		"full name": "void vst1q_bf16_x3(bfloat16_t * ptr,bfloat16x8x3_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1_bf16_x4",
		"full name": "void vst1_bf16_x4(bfloat16_t * ptr,bfloat16x4x4_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vst1q_bf16_x4",
		"full name": "void vst1q_bf16_x4(bfloat16_t * ptr,bfloat16x8x4_t val)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.",
		"function_cn": "存储来自一个、两个、三个或四个寄存器的多个单元素结构。该指令将元素从一个、两个、三个或四个 SIMD&FP 寄存器存储到内存中，无需交错。每个寄存器的每个元素都被存储。 "
	},
	{
		"name": "vld1_bf16_x2",
		"full name": "bfloat16x4x2_t vld1_bf16_x2(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1q_bf16_x2",
		"full name": "bfloat16x8x2_t vld1q_bf16_x2(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1_bf16_x3",
		"full name": "bfloat16x4x3_t vld1_bf16_x3(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1q_bf16_x3",
		"full name": "bfloat16x8x3_t vld1q_bf16_x3(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1_bf16_x4",
		"full name": "bfloat16x4x4_t vld1_bf16_x4(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vld1q_bf16_x4",
		"full name": "bfloat16x8x4_t vld1q_bf16_x4(bfloat16_t const * ptr)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.",
		"function_cn": "将多个单元素结构加载到一个、两个、三个或四个寄存器。该指令从内存加载多个单元素结构并将结果写入一个、两个、三个或四个 SIMD&FP 寄存器。 "
	},
	{
		"name": "vreinterpret_bf16_s8",
		"full name": "bfloat16x4_t vreinterpret_bf16_s8(int8x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_s16",
		"full name": "bfloat16x4_t vreinterpret_bf16_s16(int16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_s32",
		"full name": "bfloat16x4_t vreinterpret_bf16_s32(int32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_f32",
		"full name": "bfloat16x4_t vreinterpret_bf16_f32(float32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_u8",
		"full name": "bfloat16x4_t vreinterpret_bf16_u8(uint8x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_u16",
		"full name": "bfloat16x4_t vreinterpret_bf16_u16(uint16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_u32",
		"full name": "bfloat16x4_t vreinterpret_bf16_u32(uint32x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_p8",
		"full name": "bfloat16x4_t vreinterpret_bf16_p8(poly8x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_p16",
		"full name": "bfloat16x4_t vreinterpret_bf16_p16(poly16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_u64",
		"full name": "bfloat16x4_t vreinterpret_bf16_u64(uint64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_s64",
		"full name": "bfloat16x4_t vreinterpret_bf16_s64(int64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_s8",
		"full name": "bfloat16x8_t vreinterpretq_bf16_s8(int8x16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_s16",
		"full name": "bfloat16x8_t vreinterpretq_bf16_s16(int16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_s32",
		"full name": "bfloat16x8_t vreinterpretq_bf16_s32(int32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_f32",
		"full name": "bfloat16x8_t vreinterpretq_bf16_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_u8",
		"full name": "bfloat16x8_t vreinterpretq_bf16_u8(uint8x16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_u16",
		"full name": "bfloat16x8_t vreinterpretq_bf16_u16(uint16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_u32",
		"full name": "bfloat16x8_t vreinterpretq_bf16_u32(uint32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_p8",
		"full name": "bfloat16x8_t vreinterpretq_bf16_p8(poly8x16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_p16",
		"full name": "bfloat16x8_t vreinterpretq_bf16_p16(poly16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_u64",
		"full name": "bfloat16x8_t vreinterpretq_bf16_u64(uint64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_s64",
		"full name": "bfloat16x8_t vreinterpretq_bf16_s64(int64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_f64",
		"full name": "bfloat16x4_t vreinterpret_bf16_f64(float64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_f64",
		"full name": "bfloat16x8_t vreinterpretq_bf16_f64(float64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_bf16_p64",
		"full name": "bfloat16x4_t vreinterpret_bf16_p64(poly64x1_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_p64",
		"full name": "bfloat16x8_t vreinterpretq_bf16_p64(poly64x2_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_bf16_p128",
		"full name": "bfloat16x8_t vreinterpretq_bf16_p128(poly128_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_s8_bf16",
		"full name": "int8x8_t vreinterpret_s8_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_s16_bf16",
		"full name": "int16x4_t vreinterpret_s16_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_s32_bf16",
		"full name": "int32x2_t vreinterpret_s32_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_f32_bf16",
		"full name": "float32x2_t vreinterpret_f32_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_u8_bf16",
		"full name": "uint8x8_t vreinterpret_u8_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_u16_bf16",
		"full name": "uint16x4_t vreinterpret_u16_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_u32_bf16",
		"full name": "uint32x2_t vreinterpret_u32_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_p8_bf16",
		"full name": "poly8x8_t vreinterpret_p8_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_p16_bf16",
		"full name": "poly16x4_t vreinterpret_p16_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_u64_bf16",
		"full name": "uint64x1_t vreinterpret_u64_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_s64_bf16",
		"full name": "int64x1_t vreinterpret_s64_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_f64_bf16",
		"full name": "float64x1_t vreinterpret_f64_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpret_p64_bf16",
		"full name": "poly64x1_t vreinterpret_p64_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_s8_bf16",
		"full name": "int8x16_t vreinterpretq_s8_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_s16_bf16",
		"full name": "int16x8_t vreinterpretq_s16_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_s32_bf16",
		"full name": "int32x4_t vreinterpretq_s32_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_f32_bf16",
		"full name": "float32x4_t vreinterpretq_f32_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_u8_bf16",
		"full name": "uint8x16_t vreinterpretq_u8_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_u16_bf16",
		"full name": "uint16x8_t vreinterpretq_u16_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_u32_bf16",
		"full name": "uint32x4_t vreinterpretq_u32_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_p8_bf16",
		"full name": "poly8x16_t vreinterpretq_p8_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_p16_bf16",
		"full name": "poly16x8_t vreinterpretq_p16_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_u64_bf16",
		"full name": "uint64x2_t vreinterpretq_u64_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_s64_bf16",
		"full name": "int64x2_t vreinterpretq_s64_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_f64_bf16",
		"full name": "float64x2_t vreinterpretq_f64_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_p64_bf16",
		"full name": "poly64x2_t vreinterpretq_p64_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vreinterpretq_p128_bf16",
		"full name": "poly128_t vreinterpretq_p128_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Vector reinterpret cast operation",
		"function_cn": "向量重新解释转换操作"
	},
	{
		"name": "vcvt_f32_bf16",
		"full name": "float32x4_t vcvt_f32_bf16(bfloat16x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.",
		"function_cn": "Shift Left Long（按元素大小）。此指令读取源 SIMD&FP 寄存器的下半部分或上半部分中的每个向量元素，将每个结果左移元素大小，将最终结果写入向量，并将向量写入目标 SIMD&FP 寄存器。目标向量元素的长度是源向量元素的两倍。 "
	},
	{
		"name": "vcvtq_low_f32_bf16",
		"full name": "float32x4_t vcvtq_low_f32_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.",
		"function_cn": "Shift Left Long（按元素大小）。此指令读取源 SIMD&FP 寄存器的下半部分或上半部分中的每个向量元素，将每个结果左移元素大小，将最终结果写入向量，并将向量写入目标 SIMD&FP 寄存器。目标向量元素的长度是源向量元素的两倍。 "
	},
	{
		"name": "vcvtq_high_f32_bf16",
		"full name": "float32x4_t vcvtq_high_f32_bf16(bfloat16x8_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.",
		"function_cn": "Shift Left Long（按元素大小）。此指令读取源 SIMD&FP 寄存器的下半部分或上半部分中的每个向量元素，将每个结果左移元素大小，将最终结果写入向量，并将向量写入目标 SIMD&FP 寄存器。目标向量元素的长度是源向量元素的两倍。 "
	},
	{
		"name": "vcvt_bf16_f32",
		"full name": "bfloat16x4_t vcvt_bf16_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&FP destination vector. The result elements are half the width of the source elements.",
		"function_cn": "从单精度到 BFloat16 格式的浮点转换（向量）读取 SIMD&FP 源向量中的每个单精度元素，将每个值转换为 BFloat16 格式，并将结果写入 SIMD&FP 目标向量的下半部分或上半部分。结果元素是源元素宽度的一半。 "
	},
	{
		"name": "vcvtq_low_bf16_f32",
		"full name": "bfloat16x8_t vcvtq_low_bf16_f32(float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&FP destination vector. The result elements are half the width of the source elements.",
		"function_cn": "从单精度到 BFloat16 格式的浮点转换（向量）读取 SIMD&FP 源向量中的每个单精度元素，将每个值转换为 BFloat16 格式，并将结果写入 SIMD&FP 目标向量的下半部分或上半部分。结果元素是源元素宽度的一半。 "
	},
	{
		"name": "vcvtq_high_bf16_f32",
		"full name": "bfloat16x8_t vcvtq_high_bf16_f32(bfloat16x8_t inactive,float32x4_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&FP destination vector. The result elements are half the width of the source elements.",
		"function_cn": "从单精度到 BFloat16 格式的浮点转换（向量）读取 SIMD&FP 源向量中的每个单精度元素，将每个值转换为 BFloat16 格式，并将结果写入 SIMD&FP 目标向量的下半部分或上半部分。结果元素是源元素宽度的一半。 "
	},
	{
		"name": "vcvth_bf16_f32",
		"full name": "bfloat16_t vcvth_bf16_f32(float32_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Floating-point convert from single-precision to BFloat16 format (scalar) converts the single-precision floating-point value in the 32-bit SIMD&FP source register to BFloat16 format and writes the result in the 16-bit SIMD&FP destination register.",
		"function_cn": "从单精度到BFloat16 格式的浮点转换（标量）将32 位SIMD&FP 源寄存器中的单精度浮点值转换为BFloat16 格式，并将结果写入16 位SIMD&FP 目标寄存器。 "
	},
	{
		"name": "vcvtah_f32_bf16",
		"full name": "float32_t vcvtah_f32_bf16(bfloat16_t a)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.",
		"function_cn": "左移（立即）。该指令从向量中读取每个值，将每个结果左移一个立即值，将最终结果写入向量，然后将向量写入目标 SIMD&FP 寄存器。 "
	},
	{
		"name": "vcopy_lane_bf16",
		"full name": "bfloat16x4_t vcopy_lane_bf16(bfloat16x4_t a,const int lane1,bfloat16x4_t b,const int lane2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vcopyq_lane_bf16",
		"full name": "bfloat16x8_t vcopyq_lane_bf16(bfloat16x8_t a,const int lane1,bfloat16x4_t b,const int lane2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vcopy_laneq_bf16",
		"full name": "bfloat16x4_t vcopy_laneq_bf16(bfloat16x4_t a,const int lane1,bfloat16x8_t b,const int lane2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vcopyq_laneq_bf16",
		"full name": "bfloat16x8_t vcopyq_laneq_bf16(bfloat16x8_t a,const int lane1,bfloat16x8_t b,const int lane2)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.",
		"function_cn": "从另一个向量元素插入向量元素。该指令将源 SIMD&FP 寄存器的向量元素复制到目标 SIMD&FP 寄存器的指定向量元素。 "
	},
	{
		"name": "vbfdot_f32",
		"full name": "float32x2_t vbfdot_f32(float32x2_t r,bfloat16x4_t a,bfloat16x4_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点点积（向量）。此指令将源向量分隔为成对的 16 位 BF16 元素。在每一对中，第一个源向量中的元素乘以第二个源向量中的相应元素。然后将得到的单精度乘积相加并破坏性地添加到目标向量的单精度元素中，该元素与第一个源向量中的 BF16 值对对齐。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfdotq_f32",
		"full name": "float32x4_t vbfdotq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点点积（向量）。此指令将源向量分隔为成对的 16 位 BF16 元素。在每一对中，第一个源向量中的元素乘以第二个源向量中的相应元素。然后将得到的单精度乘积相加并破坏性地添加到目标向量的单精度元素中，该元素与第一个源向量中的 BF16 值对对齐。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfdot_lane_f32",
		"full name": "float32x2_t vbfdot_lane_f32(float32x2_t r,bfloat16x4_t a,bfloat16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点点积（向量）。此指令将源向量分隔为成对的 16 位 BF16 元素。在每一对中，第一个源向量中的元素乘以第二个源向量中的相应元素。然后将得到的单精度乘积相加并破坏性地添加到目标向量的单精度元素中，该元素与第一个源向量中的 BF16 值对对齐。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfdotq_laneq_f32",
		"full name": "float32x4_t vbfdotq_laneq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点点积（向量）。此指令将源向量分隔为成对的 16 位 BF16 元素。在每一对中，第一个源向量中的元素乘以第二个源向量中的相应元素。然后将得到的单精度乘积相加并破坏性地添加到目标向量的单精度元素中，该元素与第一个源向量中的 BF16 值对对齐。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfdot_laneq_f32",
		"full name": "float32x2_t vbfdot_laneq_f32(float32x2_t r,bfloat16x4_t a,bfloat16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点点积（向量）。此指令将源向量分隔为成对的 16 位 BF16 元素。在每一对中，第一个源向量中的元素乘以第二个源向量中的相应元素。然后将得到的单精度乘积相加并破坏性地添加到目标向量的单精度元素中，该元素与第一个源向量中的 BF16 值对对齐。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfdotq_lane_f32",
		"full name": "float32x4_t vbfdotq_lane_f32(float32x4_t r,bfloat16x8_t a,bfloat16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点点积（向量）。此指令将源向量分隔为成对的 16 位 BF16 元素。在每一对中，第一个源向量中的元素乘以第二个源向量中的相应元素。然后将得到的单精度乘积相加并破坏性地添加到目标向量的单精度元素中，该元素与第一个源向量中的 BF16 值对对齐。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfmmlaq_f32",
		"full name": "float32x4_t vbfmmlaq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point matrix multiply-accumulate into 2x2 matrix. This instruction multiplies the 2x4 matrix of BF16 values held in the first 128-bit source vector by the 4x2 BF16 matrix in the second 128-bit source vector. The resulting 2x2 single-precision matrix product is then added destructively to the 2x2 single-precision matrix in the 128-bit destination vector. This is equivalent to performing a 4-way dot product per destination element. The instruction ignores the FPCR and does not update the FPSR exception status.",
		"function_cn": "BFloat16 浮点矩阵乘法累加成 2x2 矩阵。此指令将第一个 128 位源向量中保存的 BF16 值的 2x4 矩阵乘以第二个 128 位源向量中的 4x2 BF16 矩阵。然后将生成的 2x2 单精度矩阵乘积破坏性地添加到 128 位目标向量中的 2x2 单精度矩阵。这相当于对每个目标元素执行 4 路点积。该指令忽略FPCR并且不更新FPSR异常状态。 "
	},
	{
		"name": "vbfmlalbq_f32",
		"full name": "float32x4_t vbfmlalbq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
		"function_cn": "BFloat16 浮点扩展乘加长整型（向量）将第一个和第二个源向量中的偶数（底部）或奇数（顶部）16 位元素从 Bfloat16 扩展为单精度格式。然后该指令将这些值相乘并添加到目标向量的重叠单精度元素。"
	},
	{
		"name": "vbfmlaltq_f32",
		"full name": "float32x4_t vbfmlaltq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
		"function_cn": "BFloat16 浮点扩展乘加长整型（向量）将第一个和第二个源向量中的偶数（底部）或奇数（顶部）16 位元素从 Bfloat16 扩展为单精度格式。然后该指令将这些值相乘并添加到目标向量的重叠单精度元素。"
	},
	{
		"name": "vbfmlalbq_lane_f32",
		"full name": "float32x4_t vbfmlalbq_lane_f32(float32x4_t r,bfloat16x8_t a,bfloat16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
		"function_cn": "BFloat16 浮点扩展乘加长整型（向量）将第一个和第二个源向量中的偶数（底部）或奇数（顶部）16 位元素从 Bfloat16 扩展为单精度格式。然后该指令将这些值相乘并添加到目标向量的重叠单精度元素。"
	},
	{
		"name": "vbfmlalbq_laneq_f32",
		"full name": "float32x4_t vbfmlalbq_laneq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
		"function_cn": "BFloat16 浮点扩展乘加长整型（向量）将第一个和第二个源向量中的偶数（底部）或奇数（顶部）16 位元素从 Bfloat16 扩展为单精度格式。然后该指令将这些值相乘并添加到目标向量的重叠单精度元素。"
	},
	{
		"name": "vbfmlaltq_lane_f32",
		"full name": "float32x4_t vbfmlaltq_lane_f32(float32x4_t r,bfloat16x8_t a,bfloat16x4_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
		"function_cn": "BFloat16 浮点扩展乘加长整型（向量）将第一个和第二个源向量中的偶数（底部）或奇数（顶部）16 位元素从 Bfloat16 扩展为单精度格式。然后该指令将这些值相乘并添加到目标向量的重叠单精度元素。"
	},
	{
		"name": "vbfmlaltq_laneq_f32",
		"full name": "float32x4_t vbfmlaltq_laneq_f32(float32x4_t r,bfloat16x8_t a,bfloat16x8_t b,const int lane)",
		"Intel name": "",
		"Intel Asm": "",
		"Arm Asm": "",
		"function_en": "BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
		"function_cn": "BFloat16 浮点扩展乘加长整型（向量）将第一个和第二个源向量中的偶数（底部）或奇数（顶部）16 位元素从 Bfloat16 扩展为单精度格式。然后该指令将这些值相乘并添加到目标向量的重叠单精度元素。"
	}
  ],
  "BuiltIn": [
	{
		"name": "__builtin_aarch64_get_fpcr",
		"full name": "unsigned int __builtin_aarch64_get_fpcr ()",
		"function_en": "Obtains the contents of the FPCR register and views related parameter settings.",
		"function_cn": "获取FPCR寄存器内容，查看相关参数设置",
		"support_version": "5.5 ~ 9.3"
	},
	{
		"name": "__builtin_aarch64_set_fpcr",
		"full name": "void __builtin_aarch64_set_fpcr (unsigned int)",
		"function_en": "Sets the contents of the FPCR register.",
		"function_cn": "设置FPCR寄存器内容",
		"support_version": "5.5 ~ 9.3"
	},
	{
		"name": "__builtin_aarch64_get_fpsr",
		"full name": "unsigned int __builtin_aarch64_get_fpsr ()",
		"function_en": "Obtains the contents of the FPSR register and views related parameter settings.",
		"function_cn": "获取FPSR寄存器内容，查看相关参数设置",
		"support_version": "5.5 ~ 9.3"
	},
	{
		"name": "__builtin_aarch64_set_fpsr",
		"full name": "void __builtin_aarch64_set_fpsr (unsigned int)",
		"function_en": "Sets the contents of the FPSR register.",
		"function_cn": "设置FPSR寄存器内容",
		"support_version": "5.5 ~ 9.3"
	}
  ],
  "gcc": [
    {
      "name": "gcc4.8.5",
      "version": "4.8.5",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc4.8.5"
    },
    {
      "name": "gcc4.9.3",
      "version": "4.9.3",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc4.9.3"
    },
    {
      "name": "gcc5.1.0",
      "version": "5.1.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-5.1.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc5.1.0"
    },
    {
      "name": "gcc5.2.0",
      "version": "5.2.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-5.2.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc5.2.0"
    },
    {
      "name": "gcc5.3.0",
      "version": "5.3.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-5.3.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc5.3.0"
    },
    {
      "name": "gcc5.4.0",
      "version": "5.4.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-5.4.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc5.4.0"
    },
    {
      "name": "gcc5.5.0",
      "version": "5.5.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-5.5.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc5.5.0"
    },
    {
      "name": "gcc6.1.0",
      "version": "6.1.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc6.1.0"
    },
    {
      "name": "gcc6.2.0",
      "version": "6.2.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc6.2.0"
    },
    {
      "name": "gcc6.3.0",
      "version": "6.3.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-6.3.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc6.3.0"
    },
    {
      "name": "gcc6.4.0",
      "version": "6.4.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-6.4.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc6.4.0"
    },
    {
      "name": "gcc6.5.0",
      "version": "6.5.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-6.5.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc6.5.0"
    },
    {
      "name": "gcc7.1.0",
      "version": "7.1.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc7.1.0"
    },
    {
      "name": "gcc7.2.0",
      "version": "7.2.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-7.2.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc7.2.0"
    },
    {
      "name": "gcc7.3.0",
      "version": "7.3.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc7.3.0"
    },
    {
      "name": "gcc7.4.0",
      "version": "7.4.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-7.4.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc7.4.0"
    },
    {
      "name": "gcc8.1.0",
      "version": "8.1.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-8.1.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc8.1.0"
    },
    {
      "name": "gcc8.2.0",
      "version": "8.2.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-8.2.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc8.2.0"
    },
    {
      "name": "gcc8.3.0",
      "version": "8.3.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-8.3.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc8.3.0"
    },
    {
      "name": "gcc9.1.0",
      "version": "9.1.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-9.1.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc9.1.0"
    },
    {
      "name": "gcc9.2.0",
      "version": "9.2.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc9.2.0"
    },
    {
      "name": "gcc9.3.0",
      "version": "9.3.0",
      "help_url": "http://gcc.gnu.org/onlinedocs/gcc-9.3.0/gcc/AArch64-Options.html#AArch64-Options",
      "description": "Aarch64 compilation option information of Gcc9.3.0"
    }
  ],
  "compileOption": [
    {
      "gcc_version": "4.8.5",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references will be handled by the system."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit or keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Omit or keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-march",
      "range": [
        "armv8-a",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mcpu",
      "range": [
        "generic",
        "large",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "4.8.5",
      "name": "-mtune",
      "range": [
        "generic",
        "large"
      ],
      "description": "Specify the name of the processor to tune the performance for."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mabi",
      "range": [
        "lp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references will be handled by the system."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-march",
      "range": [
        "armv8-a",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a57.cortex-a53"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "4.9.3",
      "name": "-mcpu",
      "range": [
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "5.1.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "5.2.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "5.3.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, 'small', 'large' code model."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "5.4.0",
      "name": "-mcpu",
      "range": [
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general registers."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target architecture, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "5.5.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "crc",
        "crypto",
        "fp",
        "simd"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "6.1.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC relative literal loads."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "6.2.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC relative literal loads."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the 'tiny', 'small' or 'large' code model."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-momit-leaf-frame-pointer",
      "range": []
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Omit or keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mtls-dialect",
      "range": [],
      "description": "Use TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mtls-dialect",
      "range": [],
      "description": "Use traditional TLS as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mfix-cortex-a53-835769",
      "range": []
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Enable or disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mfix-cortex-a53-843419",
      "range": []
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Enable or disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": []
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-1",
        "native"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "6.3.0",
      "name": "-mpc-relative-literal-loads",
      "range": [
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Enable PC relative literal loads."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ]
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "6.4.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC relative literal loads."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Do not assume that unaligned memory references are handled by the system."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "When calculating the reciprocal square root approximation, uses one less step than otherwise, thus reducing latency and precision."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "exynos-m1",
        "qdf24xx",
        "thunderx",
        "xgene1",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "6.5.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC relative literal loads."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "7.1.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "7.2.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp32"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the 'tiny', 'small' or 'large' code model."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit or keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Omit or keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS or TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mtls-size",
      "range": [],
      "description": "Specify bit size of immediate TLS offsets. Valid values are 12, 24, 32, 48. This option requires binutils 2.26 or newer."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "native"
      ]
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "7.3.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "none-leaf",
        "all",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "lse",
        "fp16"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads. With this option literal pools are accessed using a single instruction and emitted after each function."
    },
    {
      "gcc_version": "7.4.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "armv8.4-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "saphira",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "saphira",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mverbose-cost-dump",
      "range": [],
      "description": "Enable verbose cost model dumping in the debug dump files."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-mno-pc-relative-literal-loads",
      "range": [],
      "description": "Disable PC-relative literal loads."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "8.1.0",
      "name": "-msve-vector-bits",
      "range": [],
      "description": "Specify the number of bits in an SVE vector register."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "armv8.4-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "saphira",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "saphira",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mverbose-cost-dump",
      "range": [],
      "description": "Enable verbose cost model dumping in the debug dump files."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-mno-pc-relative-literal-loads",
      "range": [],
      "description": "Disable PC-relative literal loads."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "8.2.0",
      "name": "-msve-vector-bits",
      "range": [],
      "description": "Specify the number of bits in an SVE vector register."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-march",
      "range": [
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "armv8.4-a",
        "native"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "saphira",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mcpu",
      "range": [
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "exynos-m1",
        "falkor",
        "qdf24xx",
        "saphira",
        "xgene1",
        "vulcan",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mverbose-cost-dump",
      "range": [],
      "description": "Enable verbose cost model dumping in the debug dump files."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-mno-pc-relative-literal-loads",
      "range": [],
      "description": "Disable PC-relative literal loads."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "8.3.0",
      "name": "-msve-vector-bits",
      "range": [
        "scalable",
        "128",
        "256",
        "512",
        "1024",
        "2048"
      ],
      "description": "Specify the number of bits in an SVE vector register."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-strict-align",
      "range": [],
      "description": "Allow generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mstack-protector-guard",
      "range": [],
      "description": "Generate stack protection code using canary at guard."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mstack-protector-guard-reg",
      "range": [],
      "description": "Generate stack protection code using canary with base register."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mstack-protector-guard-offset",
      "range": [],
      "description": "Generate stack protection code using canary with base register which offset from."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mtrack-speculation",
      "range": [],
      "description": "Enable generation of additional code to track speculative execution through conditional branches."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-track-speculation",
      "range": [],
      "description": "Disable generation of additional code to track speculative execution through conditional branches."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "armv8.4-a",
        "armv8.5-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "profile",
        "rng",
        "memtag",
        "sb",
        "ssbs",
        "predres"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "cortex-a76",
        "ares",
        "exynos-m1",
        "emag",
        "falkor",
        "neoverse-e1",
        "neoverse-n1",
        "qdf24xx",
        "saphira",
        "phecda",
        "xgene1",
        "vulcan",
        "octeontx",
        "octeontx81",
        "octeontx83",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "tsv110",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "cortex-a76.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "cortex-a76",
        "ares",
        "exynos-m1",
        "emag",
        "falkor",
        "neoverse-e1",
        "neoverse-n1",
        "qdf24xx",
        "saphira",
        "phecda",
        "xgene1",
        "vulcan",
        "octeontx",
        "octeontx81",
        "octeontx83",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "tsv110",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "cortex-a76.cortex-a55",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "profile",
        "rng",
        "memtag",
        "sb",
        "ssbs",
        "predres"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mverbose-cost-dump",
      "range": [],
      "description": "Enable verbose cost model dumping in the debug dump files."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mno-pc-relative-literal-loads",
      "range": [],
      "description": "Disable PC-relative literal loads."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-mbranch-protection",
      "range": [
        "none",
        "standard",
        "pac-ret[+leaf]",
        "bti"
      ],
      "description": "Select the branch protection features to use."
    },
    {
      "gcc_version": "9.1.0",
      "name": "-msve-vector-bits",
      "range": [
        "scalable",
        "128",
        "256",
        "512",
        "1024",
        "2048"
      ],
      "description": "Specify the number of bits in an SVE vector register."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-strict-align",
      "range": [],
      "description": "Allow generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mstack-protector-guard",
      "range": [],
      "description": "Generate stack protection code using canary at guard."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mstack-protector-guard-reg",
      "range": [],
      "description": "Generate stack protection code using canary with base register."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mstack-protector-guard-offset",
      "range": [],
      "description": "Generate stack protection code using canary with base register which offset from."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mtrack-speculation",
      "range": [],
      "description": "Enable generation of additional code to track speculative execution through conditional branches."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-track-speculation",
      "range": [],
      "description": "Disable generation of additional code to track speculative execution through conditional branches."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "armv8.4-a",
        "armv8.5-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "profile",
        "rng",
        "memtag",
        "sb",
        "ssbs",
        "predres"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "cortex-a76",
        "ares",
        "exynos-m1",
        "emag",
        "falkor",
        "neoverse-e1",
        "neoverse-n1",
        "qdf24xx",
        "saphira",
        "phecda",
        "xgene1",
        "vulcan",
        "octeontx",
        "octeontx81",
        "octeontx83",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "tsv110",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "cortex-a76.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "cortex-a76",
        "ares",
        "exynos-m1",
        "emag",
        "falkor",
        "neoverse-e1",
        "neoverse-n1",
        "qdf24xx",
        "saphira",
        "phecda",
        "xgene1",
        "vulcan",
        "octeontx",
        "octeontx81",
        "octeontx83",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "tsv110",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "cortex-a76.cortex-a55",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "profile",
        "rng",
        "memtag",
        "sb",
        "ssbs",
        "predres"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mverbose-cost-dump",
      "range": [],
      "description": "Enable verbose cost model dumping in the debug dump files."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mno-pc-relative-literal-loads",
      "range": [],
      "description": "Disable PC-relative literal loads."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-mbranch-protection",
      "range": [
        "none",
        "standard",
        "pac-ret[+leaf]",
        "bti"
      ],
      "description": "Select the branch protection features to use."
    },
    {
      "gcc_version": "9.2.0",
      "name": "-msve-vector-bits",
      "range": [
        "scalable",
        "128",
        "256",
        "512",
        "1024",
        "2048"
      ],
      "description": "Specify the number of bits in an SVE vector register."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mabi",
      "range": [
        "ilp32",
        "lp64"
      ],
      "description": "Generate code for the specified data model."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mbig-endian",
      "range": [],
      "description": "Generate big-endian code."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mgeneral-regs-only",
      "range": [],
      "description": "Generate code which uses only the general-purpose registers."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mlittle-endian",
      "range": [],
      "description": "Generate little-endian code."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mcmodel",
      "range": [
        "tiny",
        "small",
        "large"
      ],
      "description": "Generate code for the tiny, small, large code model."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mstrict-align",
      "range": [],
      "description": "Avoid generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-strict-align",
      "range": [],
      "description": "Allow generating memory accesses that may not be aligned on a natural object boundary as described in the architecture specification."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-momit-leaf-frame-pointer",
      "range": [],
      "description": "Omit the frame pointer in leaf functions."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-omit-leaf-frame-pointer",
      "range": [],
      "description": "Keep the frame pointer in leaf functions."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mstack-protector-guard",
      "range": [],
      "description": "Generate stack protection code using canary at guard."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mstack-protector-guard-reg",
      "range": [],
      "description": "Generate stack protection code using canary with base register."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mstack-protector-guard-offset",
      "range": [],
      "description": "Generate stack protection code using canary with base register which offset from."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mtls-dialect",
      "range": [
        "desc",
        "traditional"
      ],
      "description": "Use traditional TLS / TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mtls-size",
      "range": [
        "12",
        "24",
        "32",
        "48"
      ],
      "description": "Specify bit size of immediate TLS offsets."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mfix-cortex-a53-835769",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-fix-cortex-a53-835769",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 835769."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mfix-cortex-a53-843419",
      "range": [],
      "description": "Enable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-fix-cortex-a53-843419",
      "range": [],
      "description": "Disable the workaround for the ARM Cortex-A53 erratum number 843419."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mlow-precision-recip-sqrt",
      "range": [],
      "description": "Enable the reciprocal square root approximation."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-low-precision-recip-sqrt",
      "range": [],
      "description": "Disable the reciprocal square root approximation."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mlow-precision-sqrt",
      "range": [],
      "description": "Enable the square root approximation."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-low-precision-sqrt",
      "range": [],
      "description": "Disable the square root approximation."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mlow-precision-div",
      "range": [],
      "description": "Enable the division approximation."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-low-precision-div",
      "range": [],
      "description": "Disable the division approximation."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mtrack-speculation",
      "range": [],
      "description": "Enable generation of additional code to track speculative execution through conditional branches."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-track-speculation",
      "range": [],
      "description": "Disable generation of additional code to track speculative execution through conditional branches."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-march",
      "range": [
        "armv8-a",
        "armv8.1-a",
        "armv8.2-a",
        "armv8.3-a",
        "armv8.4-a",
        "armv8.5-a",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "profile",
        "rng",
        "memtag",
        "sb",
        "ssbs",
        "predres"
      ],
      "description": "Specify the name of the target architecture and, optionally, one or more feature modifiers."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mtune",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "cortex-a76",
        "ares",
        "exynos-m1",
        "emag",
        "falkor",
        "neoverse-e1",
        "neoverse-n1",
        "qdf24xx",
        "saphira",
        "phecda",
        "xgene1",
        "vulcan",
        "octeontx",
        "octeontx81",
        "octeontx83",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "tsv110",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "cortex-a76.cortex-a55",
        "native"
      ],
      "description": "Specify the name of the target processor for which GCC should tune the performance of the code."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mcpu",
      "range": [
        "generic",
        "cortex-a35",
        "cortex-a53",
        "cortex-a55",
        "cortex-a57",
        "cortex-a72",
        "cortex-a73",
        "cortex-a75",
        "cortex-a76",
        "ares",
        "exynos-m1",
        "emag",
        "falkor",
        "neoverse-e1",
        "neoverse-n1",
        "qdf24xx",
        "saphira",
        "phecda",
        "xgene1",
        "vulcan",
        "octeontx",
        "octeontx81",
        "octeontx83",
        "thunderx",
        "thunderxt88",
        "thunderxt88p1",
        "thunderxt81",
        "tsv110",
        "thunderxt83",
        "thunderx2t99",
        "cortex-a57.cortex-a53",
        "cortex-a72.cortex-a53",
        "cortex-a73.cortex-a35",
        "cortex-a73.cortex-a53",
        "cortex-a75.cortex-a55",
        "cortex-a76.cortex-a55",
        "native",
        "crc",
        "crypto",
        "fp",
        "simd",
        "sve",
        "lse",
        "rdma",
        "fp16",
        "fp16fml",
        "rcpc",
        "dotprod",
        "aes",
        "sha2",
        "sha3",
        "sm4",
        "profile",
        "rng",
        "memtag",
        "sb",
        "ssbs",
        "predres"
      ],
      "description": "Specify the name of the target processor, optionally suffixed by one or more feature modifiers."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-moverride",
      "range": [],
      "description": "Override tuning decisions made by the back-end in response to a -mtune= switch."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mverbose-cost-dump",
      "range": [],
      "description": "Enable verbose cost model dumping in the debug dump files."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mpc-relative-literal-loads",
      "range": [],
      "description": "Enable PC-relative literal loads."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mno-pc-relative-literal-loads",
      "range": [],
      "description": "Disable PC-relative literal loads."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-msign-return-address",
      "range": [
        "none",
        "non-leaf",
        "all"
      ],
      "description": "Select the function scope on which return address signing will be applied."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-mbranch-protection",
      "range": [
        "none",
        "standard",
        "pac-ret[+leaf]",
        "bti"
      ],
      "description": "Select the branch protection features to use."
    },
    {
      "gcc_version": "9.3.0",
      "name": "-msve-vector-bits",
      "range": [
        "scalable",
        "128",
        "256",
        "512",
        "1024",
        "2048"
      ],
      "description": "Specify the number of bits in an SVE vector register."
    }
  ]
}
